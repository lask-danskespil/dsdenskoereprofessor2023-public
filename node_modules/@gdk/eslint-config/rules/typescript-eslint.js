/** @type {import('eslint').Linter.RulesRecord} */
const typescriptEslintRules = {
	"@typescript-eslint/consistent-type-imports": "warn",
	"@typescript-eslint/naming-convention": [
		"warn",
		{
			selector: "property",
			modifiers: ["static", "readonly"],
			format: ["camelCase", "UPPER_CASE"],
		},
		{
			selector: "variable",
			modifiers: ["const"],
			format: ["camelCase", "PascalCase", "UPPER_CASE"],
			leadingUnderscore: "allow", // for unused variable
		},
		{
			selector: "parameter",
			format: ["camelCase"],
			leadingUnderscore: "allow", // for ignored parameters
		},
		{
			selector: ["class", "typeAlias"],
			format: ["PascalCase"],
		},
		{
			selector: ["enumMember"],
			format: ["PascalCase", "UPPER_CASE"],
		},
		{
			selector: "memberLike",
			modifiers: ["private", "protected"],
			format: ["camelCase"],
			leadingUnderscore: "allow",
		},
	],
	"@typescript-eslint/no-unused-vars": [
		"warn",
		{
			argsIgnorePattern: "^_|props",
			varsIgnorePattern: "^_",
			caughtErrorsIgnorePattern: "^_",
		},
	],
	"@typescript-eslint/parameter-properties": "warn",
	"@typescript-eslint/explicit-member-accessibility": "warn",
	"@typescript-eslint/explicit-function-return-type": [
		"warn",
		{
			allowExpressions: true,
		},
	],
};

module.exports = typescriptEslintRules;
