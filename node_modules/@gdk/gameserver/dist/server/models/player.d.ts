import type * as Hapi from "@hapi/hapi";
import * as errors from "./errors";
import type { IAmount } from "./types";
export interface IPlayer {
    playerId: string;
    alias: string;
    avatarCode: string;
    purse: IAmount;
}
export declare class Player {
    private static players;
    private static readonly player;
    id: string;
    alias: string;
    amount: number;
    avatarCode: string;
    private errorHelper;
    /**
     * Get player instance.
     */
    static getInstance(id?: string): Player;
    private constructor();
    /**
     * Returns the playerId from an HAPI request
     * playerId can be set as a query param of the URL of the caller, or from cookies
     * @param request: the Hapi.request
     */
    static getPlayerId(request: Hapi.Request): string;
    /**
     * Returns the player from an HAPI request
     * playerId can be set as a query param of the URL of the caller, or from cookies
     * @param request: the Hapi.request
     */
    static getPlayer(request: Hapi.Request): Player;
    /**
     * Get a player from id
     * @param playerId
     */
    static getPlayerFromId(playerId: string): Player;
    /**
     * Remove a registered player from id
     * @param playerId
     */
    static removePlayer(playerId: string): void;
    /**
     * Creates a player from json
     * @param jsonPlayer
     */
    static create(jsonPlayer: IPlayer): Player;
    /**
     * Get full players list
     */
    static getPlayers(ids?: string[]): Player[];
    /**
     * Throws an exception if Player"s error is set
     */
    assert(): void;
    /**
     * Get error.
     */
    get error(): errors.IGameError;
    /**
     * Set error.
     */
    set error(newError: errors.IGameError);
    /**
     * Set error.
     * @param newErrorCode
     */
    setError(newErrorCode: string): void;
    /**
     * Get available errors.
     * @param gameType
     */
    getAvaiblableErrors(gameType: string): errors.IGameError[];
    /**
     * Update purse with bet.
     * @param betAmount
     */
    updatePurseWithBet(betAmount: number): void;
    /**
     * Update purse with win.
     * @param amount
     */
    updatePurseWithWin(amount: number): void;
    /**
     * Get a json format of a player
     */
    toJson(): IPlayer;
}
