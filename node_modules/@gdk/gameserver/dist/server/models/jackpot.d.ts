import { EJackpotProgressionType } from "@gdk/backutils";
import type { IJackpotParticipation, IAmount, IJackpotDetails } from "@gdk/backutils";
import type { IJackpotMock } from "../routes/jackpots";
export interface IJackpotBalance {
    jackpotExternalId: string;
    progressionType: EJackpotProgressionType;
    balance: IAmount;
}
export interface IJackpotResult {
    jackpotWon: boolean;
    totalWinAmount: IAmount;
    jackpotsWinDetails: IJackpotWinAmountDetails[];
}
export declare enum EJackpotResultStatus {
    InProgress = "IN_PROGRESS",
    Failure = "FAILURE",
    Unauvailable = "UNAVAILABLE",
    Done = "DONE"
}
export declare enum EJackpotWinState {
    Win = 0,
    Loose = 1,
    Random = 2
}
export interface IJackpotResults {
    status: EJackpotResultStatus;
    participationCount: number;
    configurationName: string;
    result: IJackpotResult;
}
export interface IJackpotWinAmountDetails {
    winAmount: IAmount;
    jackpotExternalId: string;
}
export declare class Jackpot {
    private static instances;
    private static intervalDuration;
    private static status;
    static configurationName: string;
    static participations: IJackpotParticipation[];
    /**
     * Get instance.
     */
    static getInstances(): Jackpot[];
    private _configuration;
    private _value;
    private _win;
    constructor(configuration: IJackpotDetails);
    /**
     * Get name.
     */
    get name(): string;
    /**
     * Get configuration.
     */
    getConfiguration(): IJackpotDetails;
    /**
     * Get balance.
     */
    getBalance(): IJackpotBalance;
    setMock(mock: IJackpotMock): void;
    static setStatus(status?: EJackpotResultStatus): void;
    /**
     * Proceed a jackpot bet
     * @returns a IJackpotResults
     */
    static bet(betAmount: IAmount): IJackpotResults;
    /**
     * Get result.
     */
    getResult(): IJackpotWinAmountDetails;
    private log;
}
