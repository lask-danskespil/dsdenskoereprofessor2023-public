export interface IGameError {
    code: string;
    itg: {
        errorCode: string;
        errorMessage: string;
    };
    itf?: {
        httpCode: number;
        payload: {
            code: string;
            message: string;
        };
    };
    motors: {
        id: string;
        message: string[];
    };
}
export declare const UNEXPECTED_ERROR: IGameError;
export declare const GAME_NOT_FOUND: IGameError;
export declare const PLAYER_NOT_FOUND: IGameError;
export declare const BET_NOT_FOUND: IGameError;
export declare const NOT_ENOUGH_MONEY: IGameError;
export declare const THRESHOLD_EXCEEDED: IGameError;
export declare const LOCKED_ACCOUNT: IGameError;
export declare const STATE_NOT_FOUND: IGameError;
export declare const TRANSITION_NOT_FOUND: IGameError;
export declare const SESSION_NOT_FOUND: IGameError;
export declare const GAME_EXECUTION: IGameError;
export declare const MODEL_NOT_FOUND: IGameError;
export declare const SUPERJACKPOT_NOT_FOUND: IGameError;
export declare class DataException extends Error {
    private error;
    constructor(message: string, error?: IGameError);
    /**
     * Get itg error.
     */
    getItgError(): IGameError["itg"];
    /**
     * Get motors error.
     */
    getMotorsError(): any;
    /**
     * Get itf error.
     */
    getItfError(): IGameError["itf"];
}
export declare class ErrorHelper {
    private errors;
    private currentError;
    constructor(errors: IGameError[]);
    /**
     * Possible error for a game type
     */
    getAvaiblable(gameType?: string): IGameError[];
    /**
     * Get current error.
     */
    get error(): IGameError;
    /**
     * Set current error.
     */
    set error(newError: IGameError);
    /**
     * Get error by code.
     * @param code
     */
    getByCode(code: string): IGameError;
    /**
     * Assert if error is setted.
     */
    assert(): void;
}
