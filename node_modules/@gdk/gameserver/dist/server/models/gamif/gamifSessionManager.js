"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GamifSessionManager = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
class GamifSessionManager {
    constructor() {
        this._gamifSessionFiles = [];
    }
    /**
     * Add gamif session file.
     * @param serviceName
     * @param dataFilePath
     */
    add(serviceName, dataFilePath) {
        this._gamifSessionFiles.push({
            serviceName,
            dataFilePath,
        });
    }
    /**
     * Method to get a IGamifSession.
     * @param serviceName of the requested IGamifSession.
     * @returns the IGamifSession requested, {} if not found.
     * @todo should we store the session once loaded ?
     */
    get(serviceName) {
        const gamifSessionFile = this._gamifSessionFiles.find((each) => each.serviceName === serviceName);
        if (!gamifSessionFile) {
            return {};
        }
        try {
            const session = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(process.cwd(), gamifSessionFile.dataFilePath)).toString());
            session.filePath = (0, path_1.join)(process.cwd(), gamifSessionFile.dataFilePath);
            return session;
        }
        catch (_a) {
            return {};
        }
    }
}
exports.GamifSessionManager = GamifSessionManager;
//# sourceMappingURL=gamifSessionManager.js.map