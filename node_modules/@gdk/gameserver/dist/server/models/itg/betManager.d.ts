import type { ICroupier } from "@gdk/backutils";
import Croupier from "./croupier/croupier";
import type { Player } from "../player";
import type { IMockObject } from "./mocksStore";
import type { BetReturnType, IBetRequest, IBetTicket, IBetValidResponse } from "./types";
export declare class BetManager {
    private _croupiers;
    private _receiptId;
    private _tickets;
    private _mocks;
    constructor();
    /**
     * Add croupier.
     */
    addCroupier(croupier: Croupier, serviceName: string): void;
    /**
     * Process bet requests.
     * @param betRequests
     */
    handleBetRequests(betRequests: IBetRequest[], player: Player): Promise<BetReturnType[]>;
    /**
     * Process bet request.
     * @param betRequest
     */
    handleBetRequest(betRequest: IBetRequest, player: Player): Promise<BetReturnType>;
    /**
     * Retrieve croupier model for a service
     */
    getModel(serviceName: string): ICroupier;
    /**
     * Returns all the tickets filtered by the given status and game name.
     * @param filters
     * @param player
     */
    getTickets(filters: {
        ticketStatus?: string;
        gameCode?: string;
        ticketId?: number;
        demoMode?: boolean;
    }, player?: Player): IBetTicket[];
    /**
     * Returns the first ticket identified by the given id.
     * @param id the id of the ticket to find.
     */
    getTicketById(id: number, player?: Player): IBetTicket;
    /**
     * Remove ticket by id
     * @param id the id of the ticket to find.
     */
    removeTicketById(id: number): void;
    /**
     * Updates the given ticket's data identified by the given id.
     * @param id the id of the ticket to find and modify its revelation datas.
     * @param data the new revelation datas of the ticket to assign.
     * @param player the player requesting to update the ticket.
     */
    updateTicket(id: number, data: any, player: Player): IBetValidResponse;
    /**
     * Get registered mocks values for a given service and a given player
     */
    getMocks(serviceName: string, player: Player): IMockObject[];
    /**
     * Add mocks values for future bets for a given service and a given player
     */
    addMocks(serviceName: string, player: Player, mocks: IMockObject[]): void;
    /**
     * Remove all mocks values for a given service and a given player
     */
    removeMocks(serviceName: string, player: Player): void;
    private _croupierBet;
    private _nextReceiptId;
}
