import type { ICroupier, IRank, ITicket, IRankWinFactor, IAmount } from "@gdk/backutils";
import type { IMockObject } from "../mocksStore";
/**
 * A Javascrpipt localCompare on service name
 */
export declare const localCompare: (a: ICroupier, b: ICroupier) => number;
/**
 * part of the croupier exported through webSocket server
 */
export interface IExportedCroupier {
    ranks: IRank[];
}
export interface IItgDraw {
    ticket: ITicket;
    factor: IRankWinFactor;
    prize: {
        rank: number;
        type: string;
        description: string;
    };
}
/**
 * Croupier currently used by the game
 */
export default class Croupier {
    /**
     * Current ticket id incremented when drawing.
     */
    static ticketId: number;
    /**
     * Load the croupier from file.
     * @param croupierPath path to the croupier file, .json or .sql.
     * @param code expected serviceName.
     * @returns a promise resolving with the Croupier when loaded.
     */
    static get(croupierPath: string, code: string): Promise<Croupier>;
    private raw;
    private flat;
    /**
     * Loads a coupier for the given serviceName.
     * @returns false if found no croupier for the service name
     */
    private _load;
    /**
     * Returns service name.
     * @returns the servicename of the croupier
     */
    getCroupierCode(): string;
    /**
     * Gets the current schema version of the croupier.
     */
    get schemaVersion(): number;
    /**
     * Gets the current master game code of the croupier.
     */
    get masterGameCode(): string;
    /**
     * Returns croupier model.
     */
    get model(): ICroupier;
    /**
     * Returns the croupier ranks or an empty array
     */
    get ranks(): IRank[];
    /**
     * Returns the stakes or an empty array
     */
    get stakes(): IAmount[];
    /**
     * Returns the base stake or an empty array
     */
    get baseStake(): number;
    /**
     * Gets exported croupier.
     */
    getExportedCroupier(): IExportedCroupier;
    /**
     * Draw a ticket, randomely or mock driven
     */
    draw(stakeValue: number, mock?: IMockObject): IItgDraw;
}
