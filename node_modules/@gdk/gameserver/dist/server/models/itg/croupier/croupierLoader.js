"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CroupierLoader = void 0;
const fs = __importStar(require("fs-extra"));
const path_1 = require("path");
const backutils_1 = require("@gdk/backutils");
class CroupierLoader {
    /**
     * Loads a croupier.
     * @param filepath
     * @param serviceName
     */
    static async load(filepath, serviceName) {
        const ext = (0, path_1.extname)(filepath);
        switch (ext) {
            case ".json": {
                return await CroupierLoader._importJson(filepath, serviceName);
            }
            default: {
                const errMessage = ext
                    ? `Extension '${ext}" is not supported`
                    : `File "${filepath}" has no extension`;
                throw new Error(`${errMessage}. Only json and SQL files are accepted.`);
            }
        }
    }
    /**
     * Loads a croupier from a json file.
     * @param filepath of the croupier.
     * @returns a promise resolving with a ICroupierJSON when loaded.
     */
    static async _importJson(filepath, serviceName) {
        backutils_1.logger.info(`Importing croupier '${serviceName}' at ${filepath}...`);
        const raw = await fs.readFile(filepath);
        const croupier = JSON.parse(raw.toString());
        if (!croupier.schemaVersion) {
            throw new Error(`${filepath} is missing schemaVersion field.`);
        }
        return croupier;
    }
}
exports.CroupierLoader = CroupierLoader;
//# sourceMappingURL=croupierLoader.js.map