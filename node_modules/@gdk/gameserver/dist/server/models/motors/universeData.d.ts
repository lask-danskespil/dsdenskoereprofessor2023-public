export interface IUniversElement {
    value: number;
    weight: number;
    originalWeight: number;
}
export interface IUniverInstance {
    id: string;
    name: string;
    type: string;
    data: UniversData;
}
export declare class UniversData {
    private _totalWeight;
    private elements;
    constructor(data?: UniversData);
    /**
     * pick a random index between 0 and totalWeight-1
     * If a mock value is given it will return that value
     */
    private _randIndex;
    /**
     * Transform an index into a position in the universe array
     */
    private _indexToElementPosition;
    /**
     * Get total weight.
     */
    totalWeight(): number;
    /**
     * Return the weight of an element given his value, 0 if element is not is the univers
     */
    elementWeight(value: number): number;
    /**
     * Get element at.
     * @param index
     */
    getElementAt(index: number): number;
    /**
     * Add.
     * @param element
     */
    add(element: IUniversElement): void;
    /**
     * Reset.
     */
    reset(): void;
    /**
     * Get.
     * @param mockValue
     */
    get(mockValue?: number): number;
    /**
     * Pull.
     * @param mockValue
     */
    pull(mockValue?: number): number;
}
