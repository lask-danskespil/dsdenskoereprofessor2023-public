import type { IAmount, IMtrSessionStep } from "@falcon/bridge";
import type { IUniverInstance } from "./universeData";
/**
 * Used for historic, this will be provide as parameter of HistoRenderFunction
 */
export interface IGameEvent {
    dateOfEvent: number;
    eventName: string;
    eventParams: any;
    eventResponse: any;
}
export interface IGameSession {
    _id: string;
    /**
     * model file full path
     */
    gameId: string;
    amountCurrency: string;
    bet: number;
    state: string;
    data: object;
    manifestFilePath: string;
    univerInstances: IUniverInstance[];
    messages: string[];
    events: IGameEvent[];
    steps: Array<IMtrSessionStep<any, any>>;
    wonAmount?: IAmount;
    demoMode: boolean;
}
export interface IGameSessionDBRequest {
    _id?: string;
    gameId?: string;
}
export declare class GameSessionDB {
    private _sessions;
    /**
     * Add session.
     * @param session
     */
    add(session: IGameSession): IGameSession;
    /**
     * Get a previously registered game session.
     * @param matchFct cmp function to find the session you want.
     * @returns the matching IGameSession.
     */
    get(matchFct: (session: IGameSession) => boolean): IGameSession;
    /**
     * Update session.
     * @param id
     * @param partialSession
     */
    update(id: string, partialSession: any): IGameSession;
    /**
     * Remove session.
     * @param id
     */
    remove(id?: string): void;
    /**
     * List sessions.
     */
    list(): IGameSession[];
}
