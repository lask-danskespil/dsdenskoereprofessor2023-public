export declare class Converter {
    private buf;
    private static augmentations;
    constructor(groovyCode: string);
    private convertClosure;
    private convertDef;
    private convertMultiLine;
    private addPrimitives;
    private augmentations;
    private replaceStarShip;
    private replaceMethods;
    private addCall;
    /**
     * Convert the current groovy script to javascript script.
     */
    convert(): string;
}
export declare class GroovyToJS {
    private vm;
    private constructor();
    /**
     * Returns a Node"VM that abble to run the given groovy script.
     * @param groovyCode the groovy code that will be executed
     * @param groovyCodeName Used as fileName in the stack trace case of execution error
     */
    private getVM;
    /** Execute a given Node VM and returns
     * By default, uses the primitve method defined in src/primitives. To overdide a primitive
     * set the overdide in the context:
     * ```
     * executeVM(script, {payAmount: () => { return 1; }}); // Use this payAmount instead of primitives" payAmount()
     * ```
     * @returns the groovy return code
     */
    execute(context: any, timeout?: number): any;
    /** Parse the groovy code to generate a javascript code */
    private groovyToJs;
    /**
     * Create.
     * @param groovyCode
     * @param groovyCodeName
     */
    static create(groovyCode: string, groovyCodeName: string): GroovyToJS;
}
