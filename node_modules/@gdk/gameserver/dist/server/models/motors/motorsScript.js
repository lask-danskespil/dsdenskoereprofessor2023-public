"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MotorsScriptsManager = void 0;
const errors = __importStar(require("../errors"));
class MotorsScriptsManager {
    constructor() {
        this._motorsScripts = [];
    }
    /**
     * Add motors script.
     * @param serviceName
     * @param manifestFilePath
     */
    add(serviceName, manifestFilePath) {
        this._motorsScripts.push({
            _id: this._motorsScripts.length.toString(),
            serviceName,
            manifestFilePath,
        });
    }
    /**
     * Get motors script.
     * @param serviceName
     */
    get(serviceName) {
        const script = this._motorsScripts.find((motorsScript) => serviceName === motorsScript.serviceName);
        if (!script) {
            throw new errors.DataException(`Unable to find game ${serviceName}`, errors.GAME_NOT_FOUND);
        }
        return script;
    }
    /**
     * List motors script.
     * @param options
     */
    list(options) {
        return this._motorsScripts.slice(options.skip, options.skip + options.limit);
    }
}
exports.MotorsScriptsManager = MotorsScriptsManager;
//# sourceMappingURL=motorsScript.js.map