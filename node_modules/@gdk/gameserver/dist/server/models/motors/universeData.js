"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniversData = void 0;
class UniversData {
    constructor(data) {
        this._totalWeight = 0;
        this.elements = [];
        if (data) {
            data.elements.forEach((element) => {
                this.add(element);
            });
        }
    }
    /**
     * pick a random index between 0 and totalWeight-1
     * If a mock value is given it will return that value
     */
    _randIndex(mockValue) {
        if (mockValue !== undefined) {
            return mockValue;
        }
        return Math.floor(this._totalWeight * Math.random());
    }
    /**
     * Transform an index into a position in the universe array
     */
    _indexToElementPosition(index) {
        if (index < 0 || index > this._totalWeight - 1) {
            throw new Error(`wrong index when getting an element from an universe`);
        }
        for (let i = 0; i < this.elements.length; i++) {
            index -= this.elements[i].weight;
            if (index < 0) {
                return i;
            }
        }
    }
    /**
     * Get total weight.
     */
    totalWeight() {
        return this._totalWeight;
    }
    /**
     * Return the weight of an element given his value, 0 if element is not is the univers
     */
    elementWeight(value) {
        return this.elements
            .filter((e) => e.value === value)
            .reduce((total, a) => {
            return total + a.weight;
        }, 0);
    }
    /**
     * Get element at.
     * @param index
     */
    getElementAt(index) {
        return this.elements[this._indexToElementPosition(index)].value;
    }
    /**
     * Add.
     * @param element
     */
    add(element) {
        this.elements.push(element);
        this._totalWeight += element.weight;
    }
    /**
     * Reset.
     */
    reset() {
        this._totalWeight = 0;
        this.elements.forEach((e) => {
            e.weight = e.originalWeight;
            this._totalWeight += e.originalWeight;
        });
    }
    /**
     * Get.
     * @param mockValue
     */
    get(mockValue) {
        const index = this._randIndex(mockValue);
        return this.elements[this._indexToElementPosition(index)].value;
    }
    /**
     * Pull.
     * @param mockValue
     */
    pull(mockValue) {
        const index = this._randIndex(mockValue);
        const position = this._indexToElementPosition(index);
        this.elements[position].weight--;
        this._totalWeight--;
        return this.elements[position].value;
    }
}
exports.UniversData = UniversData;
//# sourceMappingURL=universeData.js.map