"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mocks_1 = __importDefault(require("./mocks"));
const errors = __importStar(require("../../errors"));
const transition_1 = __importDefault(require("./transition"));
class State {
    constructor(xmlSnippet, gameModel) {
        this.xmlSnippet = xmlSnippet;
        this.gameModel = gameModel;
    }
    get name() {
        return this.xmlSnippet.$.name;
    }
    /** Process an event and returns the new state */
    async on(event, session, gamifSession, params) {
        const actualParams = this.getParams(session, gamifSession, params);
        const transition = await transition_1.default.getEventTransition(this.gameModel, this.xmlSnippet, event, actualParams);
        if (!transition) {
            throw new errors.DataException(`Found no transition named ${event} in state ${this.name}`, errors.TRANSITION_NOT_FOUND);
        }
        session.messages = []; // We get messages of last transition only;
        let to = await transition.action(actualParams);
        while (true) {
            const decision = this.gameModel.getDecision(to);
            if (!decision) {
                break;
            }
            // Compute decision
            const decisionTransition = await transition_1.default.getDecisionTransition(this.gameModel, decision, actualParams);
            if (!decisionTransition) {
                throw new errors.DataException(`Found no transition named ${decision.$.name} in state ${this.name}`, errors.TRANSITION_NOT_FOUND);
            }
            to = await decisionTransition.action(actualParams);
        }
        return to;
    }
    getParams(session, gamifSession, params) {
        return {
            param: params.prm,
            constants: this.gameModel.constants,
            session: {
                gameData: session.data,
                gamificationContextMap: gamifSession,
                bet: session.bet,
                amountCurrency: session.amountCurrency,
            },
            bet: {
                list: this.gameModel.bets,
            },
            gameModel: this.gameModel,
            gameSession: session,
            sessionResults: params.results,
            mocks: mocks_1.default.get(),
            betCurrency: session.amountCurrency,
        };
    }
}
exports.default = State;
//# sourceMappingURL=state.js.map