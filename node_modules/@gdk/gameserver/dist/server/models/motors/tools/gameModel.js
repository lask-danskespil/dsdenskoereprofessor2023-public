"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path_1 = require("path");
const util_1 = require("util");
const xml2js = __importStar(require("xml2js"));
const errors = __importStar(require("../../errors"));
const readFile = (0, util_1.promisify)(fs.readFile);
class GameModel {
    /**
     * Get game model.
     * @param manifestFilePath
     */
    static async get(manifestFilePath) {
        try {
            const motorsModel = new GameModel(manifestFilePath);
            await motorsModel.load();
            return motorsModel;
        }
        catch (err) {
            if (err.toString().indexOf("ENOENT") !== -1) {
                throw new errors.DataException(`Unable to find game model file ${manifestFilePath}`, errors.MODEL_NOT_FOUND);
            }
            throw err;
        }
    }
    constructor(manifestFilePath) {
        this.manifestFilePath = manifestFilePath;
    }
    async load() {
        const manifest = JSON.parse(await readFile(this.manifestFilePath, "utf-8"));
        const manifestDirectory = (0, path_1.dirname)(this.manifestFilePath);
        this.betList = JSON.parse(await readFile((0, path_1.join)(manifestDirectory, manifest.betList), "utf-8")).stakes;
        const rawContent = await readFile((0, path_1.join)(manifestDirectory, manifest.model));
        return new Promise((resolve, reject) => {
            xml2js.parseString(rawContent, (err, result) => {
                if (err) {
                    return reject(err);
                }
                this.model = result;
                resolve();
            });
        });
    }
    /**
     * Get name.
     */
    get name() {
        return this.model.MotorsGame.$.name;
    }
    /**
     * Get constants.
     */
    get constants() {
        return JSON.parse(this.model.MotorsGame.Data[0].Model[0].Constants[0]);
    }
    /**
     * get Bets.
     */
    get bets() {
        return this.betList;
    }
    /**
     * Get session.
     */
    get session() {
        const session = JSON.parse(this.model.MotorsGame.Data[0].Session[0]);
        return session;
    }
    /**
     * Get universe.
     */
    get universe() {
        return this.model.MotorsGame.Data[0].Model[0].UniverseList[0].Universe;
    }
    /**
     * Get universe instance.
     */
    get univerInstances() {
        return this.model.MotorsGame.Data[0].Model[0].UniverInstances[0].UniverInstance;
    }
    /**
     * Get bet amount.
     * @param bet
     * @param currency
     */
    getBetAmount(bet, currency) {
        return this.bets.filter((value) => {
            return bet === value.amount && currency === value.currency;
        })[0];
    }
    /**
     * Set state.
     * @param name
     */
    getState(name) {
        const stateList = this.model.MotorsGame.StateMachine[0].StateList[0].State;
        const state = stateList.find((each) => each.$.name === name);
        if (!state) {
            throw new errors.DataException(`Found no state named ${name}`, errors.STATE_NOT_FOUND);
        }
        return state;
    }
    /**
     * Get decision.
     * @param name
     */
    getDecision(name) {
        const decisionList = this.model.MotorsGame.StateMachine[0].DecisionList[0].Decision;
        if (!decisionList) {
            return null;
        }
        return decisionList.find((decision) => decision.$.name === name);
    }
    /**
     * Get action.
     * @param name
     */
    getAction(name) {
        const actionList = this.model.MotorsGame.StateMachine[0].ActionList[0].Action;
        return actionList.find((action) => action.$.name === name);
    }
    /**
     * Get trigger.
     * @param name
     */
    getTrigger(name) {
        const triggerList = this.model.MotorsGame.StateMachine[0].TriggerList[0].Trigger;
        return triggerList.find((trigger) => trigger.$.name === name);
    }
    /**
     * Get histo render function.
     */
    get histoRenderFunction() {
        return this.model.MotorsGame.HistoRenderFunction[0];
    }
    /**
     * Convert bet to JSON.
     */
    betToJSON() {
        const json = {};
        this.bets.forEach((bet, index) => {
            json[index] = bet;
        });
        return json;
    }
}
exports.default = GameModel;
//# sourceMappingURL=gameModel.js.map