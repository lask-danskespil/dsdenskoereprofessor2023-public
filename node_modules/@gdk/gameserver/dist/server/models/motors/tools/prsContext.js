"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = require("path");
const util_1 = require("util");
const readFile = (0, util_1.promisify)(fs.readFile);
const exists = (0, util_1.promisify)(fs.exists);
class PrsContext {
    static async create(manifestFilePath, token) {
        const manifestDirectory = (0, path_1.dirname)(manifestFilePath);
        const prsMockFile = (0, path_1.join)(manifestDirectory, "prsMock.json");
        if (await exists(prsMockFile)) {
            const prsMockContent = JSON.parse((await readFile(prsMockFile)).toString());
            this.contexts[token] = {
                token,
                status: "UNPLAYED",
                info: null,
            };
            if (Array.isArray(prsMockContent)) {
                this.contexts[token].info = lodash_1.default.sample(prsMockContent);
            }
            else {
                this.contexts[token].info = prsMockContent;
            }
        }
    }
    /**
     * Get game prsContext.
     * @param manifestFilePath
     * @param token
     */
    static async get(manifestFilePath, token) {
        if (!this.contexts[token]) {
            await this.create(manifestFilePath, token);
        }
        return this.contexts[token] || null;
    }
}
exports.default = PrsContext;
PrsContext.contexts = {};
//# sourceMappingURL=prsContext.js.map