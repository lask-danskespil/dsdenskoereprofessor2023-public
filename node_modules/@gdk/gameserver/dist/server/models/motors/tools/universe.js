"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const universeData_1 = require("../universeData");
class Universe {
    constructor(gameModel) {
        this.gameModel = gameModel;
    }
    /**
     * Create univer instances
     */
    createInstances() {
        const xmlUniverse = this.gameModel.universe;
        const xmlUniverInstances = this.gameModel.univerInstances;
        const instances = [];
        xmlUniverInstances.forEach((ui) => {
            const effectiveUniver = xmlUniverse.find((u) => u.$.name === ui.$.name);
            if (!effectiveUniver) {
                throw new Error(`Univer named "${ui.$.name}" not found`);
            }
            const univerInstance = {
                id: ui.$.id,
                type: effectiveUniver.$.type,
                name: ui.$.name,
                data: new universeData_1.UniversData(),
            };
            switch (univerInstance.type) {
                case "range":
                    this.fillRange(parseInt(effectiveUniver.$.from, 10), parseInt(effectiveUniver.$.to, 10), univerInstance.data);
                    break;
                case "weight":
                    const symbols = effectiveUniver.Symbol;
                    symbols.forEach((s) => {
                        const weight = parseInt(s.$.weight, 10);
                        const value = parseInt(s.$.value, 10);
                        this.fillWeighted(weight, value, univerInstance.data);
                    });
                    break;
                default:
                    throw new Error(`The given universe type is unknown: "${univerInstance.type}"`);
            }
            instances.push(univerInstance);
        });
        return instances;
    }
    fillRange(from, to, destination) {
        for (let i = from; i <= to; i++) {
            destination.add({
                value: i,
                weight: 1,
                originalWeight: 1,
            });
        }
    }
    fillWeighted(weight, value, destination) {
        destination.add({
            value,
            weight,
            originalWeight: weight,
        });
    }
}
exports.default = Universe;
//# sourceMappingURL=universe.js.map