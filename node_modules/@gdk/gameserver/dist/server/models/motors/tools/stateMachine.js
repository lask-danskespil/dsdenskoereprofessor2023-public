"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const state_1 = __importDefault(require("./state"));
const helpers_1 = require("../../../helpers");
const INIT_STATE = "init";
const INIT_TRANSITION = "trInit";
class StateMachine {
    constructor(gameModel) {
        this.gameModel = gameModel;
        (0, helpers_1.stdout)(chalk_1.default.yellow(`New state machin for ${gameModel.name}`));
    }
    /**
     * Init;
     * @param session
     * @param gamifSession
     * @param params
     */
    async doInit(session, gamifSession, params) {
        this.setState(INIT_STATE);
        await this.on(INIT_TRANSITION, session, gamifSession, params);
    }
    /**
     * Get state.
     */
    get state() {
        return this.currentState.name;
    }
    /**
     * Reset.
     */
    reset() {
        this.currentState = undefined;
    }
    /**
     * Set state.
     * @param stateName
     */
    setState(stateName) {
        this.currentState = new state_1.default(this.gameModel.getState(stateName), this.gameModel);
        (0, helpers_1.stdout)(chalk_1.default.yellow(`  Current state: ${this.currentState.name}`));
    }
    /**
     * Listen event.
     * @param event
     * @param session
     * @param gamifSession
     * @param params
     */
    async on(event, session, gamifSession, params) {
        (0, helpers_1.stdout)(chalk_1.default.green(`    --> Event ${event} with ${JSON.stringify(params.prm)}`));
        try {
            const newState = await this.currentState.on(event, session, gamifSession, params);
            (0, helpers_1.stdout)(chalk_1.default.green(`    <-- Event ${event} results ${JSON.stringify(params.results)}`));
            this.setState(newState);
        }
        catch (err) {
            (0, helpers_1.stdout)(chalk_1.default.red(`    <-- Event ${event} error: ${err.message}`));
            this.setState("final");
            throw err;
        }
    }
    /**
     * Get instance.
     * @param sessionId
     */
    static get(sessionId) {
        return StateMachine.instances[sessionId];
    }
    /**
     * Set instance.
     * @param stateMachine
     * @param sessionId
     */
    static set(stateMachine, sessionId) {
        StateMachine.instances[sessionId] = stateMachine;
    }
    /**
     * Remove instance.
     * @param sessionId
     */
    static remove(sessionId) {
        delete StateMachine.instances[sessionId];
    }
}
exports.default = StateMachine;
/**
 * Statics
 */
StateMachine.instances = {};
//# sourceMappingURL=stateMachine.js.map