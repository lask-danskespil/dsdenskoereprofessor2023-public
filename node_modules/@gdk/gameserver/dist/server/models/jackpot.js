"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jackpot = exports.EJackpotWinState = exports.EJackpotResultStatus = void 0;
const backutils_1 = require("@gdk/backutils");
const lodash_1 = __importDefault(require("lodash"));
var EJackpotResultStatus;
(function (EJackpotResultStatus) {
    EJackpotResultStatus["InProgress"] = "IN_PROGRESS";
    EJackpotResultStatus["Failure"] = "FAILURE";
    EJackpotResultStatus["Unauvailable"] = "UNAVAILABLE";
    EJackpotResultStatus["Done"] = "DONE";
})(EJackpotResultStatus = exports.EJackpotResultStatus || (exports.EJackpotResultStatus = {}));
var EJackpotWinState;
(function (EJackpotWinState) {
    EJackpotWinState[EJackpotWinState["Win"] = 0] = "Win";
    EJackpotWinState[EJackpotWinState["Loose"] = 1] = "Loose";
    EJackpotWinState[EJackpotWinState["Random"] = 2] = "Random";
})(EJackpotWinState = exports.EJackpotWinState || (exports.EJackpotWinState = {}));
class Jackpot {
    /**
     * Get instance.
     */
    static getInstances() {
        return Jackpot.instances;
    }
    constructor(configuration) {
        this._configuration = configuration;
        this._value = configuration.initialAmount.value;
        if (configuration.progressionType === backutils_1.EJackpotProgressionType.Progressive) {
            setInterval(() => {
                this._value += Math.floor(Math.random() * 1000);
            }, Jackpot.intervalDuration);
        }
        Jackpot.instances.push(this);
        this.log("init");
    }
    /**
     * Get name.
     */
    get name() {
        return this._configuration.jackpotExternalId;
    }
    /**
     * Get configuration.
     */
    getConfiguration() {
        return this._configuration;
    }
    /**
     * Get balance.
     */
    getBalance() {
        return {
            jackpotExternalId: this.name,
            progressionType: this._configuration.progressionType,
            balance: { value: this._value, currency: this._configuration.initialAmount.currency },
        };
    }
    setMock(mock) {
        if (mock.amount) {
            this._value = mock.amount.value;
        }
        else {
            this._value = this._configuration.initialAmount.value;
        }
        if (mock.win === undefined) {
            this._win = EJackpotWinState.Random;
            this.log("random mode");
        }
        else {
            this._win = mock.win ? EJackpotWinState.Win : EJackpotWinState.Loose;
            this.log(`${mock.win ? "win" : "lose"} mode`);
        }
    }
    static setStatus(status = EJackpotResultStatus.Done) {
        Jackpot.status = status;
    }
    /**
     * Proceed a jackpot bet
     * @returns a IJackpotResults
     */
    static bet(betAmount) {
        const participation = Jackpot.participations.find((participation) => {
            return (participation.gameBetAmount.value === betAmount.value &&
                participation.gameBetAmount.currency.toUpperCase() === betAmount.currency.toUpperCase());
        });
        if (!participation) {
            throw new Error(`Game bet amount (${betAmount.value} ${betAmount.currency}) not compatible with jackpot configuration`);
        }
        // construct result
        const result = {
            status: Jackpot.status,
            participationCount: participation.participationCount,
            configurationName: Jackpot.configurationName,
            result: {
                jackpotWon: false,
                totalWinAmount: { value: 0, currency: "EUR" },
                jackpotsWinDetails: [],
            },
        };
        // bet on individual jackpots
        for (const jackpot of Object.values(Jackpot.instances)) {
            const jackpotResult = jackpot.getResult();
            result.result.totalWinAmount.value += jackpotResult.winAmount.value;
            result.result.jackpotsWinDetails.push(jackpotResult);
            result.result.jackpotWon =
                result.result.jackpotWon || Boolean(result.result.totalWinAmount.value);
        }
        return result;
    }
    /**
     * Get result.
     */
    getResult() {
        /* by default :
        fixed jackpot wins 1 time out of 5
        progressive jackpot wins 1 time out of 10
      use mocks for other results
        */
        const winJackpot = () => {
            value = this._value;
            this._value = this._configuration.initialAmount.value;
        };
        let value = 0;
        switch (this._win) {
            case EJackpotWinState.Win:
                winJackpot();
                break;
            case EJackpotWinState.Random:
                if ((this._configuration.progressionType == backutils_1.EJackpotProgressionType.Fixed &&
                    lodash_1.default.random(0, 5) === 0) ||
                    (this._configuration.progressionType == backutils_1.EJackpotProgressionType.Progressive &&
                        lodash_1.default.random(0, 10) === 0)) {
                    winJackpot();
                }
        }
        return {
            jackpotExternalId: this.name,
            winAmount: { value, currency: this._configuration.initialAmount.currency },
        };
    }
    log(message) {
        backutils_1.logger.info(`jackpot "${this._configuration.jackpotExternalId}": ${message}`);
    }
}
exports.Jackpot = Jackpot;
Jackpot.instances = [];
Jackpot.intervalDuration = 2000; // in ms
Jackpot.status = EJackpotResultStatus.Done;
Jackpot.configurationName = "";
Jackpot.participations = [];
//# sourceMappingURL=jackpot.js.map