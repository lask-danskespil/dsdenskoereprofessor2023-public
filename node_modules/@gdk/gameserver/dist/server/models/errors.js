"use strict";
// cf https://mercure.lotsys.com/stash/projects/FALCON/repos/rest-documentation/browse/app/description/RTG.js#3690,3732
// cf https://support.lotsys.com/confluence/display/MOT/REST+API+documentation
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorHelper = exports.DataException = exports.SUPERJACKPOT_NOT_FOUND = exports.MODEL_NOT_FOUND = exports.GAME_EXECUTION = exports.SESSION_NOT_FOUND = exports.TRANSITION_NOT_FOUND = exports.STATE_NOT_FOUND = exports.LOCKED_ACCOUNT = exports.THRESHOLD_EXCEEDED = exports.NOT_ENOUGH_MONEY = exports.BET_NOT_FOUND = exports.PLAYER_NOT_FOUND = exports.GAME_NOT_FOUND = exports.UNEXPECTED_ERROR = void 0;
const genericItgErrorCode = "RESTException.999";
exports.UNEXPECTED_ERROR = {
    code: "UNEXPECTED_ERROR",
    itg: { errorCode: genericItgErrorCode, errorMessage: "Unexpected exception" },
    motors: { id: "UNEXPECTED_ERROR", message: ["UNEXPECTED_ERROR"] },
};
exports.GAME_NOT_FOUND = {
    code: "GAME_NOT_FOUND",
    itg: { errorCode: "ITGGamesException.2", errorMessage: "Game not found" },
    motors: { id: "UNKNOWN_GAME", message: ["Unknown game"] },
};
exports.PLAYER_NOT_FOUND = {
    code: "PLAYER_NOT_FOUND",
    itg: { errorCode: genericItgErrorCode, errorMessage: "Player not found" },
    motors: { id: "PLAYER_ID_NOT_MATCHING", message: ["player id does not match"] },
};
exports.BET_NOT_FOUND = {
    code: "BET_NOT_FOUND",
    itg: { errorCode: genericItgErrorCode, errorMessage: `Bet amount not found` },
    motors: {
        id: "INVALID_BET_ID",
        message: ["Bet id does not match an index of the list of bet amounts"],
    },
};
exports.NOT_ENOUGH_MONEY = {
    code: "NOT_ENOUGH_MONEY",
    itg: { errorCode: "ITGGamesException.1", errorMessage: "Insufficient purse" },
    motors: { id: "NOT_ENOUGH_MONEY", message: ["There is not enough money on the purse"] },
};
exports.THRESHOLD_EXCEEDED = {
    code: "THRESHOLD_EXCEEDED",
    itg: { errorCode: "ITGGamesException.6", errorMessage: "a limit has been reached" },
    motors: undefined, // In this case Motors generates a cashier action SUSPENSION_TRIGGERED, not an error
};
exports.LOCKED_ACCOUNT = {
    code: "LOCKED_ACCOUNT",
    itg: { errorCode: "ITGGamesException.7", errorMessage: "This account is locked" },
    motors: undefined,
};
exports.STATE_NOT_FOUND = {
    code: "STATE_NOT_FOUND",
    itg: undefined,
    motors: { id: "STATE_NOT_FOUND", message: ['The game engine didn"t find the new state'] },
};
exports.TRANSITION_NOT_FOUND = {
    code: "TRANSITION_NOT_FOUND",
    itg: undefined,
    motors: {
        id: "NO_TRANSITION_FOUND",
        message: ["The game engine did not find the new transition"],
    },
};
exports.SESSION_NOT_FOUND = {
    code: "SESSION_NOT_FOUND",
    itg: undefined,
    motors: { id: "GAME_SESSION_NOT_FOUND", message: ["Unknown game session"] },
};
exports.GAME_EXECUTION = {
    code: "GAME_EXECUTION",
    itg: undefined,
    motors: { id: "GAME_EXECUTION", message: ["Error while executing the game script"] },
};
exports.MODEL_NOT_FOUND = {
    code: "MODEL_NOT_FOUND",
    itg: undefined,
    motors: { id: "UNKNOWN_GAME_MODEL", message: ["Unknown game model"] },
};
exports.SUPERJACKPOT_NOT_FOUND = {
    code: "MODEL_NOT_FOUND",
    itg: undefined,
    itf: {
        httpCode: 500,
        payload: { code: "BetError.34", message: "Purse debit failed : DEBIT_FAILED" },
    },
    motors: undefined,
};
class DataException extends Error {
    constructor(message, error = exports.UNEXPECTED_ERROR) {
        super(message);
        this.error = error;
    }
    /**
     * Get itg error.
     */
    getItgError() {
        return this.error.itg;
    }
    /**
     * Get motors error.
     */
    getMotorsError() {
        return Object.assign({ res: "error" }, this.error.motors);
    }
    /**
     * Get itf error.
     */
    getItfError() {
        return this.error.itf;
    }
}
exports.DataException = DataException;
class ErrorHelper {
    constructor(errors) {
        this.errors = errors;
        this.currentError = undefined;
    }
    /**
     * Possible error for a game type
     */
    getAvaiblable(gameType) {
        let result;
        switch (gameType) {
            case undefined:
                result = this.errors;
                break;
            case "ITG":
                result = this.errors.filter((error) => error.itg);
                break;
            case "MTR":
                result = this.errors.filter((error) => error.motors);
                break;
            default:
                throw new Error(`Unknown game type ${gameType}`);
        }
        return result;
    }
    /**
     * Get current error.
     */
    get error() {
        return this.currentError;
    }
    /**
     * Set current error.
     */
    set error(newError) {
        this.currentError = newError;
    }
    /**
     * Get error by code.
     * @param code
     */
    getByCode(code) {
        return this.errors.find((error) => error.code === code);
    }
    /**
     * Assert if error is setted.
     */
    assert() {
        if (this.currentError) {
            throw new DataException("Error setted by developer", this.currentError);
        }
    }
}
exports.ErrorHelper = ErrorHelper;
//# sourceMappingURL=errors.js.map