/// <reference types="node" />
import * as vm from "vm";
import { GameEngine } from "./engines/gameEngine";
import { RandomEngine } from "./engines/randomEngine";
import { NotificationEngine } from "./engines/notificationEngine";
import { Person } from "./person";
import { Session } from "./session";
import type { IBet, IBetLevel, ELockPolicy } from "./models";
import type { MtpGame } from "./mtpGame";
export interface IRoomJson {
    roomId: string;
    gameSessionId: string;
    serviceName: string;
    betLevelId: number;
    nbPlayers: number;
}
export declare class Room {
    game: MtpGame;
    id: string;
    betLevelId: string;
    betLevel: IBetLevel;
    people: Person[];
    vm: vm.Script;
    currentSession: Session;
    notificationEngine: NotificationEngine;
    gameEngine: GameEngine;
    randomEngine: RandomEngine;
    private debug;
    /**
     * Constructor
     */
    constructor(game: MtpGame, betLevelId: string, debug?: boolean);
    /**
     * Validates the given bet. If error, then throw a new MTPError
     * @param bet the bet data to validate
     */
    validateBet<T>(bet: IBet<T>, playerId: string): void;
    /**
     * Returns th person which has the given id
     * @param personId the id of the person to get
     */
    getPerson(personId: string): Person;
    /**
     * Add a player to a room (adds it to the current session as well)
     * @param personId the id of the person to add in the room
     */
    addPerson(personId: string): Person;
    /**
     * Remove a player from a room
     * @param personId: the id of the person
     */
    removePerson(personId: string, force?: boolean): void;
    /**
     * Empties a room
     */
    empty(): void;
    /**
     * Restarts the room:
     * - re-get script and variants
     * - restart script
     * - empty session and people
     */
    restart(): void;
    /**
     * Closes the room
     */
    close(): void;
    /**
     * run and retun sessionId
     */
    run(): string;
    /**
     * Returns the JSON data of the room
     */
    toJson(): IRoomJson;
    get lockPolicy(): ELockPolicy;
}
