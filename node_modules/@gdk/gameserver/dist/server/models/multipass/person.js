"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Person = void 0;
const player_1 = require("../player");
const error_1 = require("./error");
const models_1 = require("./models");
class Person {
    /**
     * Constructor
     * @param id the id of the person
     * @param room the room that the person joined
     * @param channel the notification channel
     */
    constructor(id, room, channel) {
        this.id = id;
        this.room = room;
        this.channel = channel;
        this.nbInactiveSession = 0;
    }
    /**
     * Returns the JSON data of the person
     */
    toShortJson() {
        return {
            id: this.id,
        };
    }
    /**
     * The person leaves the room
     */
    leaveRoom() {
        if (this.room.currentSession.players.find((p) => p.id === this.id)) {
            throw new error_1.MTPError("Cannot leave the room while the person is in the session");
        }
        this.room.removePerson(this.id);
    }
    /**
     * The person bets and becomes a new player
     * @param bet the bet amount with data
     */
    bet(bet) {
        // Verify bet
        this.room.validateBet(bet, this.id);
        // Notify the script the the current person is betting
        this.room.gameEngine.isLocked =
            this.room.lockPolicy === models_1.ELockPolicy.BET_ONLY || this.room.lockPolicy === models_1.ELockPolicy.ALL;
        this.room.gameEngine.emit("playerBet", {
            type: "playerBet",
            playerId: this.id,
            stake: bet.amount.value,
            betData: bet.data,
        });
        // Add player to the session
        const player = this.room.currentSession.addPlayer(this);
        // If "playerBet" did not throw anything, notify the script that the player is joining the room
        try {
            this.room.gameEngine.emit("playerJoining", {
                type: "playerJoining",
                playerId: this.id,
                stake: bet.amount.value,
                betData: bet.data,
                session: this.room.currentSession.getSessionForScript(),
            });
        }
        catch (e) {
            this.room.currentSession.removePlayer(player);
            throw e;
        }
        player_1.Player.getInstance(this.id).updatePurseWithBet(bet.amount.value);
        return player;
    }
}
exports.Person = Person;
//# sourceMappingURL=person.js.map