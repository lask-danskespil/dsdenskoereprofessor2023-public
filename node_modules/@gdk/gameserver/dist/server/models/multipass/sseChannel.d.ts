/// <reference types="node" />
import type { PassThrough } from "stream";
import type { Room } from "./room";
import type { EGameState, EPushNotificationType } from "./models";
import type { IBaseNotificationData } from "./engines/notificationEngine";
export interface INotificationData {
    data: {
        broadcast: boolean;
        sequenceNumber: number;
        time: number;
        roomId: string;
        sessionId: string;
        gameState: EGameState;
        type: EPushNotificationType;
        content: IBaseNotificationData;
    };
    type: string;
}
export declare const SSECHANNEL_NOTIFICATION_TYPE = "application/gdk.notification+json";
export declare class SSEChannel {
    stream: PassThrough;
    room: Room;
    privateCount: number;
    broadcastCount: number;
    /**
     * Creates a new SSEChannel attached to the given room
     * @param roomId the room id attached to the notifications
     */
    static create(room: Room): SSEChannel;
    /**
     * Constructor
     * @param room the room reference attached to the notifications
     * @param stream the new channel stream for the person
     */
    constructor(room: Room, stream: PassThrough);
    /**
     * Push notifications to player / person by writing data into
     * @param type the notification type (playerJoinded, etc)
     * @param data the data of the notification (set by the script)
     * @param sessionId the id of the room"s session
     * @param broadcast if the notification is a broadcast
     */
    push<T extends IBaseNotificationData>(type: EPushNotificationType, data: T, sessionId: string, broadcast: boolean): void;
}
