/// <reference types="node" />
import { EGameState } from "../models";
import type { IGameEngineEventMap, IGameEngineParameters, IGameEngineEvent, IPlayerFull, IAction } from "../models";
import type { Room } from "../room";
export declare class GameEngine {
    state: EGameState;
    isLocked: boolean;
    currentPlayerId: string;
    currentAction: IAction;
    private _room;
    /**
     * Constructor
     */
    constructor(room: Room);
    timersMap: {
        [id: string]: NodeJS.Timer;
    };
    listeners: {
        [index: string]: any[];
    };
    /**
     * Emit.
     * @param type
     * @param e
     */
    emit(type: keyof IGameEngineEventMap, e: IGameEngineEvent & {
        session?: any;
    }): void;
    /**
     * Add an event listener
     * @param type     Event type
     * @param listener Listener
     */
    addEventListener<K extends keyof IGameEngineEventMap>(type: K, listener: (ev: IGameEngineEventMap[K]) => void): void;
    /**
     * Start the game, emits a gameStarted event
     */
    startGame(): void;
    /**
     * End the game, emits a gameEnded event
     */
    endGame(winAmounts: {
        [playerId: string]: number;
    }, _theoreticalWinAmount: number): void;
    /**
     * Cancel game session.
     * @param reason
     */
    cancelGameSession(reason?: string): void;
    /**
     * Get the game state
     * @return Game state
     */
    getGameState(): EGameState;
    /**
     * Get server time
     * @return Server time
     */
    getSessionAge(): number;
    /**
     * Set a timeout that will trigger an event after an duration in milliseconds
     * @param eventType Event type
     * @param id Time id (id being unique)
     * @param timeout   Timeout in milliseconds
     * @return Timer id
     */
    setTimeout(eventType: string, id: string, timeout: number): string;
    /**
     * Clear the timeout
     * @param id id of the timer to clear
     */
    clearTimeout(id: string): void;
    /**
     * Get the script and variant parameters of the current game session.
     * @return Parameters
     */
    getParameters(): IGameEngineParameters;
    /**
     * Returns the number of observers in the room
     */
    getObserversCount(): number;
    /**
     * Returns the number of players in the session
     */
    getNumberOfPlayers(): number;
    /**
     * Returns the player identified by the given id
     * @param id the id of the player to get
     */
    getPlayer(id: string): IPlayerFull;
    /**
     * Returns all the players in the game session
     */
    getAllPlayers(): IPlayerFull[];
}
