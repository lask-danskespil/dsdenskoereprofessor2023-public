import type { IWeightedValue } from "../models";
import type { Room } from "../room";
export declare class RandomEngine {
    private _room;
    /**
     * Constructor
     */
    constructor(room: Room);
    /**
     * Get the weight of a weightedValue
     *
     * @param weightedValue
     * @return the weight of the weightedValue
     */
    private weight;
    /**
     * Get the total weight of a weightedValues array
     *
     * @param weightedValues
     * @return the weight of the weightedValue
     */
    /**
     * Get a random number between 0 and exclusive numberOfElements
     * If a mockValue is passed it will return this value
     *
     * @param numberOfElements
     * @param mockValue
     * @return a random integer between 0 and exclusive numberOfElements (overriden by mockValue if given)
     * It will eventually consume existing mocks if no mockValue is given
     */
    private randIndex;
    /**
     * Range sampling from an interval
     *
     * @param from min value
     * @param to max value
     * @param sampledValues values already sampled. If empty, no values were already sampled ; or the sampling is made with replacement.
     * @return the sampled value
     */
    rangeSampling(from: number, to: number, sampledValues?: number[]): number;
    /**
     * Weight sampling from a list of weighted values.
     *
     * @param weightedValues (values, weights) to be sampled from
     * @param sampledValues (values, weights) already sampled. If empty, no values were already sampled ; or the sampling is made with replacement.
     * @return the sampled value
     */
    weightSampling(weightedValues: IWeightedValue[], sampledValues?: IWeightedValue[]): number;
    /**
     * Shuffles an array of number
     * The method does not modify the array itself
     *
     * @param values
     * @return the shuffled array
     */
    shuffle(values: number[]): number[];
}
