import { Player } from "./player";
import { EGameState } from "./models";
import type { Room } from "./room";
import type { Person } from "./person";
import type { IAction } from "./models";
export interface ISessionPublicData {
}
export interface ISessionPrivateData {
}
export declare class Session {
    id: string;
    room: Room;
    state: EGameState;
    public: ISessionPublicData;
    private: ISessionPrivateData;
    players: Player[];
    mocks: {
        playerMocks: {
            [index: string]: number[];
        };
        sessionMocks: number[];
    };
    actions: IAction[];
    static sessionsMap: {
        [index: string]: Session;
    };
    /**
     * Constructor
     * @param room the room containing the session
     */
    constructor(room: Room);
    /**
     * Returns th player which has the given id in the session
     * @param personId the id of the player to get
     */
    getPlayer(playerId: string): Player;
    /**
     * Adds the given person to the session"s players
     * @param person the person to add as a player to the session
     */
    addPlayer(person: Person): Player;
    /**
     * Removes the given player from the session
     * @param player the player to remove
     */
    removePlayer(player: Player): void;
    /**
     * Returns the session object used by the script
     * a proxy will lock this object for modification in case of a non locked action
     */
    getSessionForScript(): {
        public: ISessionPublicData;
        private: ISessionPrivateData;
        id: string;
    };
    /**
     * Returns the session"s data
     * @param playerId the id of the player to get full JSON instead of just public data
     */
    toJson(playerId?: string): any;
    /**
     * Returns the session"s data for history purpose
     */
    toHistory(): any;
}
