import type { IAmount } from "../types";
export interface IVariantParameters {
    [index: string]: any;
}
export interface IDeclarationParameters {
    permanent: boolean;
    maxInactiveSession: number;
    gameSessionLockStrategy: string;
}
export interface IBet<T> {
    amount: IAmount;
    data: T;
}
export interface IPlayerPrivateData {
}
export interface IPlayerPublicData {
}
export interface IPlayerProtectedData {
    id: string;
    bet: number;
}
export interface IPlayerShort {
    id: string;
}
export interface IPlayerFull extends IPlayerShort {
    public: IPlayerPrivateData;
    private?: IPlayerPublicData;
    protected?: IPlayerProtectedData;
}
export interface IWeightedValue {
    value: number;
    weight?: number;
}
export interface IAction {
    timestamp: number;
    type: keyof IGameEngineEventMap;
    params: any;
    notifications: INotifications[];
}
export interface INotifications {
    data: any;
    type: EPushNotificationType;
    timestamp: number;
    playerId: string;
}
export interface ISessionDetails {
    status: EGameState;
    createdTime: number;
    parameters: any;
    variantParameters: IVariantParameters;
    public: any;
    private: any;
    players: any[];
    events: IAction[];
}
export interface ISession {
    id: string;
    private: any;
    public: any;
    players: any[];
}
export declare enum EGameState {
    PENDING = "PENDING",
    ONGOING = "ONGOING",
    FINISHED = "FINISHED"
}
export declare enum EPushNotificationType {
    SESSION_INITIALIZED = "SESSION_INITIALIZED",
    PLAYER_ENTER = "PLAYER_ENTER",
    PLAYER_EXIT = "PLAYER_EXIT",
    PLAYER_REMOVED = "PLAYER_REMOVED",
    PAYOUT = "PAYOUT",
    SESSION_CANCELLED = "SESSION_CANCELLED",
    SESSION_STOPPED = "SESSION_STOPPED",
    SCRIPT = "SCRIPT"
}
export declare enum ELockPolicy {
    NONE = "NONE",
    ALL = "ALL",
    ACTION_ONLY = "ACTION_ONLY",
    BET_ONLY = "BET_ONLY"
}
export interface IGameEngineEvent {
    type: string;
}
export interface IGameSessionAwareGameEngineEvent<S> extends IGameEngineEvent {
    session: S;
}
export interface IGameEngineInitializationEvent<S> extends IGameSessionAwareGameEngineEvent<S> {
}
export interface IGameEngineTimerEventEvent<S> extends IGameSessionAwareGameEngineEvent<S> {
    eventName: string;
}
export interface IGameEngineGameEventEvent<S, T> extends IGameSessionAwareGameEngineEvent<S> {
    playerId: string;
    eventName: string;
    eventData: T;
}
export interface IGameEnginePlayerBetEvent<T> extends IGameEngineEvent {
    playerId: string;
    stake: number;
    betData: T;
}
export interface IGameEnginePlayerJoiningEvent<S, T> extends IGameSessionAwareGameEngineEvent<S> {
    playerId: string;
    stake: number;
    betData: T;
}
export interface IGameEnginePlayerLeavingEvent<S> extends IGameSessionAwareGameEngineEvent<S> {
    playerId: string;
}
export interface IGameEngineGameStartedEvent<S> extends IGameSessionAwareGameEngineEvent<S> {
}
export interface IGameEngineGameEndedEvent<S> extends IGameSessionAwareGameEngineEvent<S> {
}
export interface IGameEngineEventMap {
    initialize: IGameEngineInitializationEvent<any>;
    playerBet: IGameEnginePlayerBetEvent<any>;
    playerJoining: IGameEnginePlayerJoiningEvent<any, any>;
    playerLeaving: IGameEnginePlayerLeavingEvent<any>;
    gameStarted: IGameEngineGameStartedEvent<any>;
    gameEvent: IGameEngineGameEventEvent<any, any>;
    timerEvent: IGameEngineTimerEventEvent<any>;
    gameEnded: IGameEngineGameEndedEvent<any>;
}
export interface IGameEngineParameters {
    minPlayers: number;
    maxPlayers: number;
    scriptParameters: any;
    variantParameters: any;
}
export interface IMultipassParameters<V> {
    minPlayers: number;
    maxPlayers: number;
    betLevelList: IBetLevel[];
    content: V;
    gameVariantExternalId: string;
}
export interface IBetLevel {
    id: string;
    ranges: {
        min: number;
        max: number;
    };
}
