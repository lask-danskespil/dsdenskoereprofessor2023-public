import { MtpGame } from "./mtpGame";
import type { Room } from "./room";
import type { Session } from "./session";
import type { EGameState, ISessionDetails } from "./models";
export interface IMultipassConfiguration {
    gameVariantName: string;
    scriptFilePath: string;
    historyFilePath: string;
    parametersFilePath: string;
    variantParametersFilePath: string;
    declarationFilePath: string;
}
export declare class MultipassManager {
    private _multipassConfirations;
    private _gamesMap;
    /**
     * Get a game given its variantName
     * @param gameVariantName
     */
    get(gameVariantName: string): Promise<MtpGame>;
    /**
     * Get a room by its roomId
     * Throws an MTPError if room not found
     * @param roomId
     */
    getRoomById(roomId: string): Room;
    /**
     * Get a session given sessionId
     * Throws an MTPError if session not found
     * @param roomId
     */
    getSessionById(sessionId: string): Session;
    /**
     * Returns list of sessions of a game.
     * @param gameVariantName
     */
    listSessions(gameVariantName: string): Promise<Array<{
        id: string;
        status: EGameState;
        players: number;
        roomId: string;
    }>>;
    /**
     * Get details of a game's session.
     * @param gameVariantName
     * @param sessionId
     */
    getGameSessionDetails(gameVariantName: string, sessionId: string): Promise<ISessionDetails>;
    /**
     * Filters the given rooms array to return only rooms of the given player
     * @param rooms the rooms array to filter
     * @param playerId the player id to find
     */
    filterByPlayerId(rooms: Room[], playerId: string): Room[];
    /**
     * Inserts the given multipass configuration into the DB
     * @param config the multipass config containing paths to the files
     * @returns Promise<IMultipassConfiguration> added configuration
     */
    addConfiguration(configurationPath: string): Promise<IMultipassConfiguration>;
    /**
     * Finds an existing (or not) multipass configuration in the DB
     * @param gameVariantName the variant name to find
     */
    private _findConfigurationByGameVariantName;
}
