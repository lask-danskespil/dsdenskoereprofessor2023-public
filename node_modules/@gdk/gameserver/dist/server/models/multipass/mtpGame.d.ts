import { Room } from "./room";
import type { IMultipassParameters, IVariantParameters, IBetLevel, IDeclarationParameters } from "./models";
import type { IMultipassConfiguration } from "./multipassManager";
import type { Session } from "./session";
export declare class MtpGame {
    gameVariantName: string;
    folderPath: IMultipassConfiguration;
    content: string;
    historyScript: string;
    parameters: any;
    variantParameters: IVariantParameters;
    declaration: IDeclarationParameters;
    bets: IBetLevel[];
    minPlayers: number;
    maxPlayers: number;
    rooms: Room[];
    sessions: Session[];
    /**
     * Constructor of an MTPGame
     * @param gameVariantName
     * @param folderPath
     */
    constructor(gameVariantName: string, folderPath: IMultipassConfiguration);
    /**
     * Load or reload an MTPGame
     * Will load script an parameters from disk and reset all engine
     */
    load(): Promise<void>;
    /**
     * Get game parameters
     */
    getScriptVariant(): IMultipassParameters<any>;
    /** Close a room (delete it)
     * @param roomId the id of the room
     */
    close(roomId: string): void;
    /**
     * Creates a new room
     * @param betLevelId for the room to create
     */
    createRoom(betLevelId: string, debug?: boolean): Promise<Room>;
    /**
     * Get a list of rooms matching criteria
     * @param bet the bet attached to the rooms to find
     */
    getRooms(betLevelId?: string): Room[];
    /**
     * Get a room matching criteria
     * throw if no matching room exists
     * @param betLevelId attached to the room to find
     * @param onlyNonFull optionnal boolean if true, returns only non full room
     */
    getRoom(betLevelId?: string | number, onlyNonFull?: boolean): Room;
    /**
     * Get a room by id
     * @param roomId the id of the room to get
     */
    getRoomById(roomId: string): Room;
    /**
     * Requires a JSON parameters file and throws an explicit error
     * if an error occurs when requiring JSON file
     * @param path the path of the JSON
     */
    private _requireParametersJson;
}
