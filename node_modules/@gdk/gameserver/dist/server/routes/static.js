"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoutes = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const INDEX_PATH = "templates/root.html";
const LOADER_PATH = "templates/loader.js";
const ROOT_PATH = (0, path_1.join)(__dirname, "../../../");
/**
 * Handle routing for static files & directory.
 * @param gameConfig gameConfig to inject in index page.
 * @param gameDirectory root directory of the game you want to run.
 * @returns A array of ServerRoute to load with hapi.
 */
function getRoutes(gameConfig, gameDirectory) {
    const routes = [
        {
            method: "GET",
            path: "/",
            handler: (_, h) => {
                return h.view(INDEX_PATH, {
                    cliGameConfig: JSON.stringify(gameConfig.attrs),
                    gameName: gameConfig.lotteryGameCode,
                });
            },
        },
        {
            method: "GET",
            path: "/game/local/loader.js",
            handler: { file: LOADER_PATH },
        },
        {
            method: "GET",
            path: "/game/static/{param*}",
            handler: { directory: { path: ROOT_PATH } },
        },
        {
            method: "GET",
            path: "/game/local/{param*}",
            handler: { directory: { path: gameDirectory } },
        },
        {
            method: "GET",
            path: "/favicon.png",
            handler: (_, h) => {
                const filePath = (0, fs_extra_1.existsSync)((0, path_1.join)(gameDirectory, "favicon.png"))
                    ? (0, path_1.join)(gameDirectory, "favicon.png")
                    : "favicon.png";
                return h.file(filePath, { confine: false });
            },
        },
    ];
    // Used for testing in framework monorepository context.
    if (process.env.OVERRIDE_NODE_MODULES_LOCATION) {
        routes.push({
            method: "GET",
            path: "/game/local/node_modules/{param*}",
            handler: {
                directory: { path: (0, path_1.resolve)(process.env.OVERRIDE_NODE_MODULES_LOCATION) },
            },
        });
    }
    return routes;
}
exports.getRoutes = getRoutes;
//# sourceMappingURL=static.js.map