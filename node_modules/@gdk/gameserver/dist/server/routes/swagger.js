"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schema = exports.swaggerOptions = exports.TAGS = void 0;
const joi_1 = __importDefault(require("joi"));
var TAGS;
(function (TAGS) {
    TAGS["API"] = "api";
    TAGS["JACKPOTS"] = "Jackpots";
    TAGS["MTP"] = "Multipass";
    TAGS["MTR"] = "Motors";
    TAGS["ITG"] = "Instant Games";
    TAGS["PLAYER"] = "Player";
    TAGS["ADMIN"] = "Admin";
    TAGS["DEPRECATED"] = "deprecated";
})(TAGS = exports.TAGS || (exports.TAGS = {}));
exports.swaggerOptions = {
    info: {
        title: "GameServer API documentation",
        description: "Public routes",
        contact: {
            email: "support.gdk@lotsys.com",
        },
    },
    grouping: "tags",
    tags: [
        {
            name: TAGS.MTP,
            description: "Multipass specific routes",
            externalDocs: {
                description: "Find out more about multipass",
                url: "http://example.org",
            },
        },
        {
            name: TAGS.MTR,
            description: "Motors specific routes",
            externalDocs: {
                description: "Find out more about motors",
                url: "http://example.org",
            },
        },
        {
            name: TAGS.ITG,
            description: "Instant games specific routes",
            externalDocs: {
                description: "Find out more about instant games",
                url: "http://example.org",
            },
        },
        {
            name: TAGS.PLAYER,
            description: "Player specific routes",
            externalDocs: {
                description: "Find out more about players",
                url: "http://example.org",
            },
        },
    ],
};
var Schema;
(function (Schema) {
    let shared;
    (function (shared) {
        shared.amount = joi_1.default.object({
            value: joi_1.default.number()
                .integer()
                .min(0)
                .required()
                .description("Amount value in the smallest fraction digits of the currency")
                .example(200),
            currency: joi_1.default.string()
                .min(3)
                .max(3)
                .uppercase()
                .required()
                .description("ISO 4117 code of the currency")
                .example("EUR"),
        }).label("Amount");
        shared.applicationId = joi_1.default.string()
            .valid("ITG", "MTR", "MTP")
            .label("applicationId")
            .description("applicationId")
            .example("ITG");
        shared.serviceName = joi_1.default.string()
            .min(1)
            .max(64)
            .example("tresorsdeschamps2018")
            .description("Name of the service, it is the name you registered your script on.");
        shared.error = joi_1.default.object({
            code: joi_1.default.number().description("Error code"),
            message: joi_1.default.string().description("Error message"),
        }).label("exception");
        shared.gameConfig = joi_1.default.object()
            .unknown(true)
            .label("gameConfig")
            .description("Game configuration");
        shared.lotteryCode = joi_1.default.string()
            .min(1)
            .max(64)
            .example("falcon-usr")
            .description("Name of the lottery.")
            .default("lotteryGDK");
        shared.jackpotExternalId = joi_1.default.string()
            .min(1)
            .max(64)
            .example("international-jackpot")
            .description("External id of one of the jackpots.");
        shared.configurationName = joi_1.default.string()
            .min(1)
            .max(64)
            .example("JackpotFDJ")
            .description("Configuration name of the jackpot.");
        shared.jackpotStatusOptions = ["IN_PROGRESS", "FAILURE", "UNAVAILABLE", "DONE"];
        shared.jackpotResultStatus = joi_1.default.valid(...shared.jackpotStatusOptions);
        shared.jackpotBalance = joi_1.default.object({
            jackpotExternalId: shared.jackpotExternalId,
            balance: shared.amount,
        }).description("Balance of a jackpot.");
        shared.lotteryGameCode = joi_1.default.string();
        shared.lotteryGameName = joi_1.default.string();
        shared.betId = joi_1.default.string();
        shared.jackpots = joi_1.default.array()
            .items(joi_1.default.object({
            jackpotExternalId: shared.jackpotExternalId,
            jackpotProgressionType: joi_1.default.string(),
            shared: joi_1.default.boolean(),
            // theme missing ??
            participations: joi_1.default.array().items(
            // "jackpotParticipationDetails" in example ???
            joi_1.default.object({
                gameBetAmount: shared.amount,
                participationTokensNumbers: joi_1.default.number(),
            })),
        }))
            .description("Game jackpot configurations.")
            .example([
            {
                jackpotExternalId: "international-jackpot",
                type: "PROGRESSIVE",
                shared: true,
                jackpotParticipationDetails: [
                    {
                        participationTokenNumbers: 10,
                        gameBetAmount: {
                            currency: "EUR",
                            amount: 500,
                            scale: 2,
                        },
                    },
                    {
                        participationTokenNumbers: 5,
                        gameBetAmount: {
                            currency: "EUR",
                            amount: 200,
                            scale: 2,
                        },
                    },
                ],
            },
            {
                jackpotExternalId: "jackpot-rang-2",
                type: "FIXED",
                shared: false,
                jackpotParticipationDetails: [
                    {
                        participationTokenNumbers: 10,
                        gameBetAmount: {
                            currency: "EUR",
                            amount: 500,
                            scale: 2,
                        },
                    },
                ],
            },
        ]);
        shared.jackpotResults = joi_1.default.object()
            .label("jackpotsConfig")
            .description("Jackpots configuration")
            .keys({
            status: joi_1.default.string(),
            participationCount: joi_1.default.number(),
            configurationName: joi_1.default.string(),
            result: joi_1.default.object({
                jackpotWon: joi_1.default.boolean(),
                totalWinAmount: shared.amount,
                jackpotsWinDetails: joi_1.default.array().items(joi_1.default.object({
                    winAmount: shared.amount,
                    jackpotExternalId: shared.jackpotExternalId,
                })),
            }),
        });
        shared.jackpotMock = joi_1.default.object({
            externalId: joi_1.default.string().example("jackpot").required(),
            win: joi_1.default.boolean().example(true),
            amount: shared.amount.optional(),
        });
        shared.jackpotsMockPayload = joi_1.default.object()
            .keys({
            status: shared.jackpotResultStatus.optional(),
            win: joi_1.default.boolean().optional(),
            jackpots: joi_1.default.array().items(shared.jackpotMock).optional(),
        })
            .example({
            status: "DONE",
            win: true,
        });
    })(shared = Schema.shared || (Schema.shared = {}));
    let player;
    (function (player_1) {
        player_1.player = joi_1.default.object({
            id: joi_1.default.string().min(1).max(64).description("Id of the player").example("jd"),
            name: joi_1.default.string().min(1).max(64).description("Full name of the player").example("John Doe"),
            purse: shared.amount.description("Purse of the player"),
        }).label("Player");
        player_1.players = joi_1.default.array().items(player_1.player).description("Array of players");
        player_1.playerId = joi_1.default.string()
            .min(1)
            .max(64)
            .description("Player id")
            .label("playerId")
            .example("jd");
    })(player = Schema.player || (Schema.player = {}));
    let itg;
    (function (itg) {
        itg.demoMode = joi_1.default.boolean().default(false);
        itg.model = joi_1.default.any().description("Dealer file model");
        itg.symbol = joi_1.default.string()
            .min(1)
            .max(512)
            .label("symbol")
            .description("symbol encoding ticket data");
        itg.revelationData = joi_1.default.object()
            .unknown(true)
            .label("Revelation data")
            .description("Revelation data");
        itg.eventReference = joi_1.default.object()
            .unknown(true)
            .label("Event reference")
            .description("Event reference");
        itg.ticketStatus = joi_1.default.string()
            .valid("OPENED", "CLAIMED")
            .label("ticket status")
            .description("Status of the ticket, can be OPENED or CLAIMED")
            .example("OPENED");
        itg.betMode = joi_1.default.string()
            .valid("BET_MANUAL_CLAIM", "BET_AUTO_CLAIM")
            .label("bet mode")
            .description("bet mode")
            .example("BET_MANUAL_CLAIM");
        itg.ticketId = joi_1.default.number().integer().label("ticketId");
        itg.prize = joi_1.default.object()
            .label("Prize information")
            .description("Prize information")
            .keys({
            rank: joi_1.default.number().integer().min(1),
            type: joi_1.default.string(),
            description: joi_1.default.string(),
        })
            .example({
            rank: 2,
            type: "PERIODIC_WINNING",
            description: "Win 60000 for 60 months",
        });
        itg.ticket = joi_1.default.object()
            .description("Itg ticket")
            .example({
            betAmount: { currency: "dkk", value: 6000 },
            demo: false,
            id: 0,
            symbol: "F,D,G,A,A,C,G,B-A,C,B,E,H,D,A,A-F,E,I,A,B,F,D,I-E,B,C,A,D,J,J,C-K,D,A,E,A,K|-1,7,8---",
            prize: {
                rank: 2,
                type: "PERIODIC_WINNING",
                description: "Win 60000 for 60 months",
            },
            claimedTime: null,
            status: "OPENED",
            openedTime: "2019-08-08T01:21:44+00:00",
            wonAmount: { currency: "dkk", value: 6000 },
            receiptId: "000000001",
            revelationData: null,
            serviceName: "dsguldbarren2019",
        });
        itg.tickets = joi_1.default.array().items(Schema.itg.ticket);
        itg.deprecatedTicket = joi_1.default.any();
        itg.betResponse = joi_1.default.object()
            .description("Bet response")
            .example({
            demo: false,
            receiptId: "000000002",
            serverMessage: [],
            wonAmount: { currency: "dkk", value: 18000 },
            data: {
                betAmount: { currency: "dkk", value: 6000 },
                demo: false,
                id: 1,
                symbol: "G,F,C,A,C,F,A,A-B,A,A,F,D,F,A,H-F,F,B,I,A,A,A,D-J,A,A,J,C,D,D,B-E,K,B,C,K,B|4,7,8-2,3,7-5,6,7--",
                prize: {
                    rank: 2,
                    type: "PERIODIC_WINNING",
                    description: "Win 60000 for 60 months",
                },
                claimedTime: null,
                status: "OPENED",
                openedTime: "2019-08-08T01:30:55+00:00",
                wonAmount: { currency: "dkk", value: 18000 },
                receiptId: "000000002",
                revelationData: null,
                serviceName: "dsguldbarren2019",
            },
        });
        itg.mockObject = joi_1.default.object()
            .keys({
            rank: joi_1.default.number().integer().min(1),
            symbol: joi_1.default.string(),
            symbolPattern: joi_1.default.string(),
            winAmount: joi_1.default.number().integer().min(0),
            force: joi_1.default.boolean(),
        })
            .label("mock object")
            .description("Mock object to be used for future bet")
            .example({ rank: 1 });
        itg.mocks = joi_1.default.array()
            .items(Schema.itg.mockObject)
            .label("mocks")
            .description("List of mocks");
        itg.ticketFilters = joi_1.default.object().keys({
            ticketStatus: Schema.itg.ticketStatus,
            gameCode: Schema.shared.serviceName,
            ticketId: Schema.itg.ticketId,
        });
        itg.betRequest = joi_1.default.object()
            .keys({
            applicationId: Schema.shared.applicationId.required(),
            serviceName: Schema.shared.serviceName.required(),
            mediaType: Schema.itg.betMode,
            stake: Schema.shared.amount,
            data: {
                id: Schema.itg.ticketId,
                revelationData: Schema.itg.revelationData,
                eventReference: Schema.itg.eventReference,
                status: Schema.itg.ticketStatus,
            },
        })
            .label("Itg bet request")
            .description("Itg bet request")
            .example({
            applicationId: "ITG",
            serviceName: "dsguldbarren2019",
            mediaType: "BET_MANUAL_CLAIM",
            stake: { currency: "DKK", value: 6000 },
        });
    })(itg = Schema.itg || (Schema.itg = {}));
    let mtp;
    (function (mtp) {
        mtp.error = joi_1.default.object({
            code: joi_1.default.number().description("Error code"),
            message: joi_1.default.string().description("Error message"),
        }).label("Multipass exception");
        mtp.gameVariantName = joi_1.default.string()
            .min(1)
            .max(64)
            .example("miseafeu2018")
            .description("Name of the game variant, equivalent to the name you register the mtp script on the gdk.")
            .label("gameVariantName");
        mtp.betLevelId = joi_1.default.string()
            .label("betLevelId")
            .description("Id for the bet level of the room. Available bet levels can be retrieved in scriptVariantParameters.");
        mtp.roomId = joi_1.default.string()
            .min(1)
            .max(64)
            .description("Uuid of the room")
            .label("roomId");
        mtp.sessionId = joi_1.default.string()
            .min(1)
            .max(64)
            .description("Uuid of the session")
            .label("sessionId");
        mtp.room = joi_1.default.object({
            id: mtp.roomId,
        }).label("Multipass Room");
        mtp.session = joi_1.default.object({
            id: mtp.sessionId,
        }).label("Multipass session");
        mtp.betLevel = joi_1.default.object({
            id: joi_1.default.number().integer().min(0).description("Id of the bet Level").label("betLevelId"),
            min: joi_1.default.number()
                .integer()
                .min(0)
                .description("Minimum bet amount for this bet level")
                .label("betLevelMin"),
            max: joi_1.default.number()
                .integer()
                .min(0)
                .description("Maximum bet amount for this bet level")
                .label("betLevelMax"),
        });
        mtp.variantParameters = joi_1.default.object({
            minPlayers: joi_1.default.number()
                .integer()
                .min(2)
                .max(1000000)
                .description("minimum players required for a session to start")
                .label("Min players"),
            maxPlayers: joi_1.default.number()
                .integer()
                .min(2)
                .max(1000000)
                .description("maximum people allow in a room")
                .label("Max players"),
            bets: joi_1.default.array().items(mtp.betLevel).label("bet levels for the room"),
            content: joi_1.default.object()
                .description("game specific variant parameters")
                .label("variant parameters content"),
        });
        mtp.mocks = joi_1.default.array()
            .items(joi_1.default.number().integer().min(0))
            .label("mocksArray")
            .description("value to use to mock the RNG");
        mtp.betData = joi_1.default.any()
            .description("Multipass bet data")
            .label("betData")
            .example({ color: 2 });
        mtp.eventName = joi_1.default.string()
            .min(1)
            .max(64)
            .description("Name of the event to send on an updateBet request")
            .label("eventName")
            .example("color");
        mtp.playerGameSessionId = joi_1.default.string()
            .min(1)
            .max(64)
            .description("Player game session id to identify the session id for the player")
            .label("playerGameSessionId")
            .example("64");
        mtp.rooms = joi_1.default.array().items(mtp.room).label("Multipass Room list");
        mtp.playerId = joi_1.default.string()
            .min(1)
            .max(15)
            .example("player3")
            .description("The playerId");
    })(mtp = Schema.mtp || (Schema.mtp = {}));
    let mtr;
    (function (mtr) {
        mtr.model = joi_1.default.object()
            .keys({
            serviceName: Schema.shared.serviceName,
            applicationId: Schema.shared.applicationId,
            data: {
                gmid: joi_1.default.number().integer(),
                gmn: joi_1.default.string(),
                mdl: joi_1.default.any(),
            },
        })
            .label("MTR model response");
        mtr.session = joi_1.default.object()
            .keys({
            serviceName: Schema.shared.serviceName,
            applicationId: Schema.shared.applicationId,
            id: joi_1.default.string(),
            message: joi_1.default.array().items(joi_1.default.string()),
            serverMessage: joi_1.default.array().items(joi_1.default.string()),
            data: {
                evr: joi_1.default.object(),
                gmd: joi_1.default.object(),
                gmid: joi_1.default.number().integer(),
                st: joi_1.default.string(),
            },
        })
            .label("MTR session response");
        mtr.prestoTicketInfos = joi_1.default.object()
            .keys({
            token: joi_1.default.string(),
            lotteryCode: joi_1.default.string(),
            status: joi_1.default.string(),
            info: joi_1.default.object().keys({
                ticketNo: joi_1.default.string(),
                masterPrizeDescription: joi_1.default.string(),
                creditCurrency: joi_1.default.string(),
                creditAmount: joi_1.default.number(),
            }),
        })
            .label("PRS ticket info");
        mtr.betRequest = joi_1.default.object()
            .keys({
            stake: Schema.shared.amount.required(),
            data: joi_1.default.object()
                .keys({
                prm: joi_1.default.object().optional(),
            })
                .optional(),
        })
            .label("MTR bet request")
            .description("MTR bet request");
        mtr.betResponse = joi_1.default.object()
            .keys({
            receiptId: joi_1.default.string(),
            demo: joi_1.default.boolean(),
            messages: joi_1.default.array().items(joi_1.default.any()),
            id: joi_1.default.number().integer(),
            data: {
                res: joi_1.default.string(),
                data: {
                    id: joi_1.default.number().integer(),
                    gmid: joi_1.default.number().integer(),
                    st: joi_1.default.string(),
                    gmd: joi_1.default.object(),
                    evr: joi_1.default.object(),
                },
            },
        })
            .label("MTR bet response");
        mtr.updateBetRequest = joi_1.default.object()
            .keys({
            sid: joi_1.default.number().integer().required(),
            evn: joi_1.default.string().required(),
            prm: joi_1.default.object(),
        })
            .label("MTR updatebet request")
            .description("MTR updatebet request");
        mtr.getGameRequest = joi_1.default.object()
            .keys({
            pagingRequest: {
                pageNumber: joi_1.default.number().integer(),
                pageSize: joi_1.default.number().integer(),
            },
        })
            .label("Get games request");
        mtr.gameModelId = joi_1.default.string();
        mtr.addMockRequest = joi_1.default.object()
            .keys({
            gameModelId: mtr.gameModelId.required(),
            elements: joi_1.default.alternatives().try(joi_1.default.array().items(joi_1.default.string()), joi_1.default.string()),
        })
            .label("Add mock request")
            .description("Add mock to a model.");
        mtr.mocksValues = joi_1.default.array()
            .items(joi_1.default.number())
            .description("List of mocks values")
            .label("List of mocks values");
        mtr.sessionId = joi_1.default.string();
    })(mtr = Schema.mtr || (Schema.mtr = {}));
    Schema.playerHeaders = joi_1.default.object()
        .keys({
        playerId: Schema.player.playerId,
    })
        .options({ allowUnknown: true });
})(Schema = exports.Schema || (exports.Schema = {}));
//# sourceMappingURL=swagger.js.map