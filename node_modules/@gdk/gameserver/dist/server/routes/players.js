"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoutes = void 0;
const boom = __importStar(require("@hapi/boom"));
const joi_1 = __importDefault(require("joi"));
const player_1 = require("../models/player");
const errors = __importStar(require("../models/errors"));
const swagger_1 = require("./swagger");
function getRoutes() {
    return [
        PlayerRoutes.getPlayers(),
        PlayerRoutes.getCurrentPlayer(),
        PlayerRoutes.getPlayer(),
        PlayerRoutes.getPlayerPurse(),
        PlayerRoutes.setPlayerPurse(),
        PlayerRoutes.debitPlayer(),
        PlayerRoutes.creditPlayer(),
        PlayerRoutes.getPurse(),
        PlayerRoutes.setPurse(),
        PlayerRoutes.debit(),
        PlayerRoutes.credit(),
        PlayerRoutes.deletePlayer(),
        PlayerRoutes.createPlayer(),
        PlayerRoutes.legacyPlayerRoute(), // POST /player-account/search/player
    ];
}
exports.getRoutes = getRoutes;
class PlayerRoutes {
    /**
     * Retrieve list of players
     */
    static getPlayers() {
        return {
            method: "GET",
            path: `/players`,
            options: {
                handler: async (request, h) => {
                    try {
                        let ids;
                        const raw = request.query.playersIds;
                        if (typeof raw === "string" && raw.length) {
                            ids = raw.split(",");
                        }
                        return h.response(player_1.Player.getPlayers(ids).map((player) => player.toJson())).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Get players",
                notes: `Maps of registered players`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.player.players,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    query: joi_1.default.object({
                        playersIds: joi_1.default.string().description("List of players id separated by comma."),
                    }),
                },
            },
        };
    }
    /**
     * Retrieve list of players
     */
    static getCurrentPlayer() {
        return {
            method: "GET",
            path: `/player`,
            options: {
                handler: async (request, h) => {
                    try {
                        const player = player_1.Player.getPlayer(request);
                        return h.response(player.toJson()).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Get current player",
                notes: `Current player info`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.player.player,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
            },
        };
    }
    /**
     * Retrieve specific player by id
     */
    static getPlayer() {
        return {
            method: "GET",
            path: `/players/{playerId}`,
            options: {
                handler: async (request, h) => {
                    try {
                        const player = player_1.Player.getPlayerFromId(request.params.playerId);
                        if (!player) {
                            throw { message: "player not found" };
                        }
                        return h.response(player.toJson()).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Get player by id",
                notes: `Get a player by Id`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.player.player,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    params: joi_1.default.object({
                        playerId: swagger_1.Schema.player.playerId.required(),
                    }),
                },
            },
        };
    }
    /**
     * Retrieve purse of a specific player
     */
    static getPlayerPurse() {
        return {
            method: "GET",
            path: `/players/{playerId}/purse`,
            options: {
                handler: async (request, h) => {
                    try {
                        const player = player_1.Player.getPlayerFromId(request.params.playerId);
                        if (!player) {
                            throw { message: "player not found" };
                        }
                        return h.response({ value: player.amount, currency: "EUR" }).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Get purse for a player",
                notes: `Get purse for a player`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.shared.amount,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    params: joi_1.default.object({
                        playerId: swagger_1.Schema.player.playerId.required(),
                    }),
                },
            },
        };
    }
    /**
     * Set purse of a specific player
     */
    static setPlayerPurse() {
        return {
            method: "POST",
            path: `/players/{playerId}/purse`,
            options: {
                handler: async (request, h) => {
                    try {
                        const player = player_1.Player.getPlayerFromId(request.params.playerId);
                        if (!player) {
                            throw { message: "player not found" };
                        }
                        player.amount = request.payload["value"];
                        return h.response({ value: player.amount, currency: "EUR" }).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Set purse for a player",
                notes: `Set a player's purse to a given amount`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.shared.amount,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    params: joi_1.default.object({
                        playerId: swagger_1.Schema.player.playerId.required(),
                    }),
                    payload: swagger_1.Schema.shared.amount,
                },
            },
        };
    }
    /**
     * Debit player by a specific amount
     */
    static debitPlayer() {
        return {
            method: "POST",
            path: `/players/{playerId}/purse/debit`,
            options: {
                handler: async (request, h) => {
                    try {
                        const player = player_1.Player.getPlayerFromId(request.params.playerId);
                        if (!player) {
                            throw { message: "player not found" };
                        }
                        player.amount -= request.payload["value"];
                        return h.response({ value: player.amount, currency: "EUR" }).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Debit player purse",
                notes: `Debit a player's purse of a given amount`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.shared.amount,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    params: joi_1.default.object({
                        playerId: swagger_1.Schema.player.playerId.required(),
                    }),
                    payload: swagger_1.Schema.shared.amount,
                },
            },
        };
    }
    /**
     * Credit player with a specific amount
     */
    static creditPlayer() {
        return {
            method: "POST",
            path: `/players/{playerId}/purse/credit`,
            options: {
                handler: async (request, h) => {
                    try {
                        const player = player_1.Player.getPlayerFromId(request.params.playerId);
                        if (!player) {
                            throw { message: "player not found" };
                        }
                        player.amount += request.payload["value"];
                        return h.response({ value: player.amount, currency: "EUR" }).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Credit player purse",
                notes: `Credit a player's purse of a given amount`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.shared.amount,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    params: joi_1.default.object({
                        playerId: swagger_1.Schema.player.playerId.required(),
                    }),
                    payload: swagger_1.Schema.shared.amount,
                },
            },
        };
    }
    /**
     * Retrieve purse of the current player
     */
    static getPurse() {
        return {
            method: "GET",
            path: `/players/purse`,
            options: {
                handler: async (request, h) => {
                    try {
                        const playerId = player_1.Player.getPlayerId(request);
                        const player = player_1.Player.getPlayerFromId(playerId);
                        if (!player) {
                            throw { message: "player not found" };
                        }
                        return h.response({ value: player.amount, currency: "EUR" }).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Get purse for current player",
                notes: `Get purse for current player`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.shared.amount,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    headers: swagger_1.Schema.playerHeaders,
                },
            },
        };
    }
    /**
     * Set purse of the current player
     */
    static setPurse() {
        return {
            method: "POST",
            path: `/players/purse`,
            options: {
                handler: async (request, h) => {
                    try {
                        const playerId = player_1.Player.getPlayerId(request);
                        const player = player_1.Player.getPlayerFromId(playerId);
                        if (!player) {
                            throw { message: "player not found" };
                        }
                        player.amount = request.payload["value"];
                        return h.response({ value: player.amount, currency: "EUR" }).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Set current player purse",
                notes: `Set current player purse to a given amount`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.shared.amount,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    headers: swagger_1.Schema.playerHeaders,
                    payload: swagger_1.Schema.shared.amount,
                },
            },
        };
    }
    /**
     * Debit current player with a specific amount
     */
    static debit() {
        return {
            method: "POST",
            path: `/players/purse/debit`,
            options: {
                handler: async (request, h) => {
                    try {
                        const playerId = player_1.Player.getPlayerId(request);
                        const player = player_1.Player.getPlayerFromId(playerId);
                        if (!player) {
                            throw { message: "player not found" };
                        }
                        player.amount -= request.payload["value"];
                        return h.response({ value: player.amount, currency: "EUR" }).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Debit current player purse",
                notes: `Debit current player purse of a given amount`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.shared.amount,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    headers: swagger_1.Schema.playerHeaders,
                    payload: swagger_1.Schema.shared.amount,
                },
            },
        };
    }
    /**
     * Credit player with a specific amount
     */
    static credit() {
        return {
            method: "POST",
            path: `/players/purse/credit`,
            options: {
                handler: async (request, h) => {
                    try {
                        const playerId = player_1.Player.getPlayerId(request);
                        const player = player_1.Player.getPlayerFromId(playerId);
                        if (!player) {
                            throw { message: "player not found" };
                        }
                        player.amount += request.payload["value"];
                        return h.response({ value: player.amount, currency: "EUR" }).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Credit player purse",
                notes: `Credit a player's purse of a given amount`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.shared.amount,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    headers: swagger_1.Schema.playerHeaders,
                    payload: swagger_1.Schema.shared.amount,
                },
            },
        };
    }
    /**
     * Deletes a specific player
     */
    static deletePlayer() {
        return {
            method: "DELETE",
            path: `/players/{playerId}`,
            options: {
                handler: async (request, h) => {
                    try {
                        player_1.Player.removePlayer(request.params.playerId);
                        return h.response().code(204);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Delete a player",
                notes: `Remove the player from local db`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            204: {
                                description: "Success",
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    params: joi_1.default.object({
                        playerId: swagger_1.Schema.player.playerId.required(),
                    }),
                },
            },
        };
    }
    /**
     * Creates a player
     */
    static createPlayer() {
        return {
            method: "POST",
            path: `/players/create`,
            options: {
                handler: async (request, h) => {
                    try {
                        const player = player_1.Player.create(request.payload);
                        return h.response(player.toJson()).code(200);
                    }
                    catch (e) {
                        return h.response(e).code(400);
                    }
                },
                description: "Create a player",
                notes: `Creates a new player in local db`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                                schema: swagger_1.Schema.player.player,
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.PLAYER],
                validate: {
                    payload: swagger_1.Schema.player.player,
                },
            },
        };
    }
    /**
     * legacy search player route
     */
    static legacyPlayerRoute() {
        return {
            method: "POST",
            path: "/player-account/search/player",
            options: {
                handler: async (request, h) => {
                    const player = player_1.Player.getInstance(player_1.Player.getPlayerId(request));
                    if (player.error === errors.PLAYER_NOT_FOUND) {
                        throw boom.notFound();
                    }
                    return {
                        data: [{ purse: player.amount, currency: "EUR" }],
                    };
                },
                description: "Get current player info",
                notes: `Legacy route`,
                plugins: {
                    "hapi-swagger": {
                        responses: {
                            200: {
                                description: "Success",
                            },
                            400: {
                                description: "Bad Request",
                                schema: swagger_1.Schema.shared.error,
                            },
                        },
                    },
                },
                tags: [swagger_1.TAGS.API, swagger_1.TAGS.DEPRECATED],
            },
        };
    }
}
exports.default = PlayerRoutes;
//# sourceMappingURL=players.js.map