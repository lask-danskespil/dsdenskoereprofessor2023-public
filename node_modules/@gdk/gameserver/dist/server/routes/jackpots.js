"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JackpotsRoutes = void 0;
const swagger_1 = require("./swagger");
const jackpot_1 = require("../models/jackpot");
const jackpotResults_1 = require("../models/jackpotResults");
class JackpotsRoutes {
    /**
     * Constructor
     * @param _gameConfig
     */
    constructor(_gameConfig) {
        this._gameConfig = _gameConfig;
        this.setJackpots(this._gameConfig.jackpotConfig);
    }
    setJackpots(config) {
        this.jackpots = {};
        // set jackpots global config
        jackpot_1.Jackpot.configurationName = config.configurationName;
        jackpot_1.Jackpot.participations = config.participations;
        // set jackpots detailled configs
        for (const jackpot of config.jackpots) {
            this.jackpots[jackpot.jackpotExternalId] = new jackpot_1.Jackpot(jackpot);
        }
    }
    /**
     * Retrieve routes
     */
    getRoutes() {
        return [
            {
                method: "GET",
                path: `/itf/jackpot-game-anonymous/lotteries/{lotteryCode}/configuration/{configurationName}/balance`,
                options: {
                    handler: async (request, h) => {
                        const result = Object.values(this.jackpots).map((j) => j.getBalance());
                        if (!result.length === undefined) {
                            return h
                                .response({
                                code: "JACKPOT_NOT_FOUND",
                                message: `No jackpot exists for the configurationName ${request.params.configurationName}`,
                            })
                                .code(404);
                        }
                        return h.response(result).code(200);
                    },
                    description: "Retrieve the currency balance of the jackpots using the jackpot configuration name.",
                    plugins: {
                        "hapi-swagger": {
                            responses: {
                                200: {
                                    description: "Success",
                                    schema: swagger_1.Schema.shared.jackpotBalance,
                                },
                                400: {
                                    description: "Bad Request",
                                    schema: swagger_1.Schema.shared.error,
                                },
                                404: {
                                    description: "Jackpot Not Found",
                                    schema: swagger_1.Schema.shared.error,
                                },
                            },
                        },
                    },
                    validate: {
                        headers: swagger_1.Schema.playerHeaders,
                        params: {
                            lotteryCode: swagger_1.Schema.shared.lotteryCode.required(),
                            configurationName: swagger_1.Schema.shared.configurationName.required(),
                        },
                    },
                    tags: [swagger_1.TAGS.API, swagger_1.TAGS.JACKPOTS],
                },
            },
            {
                method: "GET",
                path: `/itf/jackpot-game-anonymous/lotteries/{lotteryCode}/games/{lotteryGameCode}/jackpots/`,
                options: {
                    handler: async (request, h) => {
                        return this._gameConfig.jackpotConfig;
                    },
                    description: "Retrieve the game jackpot configurations.",
                    plugins: {
                        "hapi-swagger": {
                            responses: {
                                200: {
                                    description: "Success",
                                    schema: swagger_1.Schema.shared.jackpots,
                                },
                                400: {
                                    description: "Bad Request",
                                    schema: swagger_1.Schema.shared.error,
                                },
                                404: {
                                    description: "Jackpot Not Found",
                                    schema: swagger_1.Schema.shared.error,
                                },
                            },
                        },
                    },
                    validate: {
                        headers: swagger_1.Schema.playerHeaders,
                        params: {
                            lotteryCode: swagger_1.Schema.shared.lotteryCode.required(),
                            lotteryGameCode: swagger_1.Schema.shared.lotteryGameCode.default(this._gameConfig.lotteryGameCode),
                        },
                    },
                    tags: [swagger_1.TAGS.API, swagger_1.TAGS.JACKPOTS],
                },
            },
            {
                method: "GET",
                path: `/itf/jackpot-game-player/lotteries/{lotteryCode}/results/{betId}`,
                options: {
                    handler: async (request, h) => {
                        try {
                            const result = jackpotResults_1.JackpotResultsStore.getInstance().findById(request.params.betId);
                            if (result.result.jackpotWon === false) {
                                // remove jackpotWinDetails from response when jackpot is lost to be iso platform
                                delete result.result.jackpotsWinDetails;
                            }
                            return h.response(result).code(200);
                        }
                        catch (e) {
                            return h
                                .response({
                                code: "RESULT_NOT_FOUND",
                                message: e.message,
                            })
                                .code(404);
                        }
                    },
                    description: "Returns the status and result of a given jackpot bet. This feature is used by the front to display the result of a jackpot draw.",
                    plugins: {
                        "hapi-swagger": {
                            responses: {
                                200: {
                                    description: "Success",
                                    schema: swagger_1.Schema.shared.jackpotResults,
                                },
                                400: {
                                    description: "Bad Request",
                                    schema: swagger_1.Schema.shared.error,
                                },
                                404: {
                                    description: "Jackpot Not Found",
                                    schema: swagger_1.Schema.shared.error,
                                },
                            },
                        },
                    },
                    validate: {
                        headers: swagger_1.Schema.playerHeaders,
                        params: {
                            lotteryCode: swagger_1.Schema.shared.lotteryCode.required(),
                            betId: swagger_1.Schema.shared.betId.required(),
                        },
                    },
                    tags: [swagger_1.TAGS.API, swagger_1.TAGS.JACKPOTS],
                },
            },
            // TODO[epic=jackpot] mock route
            {
                method: "PUT",
                path: `/jackpots/admin/mock/{serviceName}`,
                options: {
                    handler: async (request, h) => {
                        try {
                            this.handleMock(request.payload);
                            return h.response().code(200);
                        }
                        catch (e) {
                            return h.response(e).code(400);
                        }
                    },
                    description: `Mock jackpots (status can be "${swagger_1.Schema.shared.jackpotStatusOptions.join('", "')}")`,
                    validate: {
                        payload: swagger_1.Schema.shared.jackpotsMockPayload.required(),
                    },
                    tags: [swagger_1.TAGS.API, swagger_1.TAGS.JACKPOTS],
                },
            },
        ];
    }
    /**
     * PUT /jackpots/admin/mock/{serviceName}
     */
    handleMock(payload) {
        var _a;
        jackpot_1.Jackpot.setStatus(payload.status);
        for (const id in this.jackpots) {
            const jackpot = (_a = payload.jackpots) === null || _a === void 0 ? void 0 : _a.find((jackpot) => jackpot.externalId === id);
            this.jackpots[id].setMock(jackpot || { externalId: id, win: payload.win });
        }
    }
}
exports.JackpotsRoutes = JackpotsRoutes;
//# sourceMappingURL=jackpots.js.map