"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearStream = exports.setIsTest = exports.isTest = exports.getRefererParameters = exports.stderr = exports.stdout = exports.std = void 0;
const QueryString = __importStar(require("querystring"));
function std(type, strs) {
    if (exports.isTest) {
        return;
    }
    const out = strs.reduce((m, line) => {
        m += `${line}\n`;
        return m;
    }, "");
    process[`std${type}`].write(out);
    if (type === "err") {
        process.exit(1);
    }
}
exports.std = std;
function stdout(strs) {
    if (typeof strs === "string" || typeof strs === "number") {
        strs = [strs];
    }
    std("out", strs);
}
exports.stdout = stdout;
function stderr(err) {
    std("err", [
        "",
        `  error: ${err.message}`,
        "",
        /*
         * TODO: Find a better way to show the stack of an err.
         *       There are 2 types of error: wrong inputs or real error io, etc...
         */
        // "--",
        // "",
        // err.stack
    ]);
}
exports.stderr = stderr;
/**
 * Returns the referer parameters (URL of the caller)
 * @param referer: the referer's string
 */
function getRefererParameters(referer) {
    const queryString = referer.substring(referer.indexOf("?") + 1, referer.length);
    return QueryString.parse(queryString);
}
exports.getRefererParameters = getRefererParameters;
exports.isTest = process.env.NODE_ENV === "test";
function setIsTest(value) {
    exports.isTest = value;
}
exports.setIsTest = setIsTest;
function clearStream(stream) {
    if (!stream) {
        return;
    }
    stream.removeAllListeners();
}
exports.clearStream = clearStream;
//# sourceMappingURL=helpers.js.map