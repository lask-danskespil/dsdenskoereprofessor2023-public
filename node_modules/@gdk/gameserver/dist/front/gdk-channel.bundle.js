window["Channel"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = __webpack_require__(1);
var popin_1 = __webpack_require__(2);
var Channel = /** @class */ (function () {
    /**
     * Constructor
     */
    function Channel() {
        /**
         * Bridge reference.
         */
        this.bridge = null;
        /**
         * Defines the reference to the notifier used to notify the game.
         */
        this.notifier = null;
        this._gameMode = undefined;
        this._masks = {};
        this._tagUuid = "uuid";
        this._tagSeqNum = 0;
        // Empty for the moment.
    }
    /**
     * Initializes the channel. Empty for the moment in local development.
     */
    Channel.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request_1.Request.get("./gameConfig")];
                    case 1:
                        data = (_a.sent()).data;
                        this.type = data.engine;
                        this.name = data.lotteryGameCode;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets the new notifier to use to listen the notifications of the host.
     * @param notifier defines the reference to the notifier listening the notifications.
     */
    Channel.prototype.setNotifier = function (notifier) {
        this.notifier = notifier;
    };
    Channel.prototype.emitEvent = function (eventType, eventData) {
        if (eventType === "TAG") {
            var tag = eventData;
            tag.seqNum = ++this._tagSeqNum;
            tag.uuid = this._tagUuid;
            tag.applicationId = this.type;
            tag.gameName = this.name;
            tag.date = Date.now();
            console.debug("[TRACK]", this.formatTagForLog(tag));
        }
        if (eventType === "PREBET") {
            return this.handlePrebetHook(eventData.stake, eventData.demo);
        }
        if (eventType === "RESUME_HOOK") {
            return this.handleResumeHook(eventData.id);
        }
        if (eventType === "GAME_END_HOOK") {
            return this.handleGameEndHook(eventData.ticket, eventData.stakes, eventData.demo);
        }
    };
    Channel.prototype.handlePrebetHook = function (stake, demo) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var popin = new popin_1.Popin({
                            title: "[PREBET]",
                            text: "Are you sure you want to bet ".concat(amountToString(stake), " in ").concat(demo ? "DEMO" : "PAYING", " mode ?"),
                            buttons: [
                                {
                                    title: "Cancel",
                                    callback: function () {
                                        popin.remove();
                                        console.info("[PREBET] player chooses NOT to accept the bet");
                                        reject();
                                    },
                                },
                                {
                                    title: "Ok",
                                    class: "primary",
                                    callback: function () {
                                        popin.remove();
                                        console.info("[PREBET] player chooses to accept the bet");
                                        resolve();
                                    },
                                },
                            ],
                        });
                    })];
            });
        });
    };
    Channel.prototype.handleResumeHook = function (ticketId) {
        return __awaiter(this, void 0, void 0, function () {
            var popin, doResume;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        popin = new popin_1.Popin({
                            title: "[RESUME_HOOK]",
                            text: "Ticket ".concat(ticketId, " is already in progress.\nDo you want to resume it ?"),
                            buttons: [
                                { title: "cancel", data: false },
                                { title: "OK", class: "primary", data: true },
                            ],
                        });
                        return [4 /*yield*/, popin.wait()];
                    case 1:
                        doResume = _a.sent();
                        popin.remove();
                        console.info(doResume
                            ? "[RESUME_HOOK] ticket ".concat(ticketId, ": player chooses to resume his game")
                            : "[RESUME_HOOK] ticket ".concat(ticketId, ": player chooses to NOT resume his game"));
                        return [2 /*return*/, doResume];
                }
            });
        });
    };
    Channel.prototype.handleGameEndHook = function (ticket, stakes, demoMode) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var text, popin, stake;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        text = ((_a = ticket.wonAmount) === null || _a === void 0 ? void 0 : _a.value) > 0
                            ? "You ".concat(demoMode ? "would have " : "", "won ").concat(amountToString(ticket.wonAmount))
                            : "You didn't win";
                        return [4 /*yield*/, new popin_1.Popin({
                                title: "[GAME_END_HOOK]",
                                text: "".concat(text, "\nplay again ?"),
                                buttons: __spreadArray([
                                    {
                                        data: undefined,
                                        title: "return to home",
                                    }
                                ], stakes.map(function (stake) { return ({
                                    data: stake,
                                    title: "".concat(demoMode ? "Try" : "Play", " ").concat(amountToString(stake)),
                                    class: "primary",
                                }); }), true),
                            })];
                    case 1:
                        popin = _b.sent();
                        return [4 /*yield*/, popin.wait()];
                    case 2:
                        stake = _b.sent();
                        popin.remove();
                        if (stake === undefined) {
                            console.info("[RESUME_HOOK] player chooses to NOT play again");
                            return [2 /*return*/, undefined];
                        }
                        else {
                            console.info("[RESUME_HOOK] player chooses to play again with stake ".concat(stake));
                            return [2 /*return*/, { stake: stake, demoMode: demoMode }];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Channel.prototype.formatTagForLog = function (tag) {
        return {
            name: tag.name,
            event: tag.event,
            eventType: tag.eventType,
            seqNum: tag.seqNum,
            uuid: tag.uuid,
            applicationId: tag.applicationId,
            gameName: tag.gameName,
            date: tag.date,
        };
    };
    /**
     * Request the game mode to be updated
     * @param gameMode Game mode
     */
    Channel.prototype.updateGameMode = function (gameMode) {
        this._gameMode = gameMode;
        return Promise.resolve("gameMode");
    };
    /**
     * Get the current game mode
     */
    Channel.prototype.getGameMode = function () {
        return Promise.resolve(this._gameMode);
    };
    /**
     * LEGACY
     * Get information about a guest
     * @param type Guest type
     * @param name Guest name
     */
    Channel.prototype.getGameInformation = function (type, name) {
        return Promise.resolve(null);
    };
    /**
     * Notify the lottery that the player wants to buy a ticket with real money.
     * The lottery has the ability to check wether or not the player has sufficident funds in his purse.
     * If not the lottery should ask to the player to credit (with an overlay).
     * In any case it must respond with a promise.
     *  - when fullfiled the game will continue with the bet
     *  - when rejected the game will cancel the bet process
     * @return Promise
     */
    Channel.prototype.preBet = function (betRequest) {
        // Not used in the GDK
        return Promise.resolve();
    };
    /**
     * LEGACY
     * Get the game configuration
     * @param type Guest type
     * @param name Guest name
     */
    Channel.prototype.getGameConfiguration = function (type, name) {
        return Promise.resolve(null);
    };
    /**
     * LEGACY
     * Get information about the locale
     */
    Channel.prototype.getLocaleInformation = function () {
        return Promise.resolve(null);
    };
    /**
     * Get information about the user
     * @param forceAuthenticated If true, require the user to be signed in before resolving the promise
     * @param sessionTokenType If provided, require a session token to be exchanged
     */
    Channel.prototype.getUserInformation = function () {
        var userInformation = {
            firstName: "John",
            lastName: "Doe",
            gender: "Mr.",
            sessionToken: {
                provider: "-",
                state: "-",
                value: "-",
            },
        };
        return Promise.resolve(userInformation);
    };
    /**
     * Get information about the user's purse(s)
     */
    Channel.prototype.getPurseInformation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, data, _a, currency, purse, displayedAmount;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.bridge.displayedAmount) {
                            return [2 /*return*/, Promise.resolve(this.bridge.displayedAmount)];
                        }
                        return [4 /*yield*/, request_1.Request.post("/player-account/search/player")];
                    case 1:
                        response = _b.sent();
                        data = response.data.data;
                        _a = data[0], currency = _a.currency, purse = _a.purse;
                        displayedAmount = {
                            currency: currency,
                            value: purse,
                        };
                        // TODO : why does the real server purse is called displayedAmount ??
                        return [2 /*return*/, { displayedAmount: displayedAmount }];
                }
            });
        });
    };
    /**
     * Returns the informations of the host.
     * Here let's return a shitty object as it is not used in the GDK
     */
    Channel.prototype.getHostInformation = function () {
        return Promise.resolve({ video: null, audio: null });
    };
    Channel.prototype.executeAction = function (actionId, parameters) {
        if (actionId === "OPEN_POPUP") {
            return Promise.reject();
        }
        if (actionId === "IS_GAME_ENABLED") {
            return Promise.resolve(true);
        }
        if (actionId === "TAG") {
            this.emitEvent("TAG", parameters);
            return;
        }
        return Promise.resolve();
    };
    /**
     * LEGACY : Mask the user's purse
     * @param mask Mask
     * @return Promise that resolves to the updated purse information along with a mask identifier
     * @deprecated
     */
    Channel.prototype.maskPurse = function (mask) {
        return __awaiter(this, void 0, void 0, function () {
            var purseInformation, maskId, displayedWin, maskedPurseInformation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPurseInformation()];
                    case 1:
                        purseInformation = _a.sent();
                        maskId = Math.random().toString();
                        displayedWin = {
                            value: purseInformation.displayedAmount.value - mask.winAmount.value,
                            currency: purseInformation.displayedAmount.currency,
                        };
                        this._masks[maskId] = displayedWin;
                        maskedPurseInformation = {
                            maskId: maskId,
                            displayedAmount: displayedWin,
                        };
                        /**
                         * returns the amount to display
                         */
                        return [2 /*return*/, maskedPurseInformation];
                }
            });
        });
    };
    /**
     * LEGACY : Clear a purse mask
     * @param maskId Mask identifier obtained from maskPurse()
     * @return Promise that resolves to the updated purse information
     * @deprecated
     */
    Channel.prototype.clearPurse = function (maskId) {
        return __awaiter(this, void 0, void 0, function () {
            var resyncPurse, displayedAmount;
            var _this = this;
            return __generator(this, function (_a) {
                resyncPurse = function () { return __awaiter(_this, void 0, void 0, function () {
                    var purseInformation;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.getPurseInformation()];
                            case 1:
                                purseInformation = _a.sent();
                                return [2 /*return*/, { displayedAmount: purseInformation.displayedAmount }];
                        }
                    });
                }); };
                // if no mask given, resync purse with the server
                if (maskId === undefined) {
                    return [2 /*return*/, resyncPurse()];
                }
                else {
                    displayedAmount = null;
                    if (this._masks[maskId]) {
                        displayedAmount = this._masks[maskId];
                        delete this._masks[maskId];
                    }
                    // if no more masks, resync purse with the server
                    if (Object.keys(this._masks).length === 0) {
                        return [2 /*return*/, resyncPurse()];
                    }
                    else {
                        return [2 /*return*/, { displayedAmount: displayedAmount }];
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * emitRequestParamsTag
     * @param requestConfig
     */
    Channel.prototype.emitRequestParamsTag = function (requestConfig) {
        // empty
    };
    /**
     * emitRequestResponseTag
     * @param requestConfig
     */
    Channel.prototype.emitRequestResponseTag = function (requestConfig) {
        // empty
    };
    /**
     * emitRequestErrorTag
     * @param requestConfig
     */
    Channel.prototype.emitRequestErrorTag = function (requestConfig) {
        // empty
    };
    return Channel;
}());
function amountToString(amount) {
    var _a;
    return new Intl.NumberFormat("fr-FR", {
        style: "currency",
        currency: amount.currency,
    }).format(amount.value / Math.pow(10, (_a = amount.scale) !== null && _a !== void 0 ? _a : 2));
}
exports.default = Channel;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
var Request = /** @class */ (function () {
    function Request() {
    }
    /**
     * Sends a GET request to the given URL
     * @param url the url to reach
     * @param headers the headers of the request
     */
    Request.get = function (url, headers) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendRequest("GET", url, null, headers)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Sends a POST request to the given URL
     * @param url the url to reach
     * @param data the data to send
     * @param headers the headers of the request
     */
    Request.post = function (url, data, headers) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendRequest("POST", url, data, headers)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Sends a PUT request to the given URL
     * @param url the url to reach
     * @param data the data to send
     * @param headers the headers of the request
     */
    Request.put = function (url, data, headers) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendRequest("PUT", url, data, headers)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Sends a request to the given URL
     * @param type the request type (GET, POST, PUT, ...)
     * @param url the url to reach
     * @param data the data to send
     * @param headers the headers of the request
     */
    Request.sendRequest = function (type, url, data, headers) {
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open(type, url);
            if (!headers) {
                headers = {
                    "Content-Type": "application/json",
                };
            }
            for (var name_1 in headers) {
                if (!headers.hasOwnProperty(name_1)) {
                    continue;
                }
                xhr.setRequestHeader(name_1, headers[name_1]);
            }
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status >= 200 && xhr.status <= 302) {
                        resolve({ data: JSON.parse(xhr.responseText), xhr: xhr });
                    }
                    else {
                        reject(xhr);
                    }
                }
            };
            xhr.send(typeof data !== "undefined" ? JSON.stringify(data) : "{}");
        });
    };
    /**
     *
     * @param xhr the xhr reference that
     */
    Request.getHeaders = function (xhr) {
        return xhr
            .getAllResponseHeaders()
            .split("\n")
            .reduce(function (all, header) {
            if (!header || header.length === 0) {
                return all;
            }
            var _a = header.split(": "), name = _a[0], value = _a[1];
            all[name] = value;
            return all;
        }, {});
    };
    return Request;
}());
exports.Request = Request;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Popin = void 0;
var popin_css_1 = __webpack_require__(3);
var LINE_BREAK_PATTERN = /\n/g;
var cssAdded = false;
function addCssIfNeeded() {
    if (cssAdded) {
        return;
    }
    cssAdded = true;
    var style = document.createElement("style");
    style.innerHTML = popin_css_1.default;
    document.head.appendChild(style);
}
var Popin = /** @class */ (function () {
    function Popin(options) {
        var _a;
        addCssIfNeeded();
        this.element = this.createHtml(options);
        this.overlay = ((_a = options.modal) !== null && _a !== void 0 ? _a : true) ? this.createOverlayHtml() : undefined;
        this.add();
    }
    Popin.prototype.createHtml = function (options) {
        var _this = this;
        var popin = document.createElement("div");
        popin.classList.add("gdk-popin");
        if (options.title !== undefined) {
            popin.innerHTML += "<h1>".concat(options.title, "</h1>");
        }
        if (options.text !== undefined) {
            var text = options.text.replace(LINE_BREAK_PATTERN, "<br/>");
            popin.innerHTML += "<div class=\"body\">".concat(text, "</div>");
        }
        // buttons
        var buttonContainer = document.createElement("div");
        buttonContainer.classList.add("footer");
        popin.appendChild(buttonContainer);
        if (options.buttons) {
            var buttons_1 = options.buttons.map(function (buttonData) {
                var button = document.createElement("button");
                button.textContent = buttonData.title;
                if (buttonData.class !== undefined) {
                    button.classList.add(buttonData.class);
                }
                buttonContainer.appendChild(button);
                return button;
            });
            this.waitPromise = new Promise(function (resolve) {
                var _loop_1 = function (i, l) {
                    var button = buttons_1[i];
                    var callback = options.buttons[i].callback;
                    button.addEventListener("click", function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!(callback !== undefined)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, callback()];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    resolve(options.buttons[i].data);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                };
                for (var i = 0, l = buttons_1.length; i < l; i++) {
                    _loop_1(i, l);
                }
            });
        }
        return popin;
    };
    Popin.prototype.createOverlayHtml = function () {
        var element = document.createElement("div");
        element.className = "gdk-popin-overlay";
        return element;
    };
    Popin.prototype.add = function () {
        if (this.overlay) {
            document.body.appendChild(this.overlay);
        }
        document.body.appendChild(this.element);
    };
    Popin.prototype.remove = function () {
        this.element.remove();
        if (this.overlay) {
            this.overlay.remove();
        }
    };
    Popin.prototype.wait = function () {
        return this.waitPromise;
    };
    return Popin;
}());
exports.Popin = Popin;


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".gdk-popin {\n\tcolor: #333;\n\tbackground-color: #FFF;\n\twidth: 45%;\n\tfont-family: 'Times New Roman', serif;\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n\tmargin: auto;\n\tborder-radius: 5px;\n\tbox-shadow: 0 0 10px rgba(0,0,0, 0.5);\n\tz-index: 9999;\n\tpadding: 14px 8px 12px;\n\ttransform: translateY(100%);\n}\n\n.gdk-popin > h1 {\n\tcolor: #2664b5;\n\ttext-align: center;\n\tfont-size: 24px;\n\tmargin-top: 0;\n}\n\n.gdk-popin > .body {\n\tfont-size: 20px;\n\ttext-align: center;\n\tmargin-top: 20px;\n\tmargin-bottom: 30px;\n}\n\n.gdk-popin .footer {\n\tdisplay: flex;\n\tjustify-content: space-evenly;\n\tflex-wrap: wrap;\n}\n\n.gdk-popin button {\n\tcolor: #333;\n\tfont-weight: bold;\n\tmin-width: 84px;\n\tbackground-color: #eee;\n\tborder-radius: 4px;\n\tborder: none;\n\tcursor: pointer;\n\tbox-shadow: 0 0 4px rgba(0,0,0, 0.5);\n\tpadding: 10px 12px;\n\tmargin: 4px 10px;\n}\n\n.gdk-popin button:hover {\n\tcolor: #000;\n\tbox-shadow: 0 0 4px rgba(0,0,0, 1);\n}\n\n.gdk-popin button.primary {\n\tcolor: #FFF;\n\tbackground-color: #3373c6;\n}\n\n.gdk-popin button.primary:hover {\n\tbackground-color: #2664b5;\n}\n\n.gdk-popin-overlay {\n\tz-index: 9999;\n\tbackground-color: rgba(0, 0, 0, 0.1);\n\tdisplay: inline-block;\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\theight: 100%;\n\twidth: 100%;\n}\n");

/***/ })
/******/ ]);