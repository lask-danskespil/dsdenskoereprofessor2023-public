import * as operators from "../../../src/blacklist/operators";

describe("operators", () => {
	test("lessThan", () => {
		// less
		expect(operators.lessThan("1", "2")).toBe(true);
		expect(operators.lessThan("1.1", "2")).toBe(true);
		expect(operators.lessThan("11.9", "21.1")).toBe(true);
		expect(operators.lessThan("1.9.1", "2.1")).toBe(true);
		expect(operators.lessThan("1.1", "2.9")).toBe(true);
		expect(operators.lessThan("1", "2.9")).toBe(true);
		expect(operators.lessThan("1.1.1", "1.1.2")).toBe(true);
		// greater
		expect(operators.lessThan("2", "1")).toBe(false);
		expect(operators.lessThan("2", "1.1")).toBe(false);
		expect(operators.lessThan("2.1", "1.9")).toBe(false);
		expect(operators.lessThan("2.9.1", "1.1")).toBe(false);
		expect(operators.lessThan("2.9", "1")).toBe(false);
		expect(operators.lessThan("1.1.3", "1.1.2")).toBe(false);
		// equal
		expect(operators.lessThan("2", "2")).toBe(false);
		expect(operators.lessThan("2.2", "2.2")).toBe(false);
	});

	test("lessEqual", () => {
		// less
		expect(operators.lessEqual("1", "2")).toBe(true);
		expect(operators.lessEqual("1.1", "2")).toBe(true);
		expect(operators.lessEqual("11.9", "21.1")).toBe(true);
		expect(operators.lessEqual("1.9.1", "2.1")).toBe(true);
		expect(operators.lessEqual("1.1", "2.9")).toBe(true);
		expect(operators.lessEqual("1", "2.9")).toBe(true);
		expect(operators.lessThan("1.1.1", "1.1.2")).toBe(true);
		// greater
		expect(operators.lessEqual("2", "1")).toBe(false);
		expect(operators.lessEqual("2", "1.1")).toBe(false);
		expect(operators.lessEqual("2.1", "1.9")).toBe(false);
		expect(operators.lessEqual("2.9.1", "1.1")).toBe(false);
		expect(operators.lessEqual("2.9", "1")).toBe(false);
		expect(operators.lessThan("1.1.3", "1.1.2")).toBe(false);
		// equal
		expect(operators.lessEqual("2", "2")).toBe(true);
		expect(operators.lessEqual("2.2", "2.2")).toBe(true);
	});

	test("greaterThan", () => {
		// less
		expect(operators.greaterThan("1", "2")).toBe(false);
		expect(operators.greaterThan("1.1", "2")).toBe(false);
		expect(operators.greaterThan("1.9", "2.1")).toBe(false);
		expect(operators.greaterThan("11.9.1", "21.1")).toBe(false);
		expect(operators.greaterThan("1.1", "2.9")).toBe(false);
		expect(operators.greaterThan("1", "2.9")).toBe(false);
		expect(operators.greaterThan("1.1.1", "1.1.2")).toBe(false);
		// greater
		expect(operators.greaterThan("2", "1")).toBe(true);
		expect(operators.greaterThan("2", "1.1")).toBe(true);
		expect(operators.greaterThan("2.1", "1.9")).toBe(true);
		expect(operators.greaterThan("2.9.1", "1.1")).toBe(true);
		expect(operators.greaterThan("2.9", "1")).toBe(true);
		expect(operators.greaterThan("1.1.3", "1.1.2")).toBe(true);
		// equal
		expect(operators.greaterThan("2", "2")).toBe(false);
		expect(operators.greaterThan("2.2", "2.2")).toBe(false);
	});

	test("greaterEqual", () => {
		// less
		expect(operators.greaterEqual("1", "2")).toBe(false);
		expect(operators.greaterEqual("1.1", "2")).toBe(false);
		expect(operators.greaterEqual("11.9", "21.1")).toBe(false);
		expect(operators.greaterEqual("1.9.1", "2.1")).toBe(false);
		expect(operators.greaterEqual("1.1", "2.9")).toBe(false);
		expect(operators.greaterEqual("1", "2.9")).toBe(false);
		expect(operators.greaterThan("1.1.1", "1.1.2")).toBe(false);
		// greater
		expect(operators.greaterEqual("2", "1")).toBe(true);
		expect(operators.greaterEqual("2", "1.1")).toBe(true);
		expect(operators.greaterEqual("2.1", "1.9")).toBe(true);
		expect(operators.greaterEqual("2.9.1", "1.1")).toBe(true);
		expect(operators.greaterEqual("2.9", "1")).toBe(true);
		expect(operators.greaterThan("1.1.3", "1.1.2")).toBe(true);
		// equal
		expect(operators.greaterEqual("2", "2")).toBe(true);
		expect(operators.greaterEqual("2.2", "2.2")).toBe(true);
	});
});
