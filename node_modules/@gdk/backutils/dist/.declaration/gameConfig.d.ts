type EVENTS = "loaded";
export declare enum EEngine {
    ITG = "ITG",
    MTR = "MTR",
    MTP = "MTP"
}
export declare enum EProvider {
    FDJ = "FDJ",
    DKS = "DKS",
    NKT = "NKT",
    VKS = "VKS",
    SVS = "SVS",
    LOR = "LOR"
}
export declare enum EGameProvider {
    FDJ = "FDJ",
    DKS = "DKS",
    NKT = "NKT",
    VKS = "VKS",
    SVS = "SVS",
    LOR = "LOR"
}
export declare enum EBetMode {
    AUTO = "BET_AUTO_CLAIM",
    MANUAL = "BET_MANUAL_CLAIM"
}
export declare enum EJackpotProgressionType {
    Progressive = "PROGRESSIVE",
    Fixed = "FIXED"
}
export interface IAmount {
    value: number;
    currency: string;
    scale?: number;
}
export interface INumberOfStakes {
    min: number;
    max?: number;
}
export interface IAssets {
    themes: Record<string, string>;
    i18n: Record<string, string>;
    behaviours: Record<string, string>;
    services: Record<string, string>;
}
export interface IGameDescription {
    numberOfStakes: INumberOfStakes;
    isJackpot?: boolean;
    isConversion?: boolean;
    jackpotCompatible?: boolean;
    demoCompatible?: boolean;
    replayCompatible?: boolean;
    supportedBetModes?: EBetMode[];
    assets: IAssets;
}
export interface IJackpotParticipation {
    /**
     * full bet amount (ex: 2€)
     */
    gameBetAmount: IAmount;
    /**
     * part of the amount used for the jackpot (ex: 0,02€)
     */
    jackpotBetAmount: IAmount;
    /**
     * number of participations that is bought when using this game bet amount.
     * (ex: 1 participation for 1€ and 2 participations for 2€)
     */
    participationCount: number;
}
export interface IJackpotsConfiguration {
    configurationName: string;
    jackpots: IJackpotDetails[];
    participations: IJackpotParticipation[];
}
export interface IJackpotDetails {
    jackpotExternalId: string;
    progressionType: EJackpotProgressionType;
    initialAmount: IAmount;
}
export interface IJackpotsLotteryConfiguration {
    amount: IAmount;
}
export interface IDemo {
    enabled: boolean;
    forceAuthentication: boolean;
}
export interface IGameConfiguration {
    schemaVersion: number;
    masterGameCode: string;
    masterGameLabel: string;
    masterGameDescription?: string;
    version: string;
    engine: EEngine;
    gameProvider: EGameProvider;
    engineProvider: EProvider;
    gdkVersion: string;
    bridgeVersion: string;
    gameDescription: IGameDescription;
    lotteryCode: string;
    lotteryGameCode: string;
    lotteryGameLabel: string;
    lotteryGameDescription: string;
    stakes: IAmount[];
    jackpots: IJackpotsConfiguration;
    demo: IDemo;
    selectedBetMode?: EBetMode;
    selectedTheme: string;
    selectedLocale: string;
    selectedBehaviour: string;
    modules: any;
    loader: any;
    gameParameters: any;
    behaviourParameters: any;
    defaultStakeIndex?: number;
    main: string;
}
export interface IGameAttrs {
    gameType: string;
    currency: string;
    locale: string;
    theme: string;
}
/**
 * Manag systemJS configuration
 */
export declare class GameConfig {
    private gameDir;
    private gameConf;
    private config;
    private systemJsConfig;
    private watcher;
    private eventEmitter;
    private validator;
    constructor(gameDir: string, gameConf: string);
    /**
     * Stop watching configuration.
     */
    close(): void;
    /**
     * Get raw configuration object.
     */
    getConfig(): IGameConfiguration;
    /**
     * Get masterGameCode.
     */
    get masterGameCode(): string;
    /**
     * Get lottery game code
     */
    get lotteryGameCode(): string;
    /**
     * Get list of services.
     */
    get services(): {
        [index: string]: string;
    };
    /**
     * Returns a SystemJS config based on modules section of game.config.json.
     */
    getSystemJsConfig(): object;
    /**
     * Get game engine.
     */
    get engine(): string;
    /**
     * Get provider.
     */
    get provider(): string;
    /**
     * Returns true if jackpot is enabled.
     */
    get isJackpotEnabled(): boolean;
    get jackpotConfig(): IJackpotsConfiguration;
    /**
     * Load game.config.json file & watch it.
     */
    load(options: {
        watch: boolean;
    }): void;
    private loadConfig;
    /**
     * as watch works in "background" we log error in the method
     */
    private watch;
    private unwatch;
    /**
     * Listen events.
     */
    on(event: EVENTS, listener: () => void): void;
    private emit;
    /**
     * Get current locale value.
     */
    get locale(): string;
    /**
     * Set current locale value.
     */
    set locale(locale: string);
    /**
     * Get currency code
     */
    get currency(): string;
    /**
     * Returns available locales code base on config file assets/i18n configuration
     */
    getAvailableLocales(): string[];
    /**
     * Returns locale file path for a given locale name
     * @locale string
     */
    getLocalePath(locale: string): string;
    /**
     * Returns avaialble themes in config file assets/themes if defined.
     */
    getAvailableThemes(): string[];
    /**
     * Returns theme folder path for a themeName
     * @themeName string
     */
    getThemePath(themeName: string): string;
    /**
     * Get theme.
     */
    get theme(): string;
    /**
     * Get main path.
     */
    get main(): string;
    /**
     * Get modules.
     */
    get modules(): {
        paths: {
            [key: string]: string;
        };
    };
    /**
     * Build custom config for injection in the game loader.
     */
    get attrs(): IGameAttrs;
    private get configFileName();
    private get gdkConfigFileName();
}
export {};
