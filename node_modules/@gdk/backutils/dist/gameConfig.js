"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameConfig = exports.EJackpotProgressionType = exports.EBetMode = exports.EGameProvider = exports.EProvider = exports.EEngine = void 0;
const fs = require("fs-extra");
const path_1 = require("path");
const events_1 = require("events");
const _ = require("lodash");
const logger_1 = require("./logger");
const jsonValidator_1 = require("./jsonValidator");
const GAME_CONFIG_SCHEMA = require("./data/gameConfig.json");
var EEngine;
(function (EEngine) {
    EEngine["ITG"] = "ITG";
    EEngine["MTR"] = "MTR";
    EEngine["MTP"] = "MTP";
})(EEngine = exports.EEngine || (exports.EEngine = {}));
var EProvider;
(function (EProvider) {
    EProvider["FDJ"] = "FDJ";
    EProvider["DKS"] = "DKS";
    EProvider["NKT"] = "NKT";
    EProvider["VKS"] = "VKS";
    EProvider["SVS"] = "SVS";
    EProvider["LOR"] = "LOR";
})(EProvider = exports.EProvider || (exports.EProvider = {}));
var EGameProvider;
(function (EGameProvider) {
    EGameProvider["FDJ"] = "FDJ";
    EGameProvider["DKS"] = "DKS";
    EGameProvider["NKT"] = "NKT";
    EGameProvider["VKS"] = "VKS";
    EGameProvider["SVS"] = "SVS";
    EGameProvider["LOR"] = "LOR";
})(EGameProvider = exports.EGameProvider || (exports.EGameProvider = {}));
var EBetMode;
(function (EBetMode) {
    EBetMode["AUTO"] = "BET_AUTO_CLAIM";
    EBetMode["MANUAL"] = "BET_MANUAL_CLAIM";
})(EBetMode = exports.EBetMode || (exports.EBetMode = {}));
var EJackpotProgressionType;
(function (EJackpotProgressionType) {
    EJackpotProgressionType["Progressive"] = "PROGRESSIVE";
    EJackpotProgressionType["Fixed"] = "FIXED";
})(EJackpotProgressionType = exports.EJackpotProgressionType || (exports.EJackpotProgressionType = {}));
/**
 * Manag systemJS configuration
 */
class GameConfig {
    constructor(gameDir, gameConf) {
        this.gameDir = gameDir;
        this.gameConf = gameConf;
        this.eventEmitter = new events_1.EventEmitter();
        this.validator = new jsonValidator_1.JsonValidator(GAME_CONFIG_SCHEMA);
    }
    /**
     * Stop watching configuration.
     */
    close() {
        this.unwatch();
    }
    /**
     * Get raw configuration object.
     */
    getConfig() {
        return this.config;
    }
    /**
     * Get masterGameCode.
     */
    get masterGameCode() {
        return this.config.masterGameCode;
    }
    /**
     * Get lottery game code
     */
    get lotteryGameCode() {
        return this.config.lotteryGameCode;
    }
    /**
     * Get list of services.
     */
    get services() {
        return this.config.gameDescription.assets.services || {};
    }
    /**
     * Returns a SystemJS config based on modules section of game.config.json.
     */
    getSystemJsConfig() {
        return this.systemJsConfig;
    }
    /**
     * Get game engine.
     */
    get engine() {
        return this.config.engine;
    }
    /**
     * Get provider.
     */
    get provider() {
        return this.config.gameProvider;
    }
    /**
     * Returns true if jackpot is enabled.
     */
    get isJackpotEnabled() {
        return this.config.jackpots && this.config.jackpots.configurationName !== undefined;
    }
    get jackpotConfig() {
        var _a;
        if (!this.config.jackpots) {
            return null;
        }
        // if no jackpots where set in the conf, set default jackpots
        if (!this.config.jackpots.jackpots || this.config.jackpots.jackpots.length === 0) {
            this.config.jackpots.jackpots = [
                {
                    jackpotExternalId: "progressive",
                    progressionType: EJackpotProgressionType.Progressive,
                    initialAmount: {
                        currency: "EUR",
                        value: 5000000,
                        scale: 2,
                    },
                },
                {
                    jackpotExternalId: "fixed",
                    progressionType: EJackpotProgressionType.Fixed,
                    initialAmount: {
                        currency: "EUR",
                        value: 5000,
                        scale: 2,
                    },
                },
            ];
        }
        const participations = (_a = this.config.jackpots.participations) !== null && _a !== void 0 ? _a : [];
        const stakes = this.config.stakes;
        for (const stake of stakes) {
            if (participations.every((participation) => participation.gameBetAmount.value !== stake.value ||
                participation.gameBetAmount.currency !== stake.currency)) {
                participations.push({
                    gameBetAmount: stake,
                    jackpotBetAmount: Object.assign(Object.assign({}, stake), { value: 1 }),
                    participationCount: 1,
                });
            }
        }
        this.config.jackpots.participations = participations;
        return this.config.jackpots;
    }
    /**
     * Load game.config.json file & watch it.
     */
    load(options) {
        this.loadConfig();
        if (options.watch) {
            logger_1.logger.verbose(`Watching for gameConfig`);
            this.watch();
        }
    }
    loadConfig() {
        try {
            logger_1.logger.verbose(`Loading gameConfig`);
            let gdkConf = {};
            if (fs.existsSync(this.gdkConfigFileName)) {
                gdkConf = JSON.parse(fs.readFileSync(this.gdkConfigFileName, { encoding: "utf8" }));
            }
            const conf = JSON.parse(fs.readFileSync(this.configFileName, { encoding: "utf8" }));
            this.config = this.validator.assert(_.merge({}, gdkConf, conf));
            const rawModuleConfig = this.config.modules;
            this.systemJsConfig = Object.assign({
                baseURL: "/game/local",
            }, rawModuleConfig);
            this.emit("loaded");
            logger_1.logger.info(`gameConfig loaded`);
        }
        catch (err) {
            logger_1.logger.error(err.message);
        }
    }
    /**
     * as watch works in "background" we log error in the method
     */
    watch() {
        this.watcher = fs.watch(this.gameDir, (eventType, filename) => {
            if ((0, path_1.basename)(filename) === (0, path_1.basename)(this.gdkConfigFileName) ||
                (0, path_1.basename)(filename) === (0, path_1.basename)(this.configFileName)) {
                // reload config if any of the gameConf files where modified/rename/deleted/created
                this.loadConfig();
            }
        });
    }
    unwatch() {
        if (this.watcher) {
            this.watcher.close();
            this.watcher = undefined;
        }
    }
    /**
     * Listen events.
     */
    on(event, listener) {
        this.eventEmitter.on(event, listener);
    }
    emit(event) {
        this.eventEmitter.emit(event);
    }
    /**
     * Get current locale value.
     */
    get locale() {
        return this.config.selectedLocale;
    }
    /**
     * Set current locale value.
     */
    set locale(locale) {
        this.config.selectedLocale = locale;
    }
    /**
     * Get currency code
     */
    get currency() {
        return this.config.stakes[0].currency;
    }
    /**
     * Returns available locales code base on config file assets/i18n configuration
     */
    getAvailableLocales() {
        const i18n = this.config.gameDescription.assets.i18n;
        return Object.keys(i18n);
    }
    /**
     * Returns locale file path for a given locale name
     * @locale string
     */
    getLocalePath(locale) {
        return this.config.gameDescription.assets.i18n[locale];
    }
    /**
     * Returns avaialble themes in config file assets/themes if defined.
     */
    getAvailableThemes() {
        const themes = this.config.gameDescription.assets.themes;
        return Object.keys(themes);
    }
    /**
     * Returns theme folder path for a themeName
     * @themeName string
     */
    getThemePath(themeName) {
        return this.config.gameDescription.assets.themes[themeName];
    }
    /**
     * Get theme.
     */
    get theme() {
        return this.config.selectedTheme;
    }
    /**
     * Get main path.
     */
    get main() {
        return this.config.main;
    }
    /**
     * Get modules.
     */
    get modules() {
        return this.config.modules;
    }
    /**
     * Build custom config for injection in the game loader.
     */
    get attrs() {
        return {
            gameType: this.engine,
            currency: this.currency,
            locale: this.locale,
            theme: this.theme,
        };
    }
    get configFileName() {
        return (0, path_1.join)(this.gameDir, this.gameConf);
    }
    get gdkConfigFileName() {
        return (0, path_1.join)(this.gameDir, "gdk.conf.json");
    }
}
exports.GameConfig = GameConfig;
//# sourceMappingURL=gameConfig.js.map