"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFullFilesList = exports.concatFile = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
/**
 * Add a file content to another one
 * @param destFileName
 * @param srcFileName
 * @returns promise resolve when concat is done
 */
async function concatFile(destFileName, srcFileName) {
    return new Promise((resolve, reject) => {
        const destStream = (0, fs_extra_1.createWriteStream)(destFileName, {
            flags: "a+",
            encoding: "utf8",
            fd: null,
            mode: 0o400,
            autoClose: true,
        });
        // if there"s no EOL at the end of dstFile the first line of srcFile is concatened to the last line of dstFile
        destStream.write("\n");
        const readStream = (0, fs_extra_1.createReadStream)(srcFileName);
        readStream.pipe(destStream);
        destStream.on("close", resolve);
        destStream.on("error", reject);
        readStream.on("error", reject);
    });
}
exports.concatFile = concatFile;
/**
 * Returns the files list under a directory (including sub directories).
 * Each entry is a full path.
 *
 * @param rootDir
 * @returns promise resolve when full list is set
 */
function getFullFilesList(rootDir) {
    const content = (0, fs_extra_1.readdirSync)(rootDir).map((item) => (0, path_1.join)(rootDir, item));
    let files = [];
    for (const item of content) {
        if ((0, fs_extra_1.statSync)(item).isDirectory()) {
            const filesSubDir = getFullFilesList(item);
            files = files.concat(filesSubDir);
        }
        else {
            files.push(item);
        }
    }
    return files;
}
exports.getFullFilesList = getFullFilesList;
//# sourceMappingURL=helpers.js.map