"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GamePacker = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const tmp = __importStar(require("tmp"));
const backutils_1 = require("@gdk/backutils");
const packageJson_1 = require("../tools/packageJson");
const deliveryGenerator_1 = require("../tools/deliveryGenerator");
const applet_1 = require("./modules/applet");
const configuration_1 = require("./modules/configuration");
const theme_1 = require("./modules/theme");
const i18n_1 = require("./modules/i18n");
/**
 * Game Packer.
 */
class GamePacker {
    /**
     * Pack many games.
     * @param gameConfigPaths
     * @param gameDirectory
     * @param overrideArchives
     */
    static async packManyGames(gameConfigPaths, gameDirectory, overrideArchives) {
        var _a, e_1, _b, _c;
        try {
            for (var _d = true, gameConfigPaths_1 = __asyncValues(gameConfigPaths), gameConfigPaths_1_1; gameConfigPaths_1_1 = await gameConfigPaths_1.next(), _a = gameConfigPaths_1_1.done, !_a;) {
                _c = gameConfigPaths_1_1.value;
                _d = false;
                try {
                    const gameConfigPath = _c;
                    if (!(await GamePacker.packOneGame(gameConfigPath, gameDirectory, overrideArchives))) {
                        return false;
                    }
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = gameConfigPaths_1.return)) await _b.call(gameConfigPaths_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
    }
    /**
     * Pack one game.
     * @param gameConfigPath
     * @param gameDirectory
     * @param overrideArchives
     */
    static packOneGame(gameConfigPath, gameDirectory, overrideArchives) {
        const packer = new GamePacker(gameConfigPath, gameDirectory, overrideArchives);
        return packer._execute();
    }
    constructor(gameConfigPath, gameDirectory, overrideArchives = false) {
        this._gameConfigPath = gameConfigPath;
        this._gameDirectory = gameDirectory;
        this._overrideArchives = overrideArchives;
    }
    async _execute() {
        try {
            backutils_1.logger.info(`Packing game ${this._gameConfigPath}.`);
            await this._setup();
            const appletFiles = await this._preparePackApplet();
            const configFiles = await this._preparePackConfiguration();
            const i18nFiles = await this._preparePackI18ns();
            const themeFiles = await this._preparePackThemes();
            const files = Array.from(new Set([...appletFiles, ...configFiles, ...i18nFiles, ...themeFiles]));
            const deliveryGenerator = new deliveryGenerator_1.DeliveryGenerator(this._deliveryDirectory, {
                assetType: deliveryGenerator_1.EAssetType.applet,
                assetName: this._gameConfiguration.masterGameCode,
                archiveType: deliveryGenerator_1.EArchiveType.tgz,
                version: this._deliveryVersion,
                baseDirectory: this._gameDeliveryBaseDirectory,
                fileBaseName: (0, deliveryGenerator_1.appletDeliveryFilename)(this._gameConfiguration.masterGameCode, this._deliveryVersion),
                overrideArchives: this._overrideArchives,
                files,
            });
            const deliveryFile = await deliveryGenerator.generateDeliveryFile();
            backutils_1.logger.info(`Delivery file: ${deliveryFile}`);
            return true;
        }
        catch (e) {
            backutils_1.logger.error(e.message, e);
            return false;
        }
    }
    async _setup() {
        this._setupConfiguration();
        await this._setupPackageJson();
        await this._setupDeliveriesDirectories();
    }
    _setupConfiguration() {
        this._gameConfiguration = new backutils_1.GameConfig(this._gameDirectory, this._gameConfigPath);
        this._gameConfiguration.load({ watch: false });
    }
    async _setupPackageJson() {
        this._packageJson = new packageJson_1.PackageJson(this._gameDirectory);
        this._deliveryVersion = this._packageJson.version;
    }
    async _setupDeliveriesDirectories() {
        this._deliveryDirectory = (0, path_1.resolve)(this._gameDirectory, deliveryGenerator_1.deliveryFolderName);
        await (0, fs_extra_1.ensureDir)(this._deliveryDirectory);
        this._gameDeliveryBaseDirectory = tmp.dirSync({ unsafeCleanup: true }).name;
        this._gameDeliveryDirectory = (0, path_1.join)(this._gameDeliveryBaseDirectory, this._gameConfiguration.masterGameCode);
        // delete tmp directory on exit
        tmp.setGracefulCleanup();
    }
    async _preparePackApplet() {
        const packer = new applet_1.AppletPacker(this._gameDirectory, (0, path_1.join)(this._gameDeliveryDirectory, this._deliveryVersion), this._deliveryVersion, this._gameConfiguration);
        return packer.preparePack();
    }
    async _preparePackConfiguration() {
        const packer = new configuration_1.ConfigurationPacker(this._gameDirectory, (0, path_1.join)(this._gameDeliveryDirectory, this._deliveryVersion), this._deliveryVersion, this._gameConfiguration);
        return packer.preparePack();
    }
    async _preparePackThemes() {
        const themesName = await this._getThemesName();
        const files = [];
        for (const themeName of themesName) {
            files.push(...(await this._preparePackTheme(themeName)));
        }
        return files;
    }
    async _getThemesName() {
        const themesName = this._gameConfiguration.getAvailableThemes();
        if (themesName.length === 0) {
            throw new Error("Found no theme to pack");
        }
        return themesName;
    }
    async _preparePackTheme(themeName) {
        const packer = new theme_1.ThemePacker(this._gameDirectory, (0, path_1.join)(this._gameDeliveryDirectory, this._deliveryVersion), this._deliveryVersion, this._gameConfiguration, themeName);
        return await packer.preparePack();
    }
    async _preparePackI18ns() {
        const availableLocales = this._gameConfiguration.getAvailableLocales();
        const files = [];
        for (const locale of availableLocales) {
            files.push(...(await this._preparePackI18n(locale)));
        }
        return files;
    }
    async _preparePackI18n(localeName) {
        const packer = new i18n_1.I18nPacker(this._gameDirectory, (0, path_1.join)(this._gameDeliveryDirectory, this._deliveryVersion), this._deliveryVersion, this._gameConfiguration, localeName);
        return await packer.preparePack();
    }
}
exports.GamePacker = GamePacker;
//# sourceMappingURL=packer.js.map