"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultModuleProductionPath = exports.getGsapProductionPath = exports.getEs6PromiseJsProductionPath = exports.getSystemJsProductionPath = exports.selectModule = exports.getModuleProductionPath = exports.getDependencyPath = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const backutils_1 = require("@gdk/backutils");
/**
 * Build path of a dependency for production.
 * @param modPath node_modules path to the dependency file.
 * @param gameDirectory path of the game.
 * @returns the production path of the dependency.
 */
function getDependencyPath(modPath, gameDirectory) {
    const path = (0, path_1.parse)(modPath);
    let dir = (0, path_1.join)(gameDirectory, path.dir);
    let files = (0, fs_extra_1.readdirSync)(dir);
    while (files.filter((f) => f === "package.json").length !== 1) {
        dir = (0, path_1.join)(dir, "..");
        files = (0, fs_extra_1.readdirSync)(dir);
    }
    const { version } = require((0, path_1.join)(dir, "package.json"));
    return getModuleProductionPath(modPath, version);
}
exports.getDependencyPath = getDependencyPath;
/**
 * Dispatch dependency to the correct path production handler.
 * @param modulePath node_modules path to the dependency.
 * @param version desired version of the dependency.
 * @returns the cleaned dependency path.
 */
function getModuleProductionPath(modulePath, version) {
    if (modulePath.match("systemjs")) {
        return getSystemJsProductionPath(modulePath, version);
    }
    else if (modulePath.match("gsap")) {
        return getGsapProductionPath(modulePath, version);
    }
    else if (modulePath.match("es6-promise")) {
        return getEs6PromiseJsProductionPath(modulePath, version);
    }
    else {
        return getDefaultModuleProductionPath(modulePath, version);
    }
}
exports.getModuleProductionPath = getModuleProductionPath;
/**
 * Check if .min of a dependency exists;
 * @param modulePath node_modules path to the dependency.
 * @param minifiedModulePath node_modules path to the minified dependency.
 * @returns min path if it exists, non min path otherwise.
 */
function selectModule(modulePath, minifiedModulePath) {
    if ((0, fs_extra_1.pathExistsSync)(minifiedModulePath)) {
        return minifiedModulePath;
    }
    else {
        backutils_1.logger.warn(`!! Found no minified version for ${modulePath}`);
        return modulePath;
    }
}
exports.selectModule = selectModule;
/**
 * Handle systemjs path for production.
 * @param modulePath node_modules path to the systemjs dependency.
 * @param version desired version of systemjs.
 * @returns the cleaned systemjs path.
 */
function getSystemJsProductionPath(modulePath, version) {
    // we use systemjs src fril because current systemjs production does not support metadata
    return modulePath
        .replace(/\\/g, "/")
        .replace("node_modules/", "")
        .replace("systemjs/", `systemjs/v${version}/`);
}
exports.getSystemJsProductionPath = getSystemJsProductionPath;
/**
 * Handle es6promise path for production.
 * @param modulePath node_modules path to the es6promise dependency.
 * @param version desired version of es6promise.
 * @returns the cleaned es6promise path.
 */
function getEs6PromiseJsProductionPath(modulePath, version) {
    return modulePath
        .replace(/\\/g, "/")
        .replace("node_modules/", "")
        .replace("es6-promise/", `es6-promise/v${version}/`);
}
exports.getEs6PromiseJsProductionPath = getEs6PromiseJsProductionPath;
/**
 * Handle gsap path for production.
 * @param modulePath node_modules path to the gsap dependency.
 * @param version desired version of gsap.
 * @returns the cleaned gsap path.
 */
function getGsapProductionPath(modulePath, version) {
    const minifiedModulePath = modulePath
        .replace(/\\/g, "/")
        .replace("gsap/", "gsap/src/minified/")
        .replace(/\.js$/, ".min.js");
    const productionPath = selectModule(modulePath, minifiedModulePath);
    return productionPath.replace("node_modules/", "").replace("gsap/", `gsap/v${version}/`);
}
exports.getGsapProductionPath = getGsapProductionPath;
/**
 * Handle gdk modules path for production.
 * @param modulePath node_modules path to the gdk dependency.
 * @param version desired version of gdk module.
 * @returns the cleaned gdk path.
 */
function getDefaultModuleProductionPath(modulePath, version) {
    const isGDK = modulePath.match("@gdk");
    const minifiedModulePath = modulePath.replace(/\.js$/, ".min.js");
    let productionPath = selectModule(modulePath, minifiedModulePath);
    productionPath = productionPath
        .replace(/\\/g, "/")
        .replace("node_modules/", "")
        .replace("@gdk", "gdk");
    const insertionPoint = isGDK ? 2 : 1;
    const paths = productionPath.split("/");
    paths.splice(insertionPoint, 0, `v${version}`);
    return paths.join("/");
}
exports.getDefaultModuleProductionPath = getDefaultModuleProductionPath;
//# sourceMappingURL=dependenciesResolver.js.map