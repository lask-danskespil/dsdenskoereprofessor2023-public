"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.I18nPacker = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const aModulePacker_1 = require("./aModulePacker");
/**
 * Pack i18n files.
 */
class I18nPacker extends aModulePacker_1.AModulePacker {
    /**
     * I18nPacker constructor.
     * @param gameDirectory root path of the game to pack.
     * @param deliveryDirectory path for the output file.
     * @param deliveryVersion version of the applet.
     * @param gameConfiguration configuration of the game.
     * @param localeName name of the locale to pack;
     */
    constructor(gameDirectory, deliveryDirectory, deliveryVersion, gameConfiguration, localeName) {
        super(gameDirectory, deliveryDirectory, deliveryVersion, gameConfiguration);
        this._localeName = localeName;
    }
    /**
     * Prepare to pack the i18n.
     * @returns an IFilesList for files to pack when done.
     */
    async preparePack() {
        const srcFileName = this._getPathToLocaleFile();
        const content = this._getLocaleFile(srcFileName);
        const deliveryAssetFilePath = this._createAssetsDirectoryAndWriteLocaleFile(srcFileName, content);
        return [deliveryAssetFilePath];
    }
    /**
     * @returns the packer name.
     */
    _getPackerName() {
        return `i18n ${this._localeName}`;
    }
    _getPathToLocaleFile() {
        const srcFileName = this._gameConfiguration.getLocalePath(this._localeName);
        if (!srcFileName) {
            throw new Error(`No file defined in config file (assets.i18n) for locale ${this._localeName}`);
        }
        return srcFileName;
    }
    _getLocaleFile(srcFileName) {
        /* any subfolder is considered a theme, referencing locales from it is forbidden */
        if ((0, path_1.dirname)(srcFileName) !== ".") {
            throw new Error(`Referencing global assets from a theme is forbidden (${srcFileName})`);
        }
        const content = this._readLocaleFile(srcFileName);
        return this._appendVersionToLocaleFile(content);
    }
    _readLocaleFile(srcFileName) {
        const assetSrcFile = (0, path_1.resolve)(this._gameDirectory, "assets", srcFileName);
        return (0, fs_extra_1.readJSONSync)(assetSrcFile);
    }
    _appendVersionToLocaleFile(content) {
        content.version = this._deliveryVersion;
        return content;
    }
    _createAssetsDirectoryAndWriteLocaleFile(srcFileName, content) {
        (0, fs_extra_1.ensureDirSync)((0, path_1.resolve)(this._deliveryDirectory, "assets"));
        return this._writeLocaleFile(srcFileName, content);
    }
    _writeLocaleFile(srcFileName, content) {
        const deliveryAssetFile = (0, path_1.resolve)(this._deliveryDirectory, "assets", srcFileName);
        (0, fs_extra_1.ensureFileSync)(deliveryAssetFile);
        (0, fs_extra_1.writeJSONSync)(deliveryAssetFile, content);
        return deliveryAssetFile;
    }
}
exports.I18nPacker = I18nPacker;
//# sourceMappingURL=i18n.js.map