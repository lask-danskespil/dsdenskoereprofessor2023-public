"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppletPacker = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const systemjs_builder_1 = __importDefault(require("systemjs-builder"));
const helpers_1 = require("../../tools/helpers");
const aModulePacker_1 = require("./aModulePacker");
/**
 * Pack the applet.
 */
class AppletPacker extends aModulePacker_1.AModulePacker {
    /**
     * Prepare to pack the applet.
     * @returns an IFilesList for files to pack when done.
     */
    async preparePack() {
        const deliveryApplet = (0, path_1.join)(this._deliveryDirectory, "index.js");
        // Pack game into a single file
        await this._bundleBuild(deliveryApplet);
        this._wrapBundle(deliveryApplet);
        await this._appendLoader(deliveryApplet);
        return [deliveryApplet];
    }
    /**
     * @returns the packer name.
     */
    _getPackerName() {
        return "applet";
    }
    /**
     * Bundle the code of the applet with SystemJSPacker.
     * @param destinationFile path of the output.
     * @returns a promise resolved when done.
     */
    async _bundleBuild(destinationFile) {
        // checking reading permission
        (0, fs_extra_1.accessSync)(this._gameConfiguration.main, fs_extra_1.constants.R_OK);
        const bundler = new systemjs_builder_1.default((0, path_1.dirname)(this._gameConfiguration.main));
        bundler.config({ paths: { "*": "*.js" } });
        return bundler.buildStatic(`./${this._gameConfiguration.main}`, destinationFile, {
            externals: Object.keys(this._gameConfiguration.modules.paths).concat("@falcon/bridge"),
            globalDeps: {
                "@falcon/bridge": "falcon",
            },
            sourceMaps: false,
            minify: true,
            mangle: {
                // We must keep function names as we use decorators in game's typescript code.
                keep_fnames: true,
            },
            format: "cjs",
        });
    }
    /**
     * Wrap the previously bundled content in the GDKRegisterGame method.
     * Not sure why this exists.
     * @param bundleFile path of the output.
     * @returns a promise resolved when done.
     */
    _wrapBundle(bundleFile) {
        // Set index.js as SystemJS dynamic module
        const template = (0, fs_extra_1.readFileSync)((0, path_1.join)(__dirname, "../../../static/templateWrapper.js")).toString();
        const bundle = (0, fs_extra_1.readFileSync)(bundleFile).toString();
        const output = template
            .replace("__CONTENT__", bundle)
            .replace("__VERSION__", this._deliveryVersion);
        (0, fs_extra_1.writeFileSync)(bundleFile, output);
    }
    /**
     * Add the loader to the bundle.
     * @param bundleFile path of the output.
     * @returns a promise resolved when done.
     */
    async _appendLoader(bundleFile) {
        await (0, helpers_1.concatFile)(bundleFile, (0, path_1.join)(__dirname, "../../../static/templateLoader.js"));
    }
}
exports.AppletPacker = AppletPacker;
//# sourceMappingURL=applet.js.map