"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationPacker = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const aModulePacker_1 = require("./aModulePacker");
const dependenciesResolver_1 = require("../dependenciesResolver");
/**
 * Pack the configuration.
 */
class ConfigurationPacker extends aModulePacker_1.AModulePacker {
    /**
     * Prepare to pack the configuration.
     * @returns an IFilesList for files to pack when done.
     */
    async preparePack() {
        const configuration = this._handleConfiguration();
        return [configuration];
    }
    /**
     * @returns the packer name.
     */
    _getPackerName() {
        return "config";
    }
    /**
     * Handle regular configuration.
     * @returns the path of the regular configuration in the delivery directory when done.
     */
    _handleConfiguration() {
        const configuration = this._prepareConfiguration();
        const outputPath = (0, path_1.join)(this._deliveryDirectory, "game.conf.json");
        (0, fs_extra_1.writeJSONSync)(outputPath, configuration);
        return outputPath;
    }
    /**
     * Gets the used gdk version.
     * @private
     * @returns the gdk version.
     */
    _getGdkVersion() {
        const frameworkPath = (0, path_1.join)(this._gameDirectory, "node_modules", "@gdk");
        const corePackage = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(frameworkPath, "core", "package.json"), "utf-8"));
        const version = corePackage.version;
        const corePixiPackage = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(frameworkPath, "core-pixi", "package.json"), "utf-8"));
        const gamekitPackage = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(frameworkPath, "gamekit", "package.json"), "utf-8"));
        if (gamekitPackage.version !== version || corePixiPackage.version !== version) {
            throw new Error("All gdk modules aren't at the same version");
        }
        return version;
    }
    /**
     * Gets the used bridge version.
     * @private
     * @returns the bridge version.
     */
    _getBridgeVersion() {
        const bridgePackagePath = (0, path_1.join)(this._gameDirectory, "node_modules", "@falcon", "bridge", "package.json");
        const packageJSON = JSON.parse((0, fs_1.readFileSync)(bridgePackagePath, "utf-8"));
        return packageJSON.version;
    }
    /**
     * Strip & inject revelant data in the configuration.
     * @returns the prepared configuration when done.
     */
    _prepareConfiguration() {
        const configuration = Object.assign({}, this._gameConfiguration.getConfig());
        // delete unecessary keys
        ["main", "baseUrl", "jackpot", "jackpots"].forEach((key) => {
            delete configuration[key];
        });
        if (configuration.modules && configuration.modules.packages) {
            delete configuration.modules.packages;
        }
        // get systemjs path
        if (configuration.loader.systemjs) {
            configuration.loader.systemjs = (0, dependenciesResolver_1.getDependencyPath)(configuration.loader.systemjs, this._gameDirectory);
        }
        // get es6 promise path
        if (configuration.loader["es6-promise"]) {
            configuration.loader["es6-promise"] = (0, dependenciesResolver_1.getDependencyPath)(configuration.loader["es6-promise"], this._gameDirectory);
        }
        // get modules paths
        if (configuration.modules && typeof configuration.modules.paths === "object") {
            for (const mod in configuration.modules.paths) {
                if (!configuration.modules.paths[mod]) {
                    continue;
                }
                configuration.modules.paths[mod] = (0, dependenciesResolver_1.getDependencyPath)(configuration.modules.paths[mod], this._gameDirectory);
            }
        }
        delete configuration.gameDescription.assets.services;
        delete configuration.lotteryCode;
        delete configuration.lotteryGameCode;
        delete configuration.lotteryGameLabel;
        delete configuration.lotteryGameDescription;
        delete configuration.stakes;
        delete configuration.jackpot;
        delete configuration.demo;
        delete configuration.selectedBetMode;
        delete configuration.selectedTheme;
        delete configuration.selectedLocale;
        delete configuration.selectedBehaviour;
        // add schemaVersion
        configuration.schemaVersion = 3;
        // add bridge version if not set
        if (!configuration.bridgeVersion) {
            configuration.bridgeVersion = "2.11.0";
        }
        // add version
        configuration.version = this._deliveryVersion;
        // add framework version
        configuration.gdkVersion = this._getGdkVersion();
        // add bridge version
        configuration.bridgeVersion = configuration.bridgeVersion || this._getBridgeVersion();
        configuration.engineProvider = "FDJ";
        return configuration;
    }
}
exports.ConfigurationPacker = ConfigurationPacker;
//# sourceMappingURL=configuration.js.map