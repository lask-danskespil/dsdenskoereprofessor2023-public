import { join } from "path";
import { createReadStream, createWriteStream, readdirSync, statSync } from "fs-extra";

/**
 * Add a file content to another one
 * @param destFileName
 * @param srcFileName
 * @returns promise resolve when concat is done
 */
export async function concatFile(destFileName: string, srcFileName: string): Promise<void> {
	return new Promise((resolve, reject) => {
		const destStream = createWriteStream(destFileName, {
			flags: "a+",
			encoding: "utf8",
			fd: null,
			mode: 0o400,
			autoClose: true,
		});

		// if there"s no EOL at the end of dstFile the first line of srcFile is concatened to the last line of dstFile
		destStream.write("\n");

		const readStream = createReadStream(srcFileName);
		readStream.pipe(destStream);
		destStream.on("close", resolve);
		destStream.on("error", reject);
		readStream.on("error", reject);
	});
}

/**
 * Returns the files list under a directory (including sub directories).
 * Each entry is a full path.
 *
 * @param rootDir
 * @returns promise resolve when full list is set
 */
export function getFullFilesList(rootDir: string): string[] {
	const content = readdirSync(rootDir).map((item) => join(rootDir, item));
	let files = [];

	for (const item of content) {
		if (statSync(item).isDirectory()) {
			const filesSubDir = getFullFilesList(item);
			files = files.concat(filesSubDir);
		} else {
			files.push(item);
		}
	}

	return files;
}
