import { join, resolve } from "path";
import { ensureDir } from "fs-extra";
import * as tmp from "tmp";
import { GameConfig, logger } from "@gdk/backutils";

import { PackageJson } from "../tools/packageJson";
import {
	appletDeliveryFilename,
	deliveryFolderName,
	EProjectType,
	DeliveryGenerator,
	EArchiveType,
	EAssetType,
} from "../tools/deliveryGenerator";
import { AppletPacker } from "./modules/applet";
import { ConfigurationPacker } from "./modules/configuration";
import { ThemePacker } from "./modules/theme";
import { I18nPacker } from "./modules/i18n";
import type { IFilesList } from "../tools/deliveryGenerator";
import type { IPackageJson } from "../tools/packageJson";

/**
 * Game Packer.
 */
export class GamePacker {
	/**
	 * Pack many games.
	 * @param gameConfigPaths
	 * @param gameDirectory
	 * @param overrideArchives
	 */
	public static async packManyGames(
		gameConfigPaths: string[],
		gameDirectory: string,
		overrideArchives?: boolean
	): Promise<boolean> {
		for await (const gameConfigPath of gameConfigPaths) {
			if (!(await GamePacker.packOneGame(gameConfigPath, gameDirectory, overrideArchives))) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Pack one game.
	 * @param gameConfigPath
	 * @param gameDirectory
	 * @param overrideArchives
	 */
	public static packOneGame(
		gameConfigPath: string,
		gameDirectory: string,
		overrideArchives?: boolean
	): Promise<boolean> {
		const packer = new GamePacker(gameConfigPath, gameDirectory, overrideArchives);
		return packer._execute();
	}

	private _gameConfiguration: GameConfig;
	private _packageJson: PackageJson<IPackageJson>;
	private _deliveryVersion: string;
	private _gameDirectory: string;
	private _gameDeliveryBaseDirectory: string; // temp folder
	private _gameDeliveryDirectory: string; // folder where games files will be prepare for pack
	private _deliveryDirectory: string; // where final archives will be
	private _overrideArchives: boolean;
	private _gameConfigPath: string;

	private constructor(
		gameConfigPath: string,
		gameDirectory: string,
		overrideArchives: boolean = false
	) {
		this._gameConfigPath = gameConfigPath;
		this._gameDirectory = gameDirectory;
		this._overrideArchives = overrideArchives;
	}

	private async _execute(): Promise<boolean> {
		try {
			logger.info(`Packing game ${this._gameConfigPath}.`);
			await this._setup();
			const appletFiles = await this._preparePackApplet();
			const configFiles = await this._preparePackConfiguration();
			const i18nFiles = await this._preparePackI18ns();
			const themeFiles = await this._preparePackThemes();

			const files = Array.from(
				new Set([...appletFiles, ...configFiles, ...i18nFiles, ...themeFiles])
			);

			const deliveryGenerator = new DeliveryGenerator(this._deliveryDirectory, {
				assetType: EAssetType.applet,
				assetName: this._gameConfiguration.masterGameCode,
				archiveType: EArchiveType.tgz,
				version: this._deliveryVersion,
				baseDirectory: this._gameDeliveryBaseDirectory,
				fileBaseName: appletDeliveryFilename(
					this._gameConfiguration.masterGameCode,
					this._deliveryVersion
				),
				overrideArchives: this._overrideArchives,
				files,
			});

			const deliveryFile = await deliveryGenerator.generateDeliveryFile();
			logger.info(`Delivery file: ${deliveryFile}`);
			return true;
		} catch (e) {
			logger.error(e.message, e);
			return false;
		}
	}

	private async _setup(): Promise<void> {
		this._setupConfiguration();
		await this._setupPackageJson();
		await this._setupDeliveriesDirectories();
	}

	private _setupConfiguration(): void {
		this._gameConfiguration = new GameConfig(this._gameDirectory, this._gameConfigPath);
		this._gameConfiguration.load({ watch: false });
	}

	private async _setupPackageJson(): Promise<void> {
		this._packageJson = new PackageJson(this._gameDirectory);
		this._deliveryVersion = this._packageJson.version;
	}

	private async _setupDeliveriesDirectories(): Promise<void> {
		this._deliveryDirectory = resolve(this._gameDirectory, deliveryFolderName);
		await ensureDir(this._deliveryDirectory);

		this._gameDeliveryBaseDirectory = tmp.dirSync({ unsafeCleanup: true }).name;
		this._gameDeliveryDirectory = join(
			this._gameDeliveryBaseDirectory,
			this._gameConfiguration.masterGameCode
		);

		// delete tmp directory on exit
		tmp.setGracefulCleanup();
	}

	private async _preparePackApplet(): Promise<IFilesList> {
		const packer = new AppletPacker(
			this._gameDirectory,
			join(this._gameDeliveryDirectory, this._deliveryVersion),
			this._deliveryVersion,
			this._gameConfiguration
		);
		return packer.preparePack();
	}

	private async _preparePackConfiguration(): Promise<IFilesList> {
		const packer = new ConfigurationPacker(
			this._gameDirectory,
			join(this._gameDeliveryDirectory, this._deliveryVersion),
			this._deliveryVersion,
			this._gameConfiguration
		);
		return packer.preparePack();
	}

	private async _preparePackThemes(): Promise<IFilesList> {
		const themesName = await this._getThemesName();
		const files = [];
		for (const themeName of themesName) {
			files.push(...(await this._preparePackTheme(themeName)));
		}
		return files;
	}

	private async _getThemesName(): Promise<string[]> {
		const themesName = this._gameConfiguration.getAvailableThemes();
		if (themesName.length === 0) {
			throw new Error("Found no theme to pack");
		}
		return themesName;
	}

	private async _preparePackTheme(themeName: string): Promise<IFilesList> {
		const packer = new ThemePacker(
			this._gameDirectory,
			join(this._gameDeliveryDirectory, this._deliveryVersion),
			this._deliveryVersion,
			this._gameConfiguration,
			themeName
		);
		return await packer.preparePack();
	}

	private async _preparePackI18ns(): Promise<IFilesList> {
		const availableLocales = this._gameConfiguration.getAvailableLocales();
		const files = [];
		for (const locale of availableLocales) {
			files.push(...(await this._preparePackI18n(locale)));
		}
		return files;
	}

	private async _preparePackI18n(localeName: string): Promise<IFilesList> {
		const packer = new I18nPacker(
			this._gameDirectory,
			join(this._gameDeliveryDirectory, this._deliveryVersion),
			this._deliveryVersion,
			this._gameConfiguration,
			localeName
		);
		return await packer.preparePack();
	}
}
