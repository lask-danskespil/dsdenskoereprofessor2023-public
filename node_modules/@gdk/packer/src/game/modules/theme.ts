import { join, resolve } from "path";
import { writeJSONSync, readJSONSync, copySync } from "fs-extra";
import type { GameConfig } from "@gdk/backutils";

import { AModulePacker } from "./aModulePacker";
import { getFullFilesList } from "../../tools/helpers";
import type { IFilesList } from "../../tools/deliveryGenerator";

/**
 * Pack theme.
 */
export class ThemePacker extends AModulePacker {
	private _themeName: string;
	private _themeSourceDirectory: string;
	private _themeDeliveryDirectory: string;

	/**
	 * ThemePacker constructor.
	 * @param gameDirectory root path of the game to pack.
	 * @param deliveryDirectory path for the output file.
	 * @param deliveryVersion version of the applet.
	 * @param gameConfiguration configuration of the game.
	 * @param themeName name of the theme to pack;
	 */
	public constructor(
		gameDirectory: string,
		deliveryDirectory: string,
		deliveryVersion: string,
		gameConfiguration: GameConfig,
		themeName: string
	) {
		super(gameDirectory, deliveryDirectory, deliveryVersion, gameConfiguration);
		this._themeName = themeName;
		this._themeSourceDirectory = resolve(
			this._gameDirectory,
			"assets",
			this._gameConfiguration.getThemePath(this._themeName)
		);
		this._themeDeliveryDirectory = resolve(
			this._deliveryDirectory,
			"assets",
			this._gameConfiguration.getThemePath(this._themeName)
		);
	}

	/**
	 * Prepare to pack the theme.
	 * @returns an IFilesList for files to pack when done.
	 */
	public async preparePack(): Promise<IFilesList> {
		// Copy folder and update files.json
		copySync(this._themeSourceDirectory, this._themeDeliveryDirectory);
		this._appendVersionToThemeFile();
		return getFullFilesList(this._themeDeliveryDirectory);
	}

	/**
	 * @returns the packer name.
	 */
	protected _getPackerName(): string {
		return `theme ${this._themeName}`;
	}

	private _appendVersionToThemeFile(): void {
		const filePath = join(this._themeDeliveryDirectory, "files.json");
		const fileContent = readJSONSync(filePath);
		fileContent.version = this._deliveryVersion;
		writeJSONSync(filePath, fileContent);
	}
}
