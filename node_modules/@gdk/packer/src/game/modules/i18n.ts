import { resolve, dirname } from "path";
import { ensureFileSync, writeJSONSync, ensureDirSync, readJSONSync } from "fs-extra";
import type { GameConfig } from "@gdk/backutils";

import { AModulePacker } from "./aModulePacker";
import type { IFilesList } from "../../tools/deliveryGenerator";

interface ILocaleFile {
	version: string;
}

/**
 * Pack i18n files.
 */
export class I18nPacker extends AModulePacker {
	private _localeName: string;

	/**
	 * I18nPacker constructor.
	 * @param gameDirectory root path of the game to pack.
	 * @param deliveryDirectory path for the output file.
	 * @param deliveryVersion version of the applet.
	 * @param gameConfiguration configuration of the game.
	 * @param localeName name of the locale to pack;
	 */
	public constructor(
		gameDirectory: string,
		deliveryDirectory: string,
		deliveryVersion: string,
		gameConfiguration: GameConfig,
		localeName: string
	) {
		super(gameDirectory, deliveryDirectory, deliveryVersion, gameConfiguration);
		this._localeName = localeName;
	}

	/**
	 * Prepare to pack the i18n.
	 * @returns an IFilesList for files to pack when done.
	 */
	public async preparePack(): Promise<IFilesList> {
		const srcFileName = this._getPathToLocaleFile();
		const content = this._getLocaleFile(srcFileName);
		const deliveryAssetFilePath = this._createAssetsDirectoryAndWriteLocaleFile(
			srcFileName,
			content
		);
		return [deliveryAssetFilePath];
	}

	/**
	 * @returns the packer name.
	 */
	protected _getPackerName(): string {
		return `i18n ${this._localeName}`;
	}

	private _getPathToLocaleFile(): string {
		const srcFileName = this._gameConfiguration.getLocalePath(this._localeName);

		if (!srcFileName) {
			throw new Error(
				`No file defined in config file (assets.i18n) for locale ${this._localeName}`
			);
		}

		return srcFileName;
	}

	private _getLocaleFile(srcFileName: string): ILocaleFile {
		/* any subfolder is considered a theme, referencing locales from it is forbidden */
		if (dirname(srcFileName) !== ".") {
			throw new Error(`Referencing global assets from a theme is forbidden (${srcFileName})`);
		}
		const content = this._readLocaleFile(srcFileName);
		return this._appendVersionToLocaleFile(content);
	}

	private _readLocaleFile(srcFileName: string): ILocaleFile {
		const assetSrcFile = resolve(this._gameDirectory, "assets", srcFileName);
		return readJSONSync(assetSrcFile);
	}

	private _appendVersionToLocaleFile(content: ILocaleFile): ILocaleFile {
		content.version = this._deliveryVersion;
		return content;
	}

	private _createAssetsDirectoryAndWriteLocaleFile(
		srcFileName: string,
		content: ILocaleFile
	): string {
		ensureDirSync(resolve(this._deliveryDirectory, "assets"));
		return this._writeLocaleFile(srcFileName, content);
	}

	private _writeLocaleFile(srcFileName: string, content: ILocaleFile): string {
		const deliveryAssetFile = resolve(this._deliveryDirectory, "assets", srcFileName);
		ensureFileSync(deliveryAssetFile);
		writeJSONSync(deliveryAssetFile, content);
		return deliveryAssetFile;
	}
}
