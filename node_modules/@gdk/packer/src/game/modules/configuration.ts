import { readFileSync } from "fs";
import { join } from "path";
import { writeJSONSync } from "fs-extra";

import { AModulePacker } from "./aModulePacker";
import { getDependencyPath } from "../dependenciesResolver";
import type { IFilesList } from "../../tools/deliveryGenerator";

/**
 * Pack the configuration.
 */
export class ConfigurationPacker extends AModulePacker {
	/**
	 * Prepare to pack the configuration.
	 * @returns an IFilesList for files to pack when done.
	 */
	public async preparePack(): Promise<IFilesList> {
		const configuration = this._handleConfiguration();
		return [configuration];
	}

	/**
	 * @returns the packer name.
	 */
	protected _getPackerName(): string {
		return "config";
	}

	/**
	 * Handle regular configuration.
	 * @returns the path of the regular configuration in the delivery directory when done.
	 */
	private _handleConfiguration(): string {
		const configuration = this._prepareConfiguration();
		const outputPath = join(this._deliveryDirectory, "game.conf.json");
		writeJSONSync(outputPath, configuration);
		return outputPath;
	}

	/**
	 * Gets the used gdk version.
	 * @private
	 * @returns the gdk version.
	 */
	private _getGdkVersion(): string {
		const frameworkPath = join(this._gameDirectory, "node_modules", "@gdk");
		const corePackage = JSON.parse(
			readFileSync(join(frameworkPath, "core", "package.json"), "utf-8")
		);
		const version = corePackage.version;

		const corePixiPackage = JSON.parse(
			readFileSync(join(frameworkPath, "core-pixi", "package.json"), "utf-8")
		);
		const gamekitPackage = JSON.parse(
			readFileSync(join(frameworkPath, "gamekit", "package.json"), "utf-8")
		);

		if (gamekitPackage.version !== version || corePixiPackage.version !== version) {
			throw new Error("All gdk modules aren't at the same version");
		}

		return version;
	}

	/**
	 * Gets the used bridge version.
	 * @private
	 * @returns the bridge version.
	 */
	private _getBridgeVersion(): string {
		const bridgePackagePath = join(
			this._gameDirectory,
			"node_modules",
			"@falcon",
			"bridge",
			"package.json"
		);
		const packageJSON = JSON.parse(readFileSync(bridgePackagePath, "utf-8"));

		return packageJSON.version;
	}

	/**
	 * Strip & inject revelant data in the configuration.
	 * @returns the prepared configuration when done.
	 */
	private _prepareConfiguration(): any {
		const configuration: any = Object.assign({}, this._gameConfiguration.getConfig());

		// delete unecessary keys
		["main", "baseUrl", "jackpot", "jackpots"].forEach((key) => {
			delete configuration[key];
		});

		if (configuration.modules && configuration.modules.packages) {
			delete configuration.modules.packages;
		}
		// get systemjs path
		if (configuration.loader.systemjs) {
			configuration.loader.systemjs = getDependencyPath(
				configuration.loader.systemjs,
				this._gameDirectory
			);
		}

		// get es6 promise path
		if (configuration.loader["es6-promise"]) {
			configuration.loader["es6-promise"] = getDependencyPath(
				configuration.loader["es6-promise"],
				this._gameDirectory
			);
		}

		// get modules paths
		if (configuration.modules && typeof configuration.modules.paths === "object") {
			for (const mod in configuration.modules.paths) {
				if (!configuration.modules.paths[mod]) {
					continue;
				}
				configuration.modules.paths[mod] = getDependencyPath(
					configuration.modules.paths[mod],
					this._gameDirectory
				);
			}
		}

		delete configuration.gameDescription.assets.services;
		delete configuration.lotteryCode;
		delete configuration.lotteryGameCode;
		delete configuration.lotteryGameLabel;
		delete configuration.lotteryGameDescription;
		delete configuration.stakes;
		delete configuration.jackpot;
		delete configuration.demo;
		delete configuration.selectedBetMode;
		delete configuration.selectedTheme;
		delete configuration.selectedLocale;
		delete configuration.selectedBehaviour;

		// add schemaVersion
		configuration.schemaVersion = 3;

		// add bridge version if not set
		if (!configuration.bridgeVersion) {
			configuration.bridgeVersion = "2.11.0";
		}

		// add version
		configuration.version = this._deliveryVersion;

		// add framework version
		configuration.gdkVersion = this._getGdkVersion();

		// add bridge version
		configuration.bridgeVersion = configuration.bridgeVersion || this._getBridgeVersion();

		configuration.engineProvider = "FDJ";

		return configuration;
	}
}
