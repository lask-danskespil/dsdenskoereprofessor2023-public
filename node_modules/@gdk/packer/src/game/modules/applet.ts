import { join, dirname } from "path";
import { accessSync, constants, readFileSync, writeFileSync } from "fs-extra";
import SystemJSPacker from "systemjs-builder";

import { concatFile } from "../../tools/helpers";
import { AModulePacker } from "./aModulePacker";
import type { IFilesList } from "../../tools/deliveryGenerator";

/**
 * Pack the applet.
 */
export class AppletPacker extends AModulePacker {
	/**
	 * Prepare to pack the applet.
	 * @returns an IFilesList for files to pack when done.
	 */
	public async preparePack(): Promise<IFilesList> {
		const deliveryApplet = join(this._deliveryDirectory, "index.js");

		// Pack game into a single file
		await this._bundleBuild(deliveryApplet);
		this._wrapBundle(deliveryApplet);
		await this._appendLoader(deliveryApplet);

		return [deliveryApplet];
	}

	/**
	 * @returns the packer name.
	 */
	protected _getPackerName(): string {
		return "applet";
	}

	/**
	 * Bundle the code of the applet with SystemJSPacker.
	 * @param destinationFile path of the output.
	 * @returns a promise resolved when done.
	 */
	private async _bundleBuild(destinationFile: string): Promise<void> {
		// checking reading permission
		accessSync(this._gameConfiguration.main, constants.R_OK);

		const bundler = new SystemJSPacker(dirname(this._gameConfiguration.main));
		bundler.config({ paths: { "*": "*.js" } });
		return bundler.buildStatic(`./${this._gameConfiguration.main}`, destinationFile, {
			externals: Object.keys(this._gameConfiguration.modules.paths).concat("@falcon/bridge"),
			globalDeps: {
				"@falcon/bridge": "falcon",
			},
			sourceMaps: false,
			minify: true,
			mangle: {
				// We must keep function names as we use decorators in game's typescript code.
				keep_fnames: true,
			},
			format: "cjs",
		});
	}

	/**
	 * Wrap the previously bundled content in the GDKRegisterGame method.
	 * Not sure why this exists.
	 * @param bundleFile path of the output.
	 * @returns a promise resolved when done.
	 */
	private _wrapBundle(bundleFile: string): void {
		// Set index.js as SystemJS dynamic module
		const template = readFileSync(join(__dirname, "../../../static/templateWrapper.js")).toString();
		const bundle = readFileSync(bundleFile).toString();
		const output = template
			.replace("__CONTENT__", bundle)
			.replace("__VERSION__", this._deliveryVersion);
		writeFileSync(bundleFile, output);
	}

	/**
	 * Add the loader to the bundle.
	 * @param bundleFile path of the output.
	 * @returns a promise resolved when done.
	 */
	private async _appendLoader(bundleFile: string): Promise<void> {
		await concatFile(bundleFile, join(__dirname, "../../../static/templateLoader.js"));
	}
}
