import * as fs from "fs-extra";
import * as path from "path";
import { spawn } from "child_process";
import { logger } from "@gdk/backutils";

import {
	scriptDeliveryFileName,
	deliveryFolderName,
	EProjectType,
	DeliveryGenerator,
	EAssetType,
	EArchiveType,
	EEngines,
} from "../tools/deliveryGenerator";
import { PackageJson } from "../tools/packageJson.js";

export interface IModelConfigOptions {
	/**
	 * Allow to override masterGameCode
	 * If not set MasterGameCode from the package.json of the script project will be used
	 */
	masterGameCode?: string;
	/**
	 * Information used for FDJ for PAM declaration (ECO_CODE)
	 * @default 'MTR'
	 * Use 'PRS' for presto games
	 */
	engine?: string;
	/**
	 * Must be set to true for gamification games
	 * @default false
	 */
	gamif?: boolean;
	/**
	 * Information used for FDJ for PAM declaration (EXS_TYPE)
	 * @default 'Motors'
	 */
	type?: string;
	/**
	 * Information used for FDJ for PAM declaration (EXS_NAME & EXS_DESCRIPTION)
	 * If not set, the source for EXS_NAME and EXS_DESCRIPTION will be the script variantCode
	 * EXS_NAME will be the source toLowerCase
	 * EXS_DESCRIPTION will be the source toUpperCase
	 */
	fdjBoxName?: string;
	/**
	 * Information used for FDJ for PAM declaration (EXS_CODE)
	 * Mandatory to generate FDJ PAM declaration file
	 */
	trigram?: string;
	/**
	 * Information used for FDJ for PAM declaration (EXS_ACCOUNT_NUMBER)
	 * Mandatory to generate FDJ PAM declaration file
	 */
	bic?: number;
	/**
	 * Information used for FDJ for PAM declaration (EXS_VARIANT_CODE)
	 * Mandatory to generate FDJ PAM declaration file
	 */
	bicVariant?: number;
	/**
	 * Information used for FDJ for PAM declaration (SIT_CODE)
	 * @default 'FDJ_WEB'
	 */
	range?: string;
}
export interface IModelOptions extends IModelConfigOptions {
	name: string;
	directory: string;
}

export class ModelPacker {
	public static includeSql: boolean = true;
	public static deliveryDir: string = deliveryFolderName;

	/**
	 * Pack several model
	 * @param games
	 */
	public static async packMany(games: IModelOptions[]): Promise<boolean> {
		const npmCMD = process.platform === "win32" ? "npm.cmd" : "npm";
		await this._spawn(npmCMD, ["run", "generate", "--", "production"]);

		for await (const name of games) {
			if (!ModelPacker.packOne(name)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Pack one
	 * @param options
	 */
	public static async packOne(options: IModelOptions): Promise<boolean> {
		try {
			if (!fs.existsSync(this.deliveryDir)) {
				fs.mkdirSync(this.deliveryDir, 0o744);
			}

			const packageJson = new PackageJson(".");
			const deliveryVersion = packageJson.version;

			// creates tmpDir
			const tmpDir = fs.mkdtempSync(path.join(this.deliveryDir, "tmp"));

			// Copy specifications if any
			const specDir = path.join(options.directory, "specifications");
			if (fs.existsSync(specDir)) {
				fs.copySync(specDir, path.join(tmpDir, "specifications"));
			}

			// Copy betList
			const betListFile = path.join("dist", options.directory, "betList.json");
			fs.copySync(betListFile, path.join(tmpDir, "betList.json"));

			// Copy model
			const modelFile = path.join("dist", options.directory, "model.xml");
			fs.copySync(modelFile, path.join(tmpDir, "model.xml"));

			// Calculate model hash
			const hash = (await import("crypto"))
				.createHash("sha1")
				.update(fs.readFileSync(modelFile))
				.digest("hex");

			if (this.includeSql && options.trigram && options.bic && options.bicVariant) {
				fs.writeFileSync(path.join(tmpDir, "usr_insert.sql"), ModelPacker.generateSql(options));
				fs.writeFileSync(
					path.join(tmpDir, "execute_request.json"),
					ModelPacker.generateSchema(options)
				);
			}

			fs.writeFileSync(
				path.join(tmpDir, "game.conf.deprecated.json"),
				ModelPacker.generacteGameConfDeprecated(options)
			);

			const files = fs.readdirSync(tmpDir).map((each) => path.resolve(tmpDir, each));

			logger.verbose("Creating final archive...");

			const deliveryGenerator = new DeliveryGenerator(this.deliveryDir, {
				assetType: EAssetType.script,
				engine: EEngines.mtr,
				assetName: options.name,
				archiveType: EArchiveType.tgz,
				version: deliveryVersion,
				baseDirectory: tmpDir,
				fileBaseName: scriptDeliveryFileName(options.masterGameCode, options.name, deliveryVersion),
				overrideArchives: true,
				files,
				data: {
					modelPath: "model.xml",
					betListPath: "betList.json",
					xsdVersion: "1.3",
					hash,
					gamif: options.gamif || false,
					masterGameCode: options.masterGameCode,
				},
			});

			const deliveryFile = await deliveryGenerator.generateDeliveryFile();
			logger.info(`Delivery file: ${deliveryFile}`);
			fs.removeSync(tmpDir);
			return true;
		} catch (e) {
			logger.error(e.message, e);
			return false;
		}
	}

	private static _spawn(cmd: string, args: string[]): Promise<void> {
		logger.info(`Executing command: ${cmd} ${args.join(" ")}`);
		const child = spawn(cmd, args);
		child.stdout.on("data", (data) => process.stdout.write(data));
		child.stderr.on("data", (data) => process.stderr.write(data));
		return new Promise((pResolve, pReject) =>
			child.on("close", (code) => {
				if (code === 0) {
					pResolve();
				} else {
					pReject(`Process returned non-zero exit code: ${code}`);
				}
			})
		);
	}

	private static generateSchema(options: IModelOptions): string {
		return `{
\t"$schema": "http://json-schema.org/draft-04/schema#",
\t"title": "${options.name} execute request",
\t"properties": {
\t\t"evn": {
\t\t\t"type": "string",
\t\t\t "minLength": 3,
\t\t\t "maxLength": 3
\t\t},
\t\t"sid": {
\t\t\t"type": "integer"
\t\t},
\t\t"prm": {
\t\t\t"type": "object"
\t\t}
\t},
\t"required": [
\t\t"evn",
\t\t"sid"
\t]
}
`;
	}

	private static generacteGameConfDeprecated(options: IModelOptions): string {
		return `{
    "gameName": "${options.name}",
    "engineName": "MTR",
    "gameType": "MTR",
    "category": "MTRGAME",
    "provider": "FDJ",
    "service": {
        "name": "${options.name}"
    },
    "demo": false,
    "locale": {
        "available": [
            "fr-FR",
            "en-US"
        ],
        "default": "fr-FR",
        "current": "fr-FR",
        "currency": {
            "available": [
                "EUR"
            ],
            "current": "EUR",
            "default": "EUR"
        },
        "fileList": [
            {}
        ]
    },
    "logo": {},
    "currency": {
        "available": [
            "EUR"
        ],
        "current": "EUR",
        "default": "EUR"
    },
    "theme": {
        "available": [
            "default"
        ],
        "current": "default"
    }
}
`;
	}

	private static generateSql(options: IModelOptions): string {
		return `UPDATE REF_USR_EXTERNAL_SERVICE SET
EXS_NAME = '${options.fdjBoxName.toLocaleLowerCase()}',
EXS_DESCRIPTION = '${options.fdjBoxName.toUpperCase()}',
EXS_TYPE = '${options.type || "Motors"}',
EXS_ACCOUNT_NUMBER = '${options.bic}',
EXS_VARIANT_CODE = '${options.bicVariant}',
EXS_CREATED = SYSDATE,
EXS_UPDATED = SYSDATE
WHERE ECO_CODE ='${options.engine || "MTR"}' AND EXS_CODE = '${options.trigram}';

INSERT INTO REF_USR_EXTERNAL_SERVICE (ECO_CODE, EXS_CODE, EXS_NAME, EXS_DESCRIPTION, EXS_TYPE, EXS_ACCOUNT_NUMBER, EXS_VARIANT_CODE, EXS_CREATED, EXS_UPDATED)
VALUES ('${options.engine || "MTR"}', '${
			options.trigram
		}', '${options.fdjBoxName.toLocaleLowerCase()}', '${options.fdjBoxName.toUpperCase()}', '${
			options.type || "Motors"
		}', '${options.bic}', '${options.bicVariant}', SYSDATE, SYSDATE);

INSERT INTO USR_SITE_OFFER (ECO_CODE, EXS_CODE, SIT_CODE, SIO_STATUS, SIO_CREATED, SIO_UPDATED)
VALUES ('${options.engine || "MTR"}', '${options.trigram}', '${
			options.range || "FDJ_WEB"
		}', 'C', SYSDATE, SYSDATE);

COMMIT;`;
	}
}
