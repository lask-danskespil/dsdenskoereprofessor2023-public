import * as fs from "fs-extra";
import path from "path";
import Mocha from "mocha";
import { logger } from "@gdk/backutils";

export function executeTests(gamesToRun: string[], color: boolean = false): void {
	const mocha: Mocha = new Mocha({
		reporter: "spec",
		color,
		globals: ["gdkLogLevel"],
	});
	const testDirectory = path.join(".build", "test");

	const filesToTest: string[] = [];
	for (const gameName of gamesToRun) {
		filesToTest.push(...findTestFiles(gameName));
	}

	// set global gdkLogLevel in order to restore it in mocha test files
	global.gdkLogLevel = logger.level;

	for (const file of filesToTest) {
		mocha.addFile(file);
	}

	logger.info(`Manual test run : mocha ${filesToTest.join(" ")}`);
	mocha.run((failures) => {
		if (failures > 0) {
			logger.error("Test run failed");
			process.exitCode = Number(failures);
		}
	});
}

export class GameTestFileNotFoundError extends Error {
	public constructor(gameName: string) {
		super(
			`No test file found for game ${gameName}.` +
				` Expected a "${gameName}" directory or a "${gameName}.spec.ts" file in test folder`
		);
		this.name = "GameTestFileNotFoundError";
	}
}

function findTestFiles(gameName: string): string[] {
	const testDirectory = path.join(".build", "test", gameName);

	if (fs.existsSync(testDirectory) && fs.lstatSync(testDirectory).isDirectory()) {
		return getTestFilesRecursively(testDirectory);
	}

	const testFile = path.join(".build", "test", `${gameName}.spec.ts`);
	if (fs.existsSync(testFile) && fs.lstatSync(testFile).isFile()) {
		return [testFile];
	}

	throw new GameTestFileNotFoundError(gameName);
}

/**
 * get all test files in a directory tree
 */
function getTestFilesRecursively(directory: string): string[] {
	const files: string[] = [];

	for (const file of fs.readdirSync(directory)) {
		if (fs.lstatSync(path.join(directory, file)).isDirectory()) {
			files.push(...getTestFilesRecursively(path.join(directory, file)));
		} else if (file.substr(-7) === "spec.js") {
			// it's a common test file
			files.push(path.join(directory, file));
		}
	}

	return files;
}
