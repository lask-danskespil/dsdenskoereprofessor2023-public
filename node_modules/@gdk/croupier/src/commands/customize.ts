import fs from "fs-extra";
import type { ICroupierConfig, IRankConfig } from "@gdk/backutils";

import { CroupierImporter } from "./import";

export interface ICustomizationConfig {
	path: string;
	code: string;
	masterGameCode?: string;
	description?: string;
	renewal?: number;
	baseStake?: number;
	ranks?: Array<{
		id: number;
		quantity?: number;
		renewal?: number;
		prizeType?: string;
		prizeDescription?: string;
	}>;
}

export const customize = async (conf: ICustomizationConfig): Promise<ICroupierConfig> => {
	if (!fs.existsSync(conf.path)) {
		throw new Error(`Croupier configuration or croupier to import : ${conf.path} not found.`);
	}

	let croupierConfig;
	if (/\.json$/.test(conf.path)) {
		croupierConfig = fs.readJsonSync(conf.path);
	} else {
		croupierConfig = await new CroupierImporter().import(conf.path);
	}

	croupierConfig.code = conf.code;
	croupierConfig.masterGameCode = conf.masterGameCode ?? croupierConfig.masterGameCode;
	croupierConfig.baseStake = conf.baseStake ?? croupierConfig.baseStake;
	croupierConfig.description = conf.description ?? croupierConfig.description;
	if (conf.renewal !== undefined) {
		croupierConfig.renewal = conf.renewal ?? undefined;
	}

	if (conf.ranks) {
		for (const rank of conf.ranks) {
			const croupierConfigRank: IRankConfig = croupierConfig.ranks.find((r) => r.id === rank.id);
			if (rank.renewal !== undefined) {
				croupierConfigRank.renewal = rank.renewal ?? undefined;
			}
			croupierConfigRank.prizeType = rank.prizeType ?? croupierConfigRank.prizeType;
			croupierConfigRank.prizeDescription =
				rank.prizeDescription ?? croupierConfigRank.prizeDescription;

			// work with quantities
			if (rank.quantity !== undefined) {
				const nbTickets = croupierConfigRank.tickets.length;
				const rankQuantity = croupierConfigRank.tickets.reduce<number>(
					(total, ticket) => total + ticket.quantity,
					0
				);
				const factor = rank.quantity / rankQuantity;

				let remaining = rank.quantity;
				for (const ticket of croupierConfigRank.tickets) {
					ticket.quantity = Math.floor(factor * ticket.quantity);
					remaining -= ticket.quantity;
				}
				for (let i = 0; i < remaining; i++) {
					croupierConfigRank.tickets[i].quantity++;
				}
			}
		}
	}

	return croupierConfig;
};
