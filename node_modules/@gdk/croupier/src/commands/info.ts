import { Workbook } from "exceljs";
import * as path from "path";
import * as lodash from "lodash";
import type { Row } from "exceljs";
import type { ICroupier } from "@gdk/backutils";

export async function createReport(croupier: ICroupier): Promise<Workbook> {
	const report = new Workbook();
	await report.xlsx.readFile(path.join(__dirname, "../../resources/tpl-report.xlsx"));
	const ws = report.getWorksheet("Report");

	const headerRow = 2;
	const infoRow = 8;
	const tdlRow = 13;

	// preprocess
	const ranksInfo = croupier.ranks.map((rank) => {
		return {
			quantity: rank.tickets.reduce((a, t) => a + t.quantity, 0),
			multiplier: rank.factor.numerator / rank.factor.denominator,
			combinations: rank.tickets.length,
			id: rank.id,
			prizeType: rank.prizeType || "",
			prizeDescription: rank.prizeDescription || "",
		};
	});

	const combinations = ranksInfo.reduce((a, r) => a + r.combinations, 0);
	const totalQuantity = ranksInfo.reduce((a, r) => a + r.quantity, 0);
	const losingQuantity =
		lodash.sum(ranksInfo.map((r) => (r.multiplier === 0 ? r.quantity : 0))) ?? 0;
	const totalValue = ranksInfo.reduce((a, r) => a + r.quantity * r.multiplier, 0);

	/*
	ws.getCell("C7").dataValidation = {
		type: "list",
		allowBlank: false,
		formulae: [`"${croupier.stakes.map((s) => s.value).join(",")}"`],
	};
	ws.getCell("C7").value = croupier.stakes[0].value;
	*/

	// HEADER
	// master game code
	ws.getRow(headerRow).getCell(3).value = `${croupier.masterGameCode}`;
	// croupier code
	ws.getRow(headerRow + 1).getCell(3).value = `${croupier.code}`;
	// version
	ws.getRow(headerRow + 2).getCell(3).value = `${croupier.productVersion}`;
	// report date
	ws.getRow(headerRow + 3).getCell(3).value = new Date(croupier.date);
	// base stake
	ws.getRow(headerRow + 4).getCell(3).value = croupier.baseStake;

	// INFO
	// number of combinations
	ws.getRow(infoRow).getCell(3).value = combinations;
	// number of tickets
	ws.getRow(infoRow + 1).getCell(3).value = totalQuantity;
	// number of winning tickets
	ws.getRow(infoRow + 2).getCell(3).value = totalQuantity - losingQuantity;

	// Trj
	ws.getRow(infoRow).getCell(5).value = totalValue / totalQuantity;
	// Odds of winning
	ws.getRow(infoRow + 1).getCell(5).value = totalQuantity / (totalQuantity - losingQuantity); // odds of winning

	// TDL
	let row: Row;
	const modelRow: Row = ws.getRow(tdlRow);
	for (let i = 0; i < croupier.ranks.length; i++) {
		row = ws.getRow(tdlRow + i);
		for (let col = 2; col < 9; col++) {
			row.getCell(col).style = modelRow.getCell(col).style;
		}
		row.getCell(2).value = ranksInfo[i].id; // rank id
		row.getCell(3).value = ranksInfo[i].multiplier; // rank multiplier
		row.getCell(4).value = ranksInfo[i].quantity; // rank quantity
		row.getCell(5).value = ranksInfo[i].combinations; // combinations
		row.getCell(6).value = (ranksInfo[i].quantity * ranksInfo[i].multiplier) / totalValue; // payout ratio
		row.getCell(7).value = ranksInfo[i].prizeType || ""; // rank prizeType
		row.getCell(8).value = ranksInfo[i].prizeDescription || ""; // rank description
	}

	// remove useless template lines
	for (let i = 0; i < 100; i++) {
		row = ws.getRow(tdlRow + croupier.ranks.length + i);
		row.splice(1, 10);
		row.commit();
	}
	return report;
}
