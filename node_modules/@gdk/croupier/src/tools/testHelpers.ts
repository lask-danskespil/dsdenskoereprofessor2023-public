import { strict as assert } from "assert";
import { logger } from "@gdk/backutils";
import type { AssertPredicate } from "assert";

/**
 * Ensure given function or method fails with given arguments, with an error matching
 * given predicate.
 * If used as a decorator, should be used on a static method.
 */
export function proof(description: string, predicate: AssertPredicate, ...args: any[]): any {
	return (target: any, propertyKey?: string, descriptor?: PropertyDescriptor): void => {
		let targetDescr: string;
		let fun: (..._args: any[]) => any;

		if (propertyKey === undefined && descriptor === undefined) {
			fun = target;
			targetDescr = `function ${target.name}`;
		} else {
			fun = target[propertyKey];
			targetDescr = `method ${target.constructor.name}.${propertyKey}`;

			const isStatic = target.prototype !== undefined;
			if (!isStatic) {
				throw new Error(
					`proof helper can only be called on static methods` +
						` (was called on ${targetDescr} which does not look static)`
				);
			}
		}

		assert.throws(
			() => {
				fun.call(target, ...args);
			},
			predicate,
			`proof "${description}" failed for ${targetDescr}: ` +
				`was supposed to fail with arguments: ${JSON.stringify(args)} but didn't`
		);

		logger.debug(`${targetDescr}: ran proof "${description}"`);
	};
}
