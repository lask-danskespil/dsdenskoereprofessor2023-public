import * as fs from "fs";
import * as path from "path";
import * as lodash from "lodash";

export type LoadedClass<T> = new (...args: any) => T;

export function loadClass<T>(modulePath: string): LoadedClass<T> {
	if (!fs.existsSync(modulePath)) {
		throw new Error(`Couldnt load module at path ${modulePath}`);
	}

	const _module = require(modulePath);
	const lowerClassName = path.basename(modulePath, ".js").toLowerCase();
	const classNames = Object.keys(_module).filter((name) => {
		return name.toLowerCase() === lowerClassName && _module[name] instanceof Function;
	});

	if (classNames.length !== 1) {
		let message = `couldn't find main class of "${modulePath}"`;
		if (classNames.length > 1) {
			message += `: too many possible classNames: ${classNames.join(", ")}`;
		}
		throw new Error(message);
	}

	const _class = _module[classNames[0]];
	return _class as LoadedClass<T>;
}
