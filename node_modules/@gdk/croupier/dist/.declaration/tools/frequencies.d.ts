export interface IScenario {
    v: string | number;
    q: number;
    [key: string]: any;
}
export type IFrequencies = {
    [scenario: string]: number;
} & {
    samples?: {
        [scenario: string]: {
            [key: string]: any;
        };
    };
};
/**
 * Compute frequencies from a list of scenarios.
 *
 * @param scenarios: list of weighted values (number or string). Same values can appear twice in
 * the list, their weights will be added
 * @returns a hash with value as keys, and frequencies (percent) as value
 *
 * You can add other keys / values than "v" and "q" in the scenarios. If you do, the first scenario to
 * be registered for a given value withh be kept as a sample, displayed by the describe function of this
 * module.
 *
 *
 * example: getFrequencies([
 *    { v: "scenario 1", q: 10, symbol: "ABBSSC|"},
 *    { v: "scenario 2", q: 10 },
 *    { v: "scenario 2", q: 5, symbol: "AABBSH|0,1,5" }
 *  ]);
 *
 * will return  { "scenario 1": 40,
 *                "scenario 2": 60,
 *                samples: { "scenario 1": { symbol: "ABBSSC|" },
 *                            scenario 2": { symbol: "AABBSH|0,1,5" } }}
 */
export declare function compute(scenarios: IScenario[]): IFrequencies;
/**
 * Return a string representing the given frequencies.
 *
 * @param freqs: a frequency object (key are scenarios, values are pecents)
 * @param padLeft: number of spaces used to pad the list of frequencies
 * @returns string representing the given frequencies
 */
export declare function describe(freqs: IFrequencies, padLeft?: number): string;
/**
 * Makes an assertion on frequency equality.
 *
 * @param actual: actual frequencies
 * @param exp: expected frequencies
 * @param tolerance: frequency gap (in percent) allowed between actual / expected (below / over).
 *     for exemple, tolerance = 1.5 means for an expected 50% frequency, 48.5 is an acceptable
 *     value, so is 51.5, while 52% is not.
 * @returns string representing the given frequencies
 */
export declare function assert(actual: IFrequencies, exp: IFrequencies, tolerance?: number): void;
