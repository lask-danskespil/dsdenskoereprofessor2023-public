export declare enum EUniverseType {
    range = "range",
    weight = "weight"
}
export interface IWeightedValue<T> {
    value: T;
    weight?: number;
}
export declare class WeightedValue<T> implements IWeightedValue<T> {
    private _value;
    private _weight;
    private _labels;
    constructor(e: IWeightedValue<T>);
    get value(): T;
    get weight(): number;
    set weight(w: number);
    /**
     * add some weight to an element
     * @param quantity weight to add to the element
     */
    add(quantity: number): void;
    /**
     * remove some weight to an element
     * @param quantity weight to remove
     */
    remove(quantity: number): void;
    /**
     * Freeze the
     */
    save(name?: string): void;
    /**
     * Reset
     */
    restore(name?: string): void;
}
export interface IUniverseOptions {
    autoRefill: boolean;
}
export declare class Universe<T> {
    protected autoRefill: boolean;
    protected values: Array<WeightedValue<T>>;
    protected _totalWeight: number;
    constructor();
    constructor(values: Array<IWeightedValue<T>>, options?: IUniverseOptions);
    constructor(min: number, max: number, step?: number, options?: IUniverseOptions);
    /**
     * Returns the size of an universe (number of elements including weights)
     */
    size(): number;
    /**
     * Checks if a specific element is in the unverse
     */
    has(value: T): boolean;
    /**
     *  Returns the number occurrences of a specific element in a universe
     */
    count(value: T): number;
    /**
     * add some element to the universe
     * @param value IWeightedValue
     */
    addValue(value: T, count?: number): void;
    /**
     * remove some element to the universe
     * @param value IWeightedValue
     */
    removeValue(value: T, count?: number): void;
    /**
     * Pick one element in the universe, won't affect the universe itself as element will be replaced in it
     */
    sampleOne(): T;
    /**
     * Pick several element in the universe, won't affect the universe itself as elements will be replaced in it
     * @param count number of element to draw
     */
    sampleMany(count: number): T[];
    /**
     * Draw one element from the universe, the element will be removed from the universe
     */
    drawOne(): T;
    /**
     * Draw many elements from the universe, the elements will be removed from the universe
     * @param count
     */
    drawMany(count: number): T[];
    /**
     * Reset the universe to his original state
     */
    save(name?: string): void;
    /**
     * Reset the universe to his original state
     */
    restore(name?: string): void;
    private _add;
    private _remove;
    private _randIndex;
}
