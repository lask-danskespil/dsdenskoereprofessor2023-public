"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultParseSymbol = exports.parse = exports.ParseCroupierError = void 0;
const fs = __importStar(require("fs"));
const lodash = __importStar(require("lodash"));
const config = __importStar(require("../commands/config"));
class ParseCroupierError extends Error {
    constructor(message) {
        super(message);
        this.name = "ParseCroupierError";
    }
}
exports.ParseCroupierError = ParseCroupierError;
const NUMBER_PATTERN = /^\d+$/;
function parse(filePath, parseSymbol = defaultParseSymbol) {
    var _a, _b, _c, _d, _e;
    const content = fs.readFileSync(filePath, "utf8");
    let croupier;
    try {
        croupier = JSON.parse(fs.readFileSync(filePath, "utf8"));
    }
    catch (error) {
        throw new ParseCroupierError(`${filePath} is not a valid JSON: ${error}`);
    }
    config.validate(croupier);
    const source = {};
    for (const rank of croupier.ranks) {
        const symbols = [];
        for (const ticket of (_a = rank.tickets) !== null && _a !== void 0 ? _a : []) {
            symbols.push({
                shape: String((_c = (_b = ticket.metadatas) === null || _b === void 0 ? void 0 : _b.shape) !== null && _c !== void 0 ? _c : rank.id),
                weight: ticket.quantity,
                symbol: parseSymbol(ticket.symbol),
                source: (_e = (_d = ticket.metadatas) === null || _d === void 0 ? void 0 : _d.source) !== null && _e !== void 0 ? _e : ticket.symbol,
            });
        }
        source[rank.id] = {
            value: rank.id,
            weight: lodash.sum(symbols.map(({ weight }) => weight)),
            symbols,
        };
    }
    return source;
}
exports.parse = parse;
function defaultParseSymbol(symbol) {
    return symbol;
}
exports.defaultParseSymbol = defaultParseSymbol;
//# sourceMappingURL=parseCroupier.js.map