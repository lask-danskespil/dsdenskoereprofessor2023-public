"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultParseSymbol = exports.parse = exports.ParseTilutError = void 0;
const fs = __importStar(require("fs"));
const lodash = __importStar(require("lodash"));
class ParseTilutError extends Error {
    constructor(message) {
        super(message);
        this.name = "ParseTilutError";
    }
}
exports.ParseTilutError = ParseTilutError;
const LINE_PATTERN = /^[a-z.]+\.(?<shape>[0-9]+)\.layout = "?(?<symbol>.*[^"])"?$/;
function parse(filePath, customParseSymbol = defaultParseSymbol) {
    var _a;
    const symbols = fs
        .readFileSync(filePath, { encoding: "latin1" })
        .trim()
        .split("\n")
        .map((shape) => parseLine(shape, customParseSymbol));
    const source = {};
    const symbolsByShape = lodash.groupBy(symbols, "shape");
    for (const shape in symbolsByShape) {
        if (!symbolsByShape.hasOwnProperty(shape)) {
            continue;
        }
        const rankSymbols = symbolsByShape[shape];
        const weight = (_a = lodash.sum(rankSymbols.map((symbol) => symbol.weight))) !== null && _a !== void 0 ? _a : 0;
        source[shape] = { value: Number(shape), weight, symbols: rankSymbols };
    }
    return source;
}
exports.parse = parse;
function parseLine(line, customParseSymbol = defaultParseSymbol) {
    const data = LINE_PATTERN.exec(line);
    if (data === null) {
        throw new ParseTilutError(`Invalid line: ${line}`);
    }
    const shape = Number(data.groups.shape);
    const weight = 1;
    const source = line;
    const symbol = customParseSymbol(data.groups.symbol);
    return { shape, symbol, weight, source };
}
function defaultParseSymbol(shape) {
    return shape;
}
exports.defaultParseSymbol = defaultParseSymbol;
//# sourceMappingURL=parseTilut.js.map