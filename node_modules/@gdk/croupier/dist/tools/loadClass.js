"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadClass = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
function loadClass(modulePath) {
    if (!fs.existsSync(modulePath)) {
        throw new Error(`Couldnt load module at path ${modulePath}`);
    }
    const _module = require(modulePath);
    const lowerClassName = path.basename(modulePath, ".js").toLowerCase();
    const classNames = Object.keys(_module).filter((name) => {
        return name.toLowerCase() === lowerClassName && _module[name] instanceof Function;
    });
    if (classNames.length !== 1) {
        let message = `couldn't find main class of "${modulePath}"`;
        if (classNames.length > 1) {
            message += `: too many possible classNames: ${classNames.join(", ")}`;
        }
        throw new Error(message);
    }
    const _class = _module[classNames[0]];
    return _class;
}
exports.loadClass = loadClass;
//# sourceMappingURL=loadClass.js.map