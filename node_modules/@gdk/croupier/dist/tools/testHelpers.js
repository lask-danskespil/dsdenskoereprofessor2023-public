"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.proof = void 0;
const assert_1 = require("assert");
const backutils_1 = require("@gdk/backutils");
/**
 * Ensure given function or method fails with given arguments, with an error matching
 * given predicate.
 * If used as a decorator, should be used on a static method.
 */
function proof(description, predicate, ...args) {
    return (target, propertyKey, descriptor) => {
        let targetDescr;
        let fun;
        if (propertyKey === undefined && descriptor === undefined) {
            fun = target;
            targetDescr = `function ${target.name}`;
        }
        else {
            fun = target[propertyKey];
            targetDescr = `method ${target.constructor.name}.${propertyKey}`;
            const isStatic = target.prototype !== undefined;
            if (!isStatic) {
                throw new Error(`proof helper can only be called on static methods` +
                    ` (was called on ${targetDescr} which does not look static)`);
            }
        }
        assert_1.strict.throws(() => {
            fun.call(target, ...args);
        }, predicate, `proof "${description}" failed for ${targetDescr}: ` +
            `was supposed to fail with arguments: ${JSON.stringify(args)} but didn't`);
        backutils_1.logger.debug(`${targetDescr}: ran proof "${description}"`);
    };
}
exports.proof = proof;
//# sourceMappingURL=testHelpers.js.map