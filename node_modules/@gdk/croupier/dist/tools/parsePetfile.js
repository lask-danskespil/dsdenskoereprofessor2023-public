"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultParseSymbol = exports.parseSymbol = exports.parse = exports.ParsePetfileError = void 0;
const fs = __importStar(require("fs"));
const lodash = __importStar(require("lodash"));
const xml_js_1 = require("xml-js");
class ParsePetfileError extends Error {
    constructor(message) {
        super(message);
        this.name = "ParsePetfileError";
    }
}
exports.ParsePetfileError = ParsePetfileError;
function parse(filePath, customParseSymbol = defaultParseSymbol) {
    var _a;
    const symbols = fs
        .readFileSync(filePath, { encoding: "latin1" })
        .trim()
        .split("\n")
        .map((line) => parseLine(line, customParseSymbol));
    const source = {};
    const symbolsByShape = lodash.groupBy(symbols, "shape");
    for (const shape in symbolsByShape) {
        if (!symbolsByShape.hasOwnProperty(shape)) {
            continue;
        }
        const rankSymbols = symbolsByShape[shape];
        const weight = (_a = lodash.sum(rankSymbols.map((symbol) => symbol.weight))) !== null && _a !== void 0 ? _a : 0;
        source[shape] = { value: Number(shape), weight, symbols: rankSymbols };
    }
    return source;
}
exports.parse = parse;
function parseLine(line, customParseSymbol = defaultParseSymbol) {
    const parts = line.split(";");
    if (parts.length !== 3) {
        throw new ParsePetfileError(`Invalid line: ${line}`);
    }
    const shape = Number(parts[0]);
    const weight = Number(parts[1]);
    const source = parts[2].trim();
    const symbol = parseSymbol(source, customParseSymbol);
    if (isNaN(shape) || isNaN(weight)) {
        throw new ParsePetfileError(`Invalid line: ${line}`);
    }
    return { shape, symbol, weight, source };
}
function parseSymbol(symbol, customParseSymbol = defaultParseSymbol) {
    try {
        return customParseSymbol(symbol);
    }
    catch (error) {
        throw new ParsePetfileError(error.message);
    }
}
exports.parseSymbol = parseSymbol;
function defaultParseSymbol(source) {
    var _a, _b, _c;
    const gameData = JSON.parse((0, xml_js_1.xml2json)(source, { compact: true })).gamedata;
    const boards = Array.isArray(gameData.boards.board)
        ? gameData.boards.board.map((b) => b._text)
        : [gameData.boards.board._text];
    let prizeLocations;
    if (gameData["prize-locations"]) {
        const locations = gameData["prize-locations"]["prize-location"];
        prizeLocations = Array.isArray(locations)
            ? locations.map((b) => b._text)
            : [locations === null || locations === void 0 ? void 0 : locations._text];
    }
    return [
        (_a = gameData === null || gameData === void 0 ? void 0 : gameData.valueBoards) === null || _a === void 0 ? void 0 : _a._text,
        boards.join("-") + "|",
        (prizeLocations !== null && prizeLocations !== void 0 ? prizeLocations : []).join("-"),
        (_b = gameData === null || gameData === void 0 ? void 0 : gameData.bonusPrize) === null || _b === void 0 ? void 0 : _b._text,
        (_c = gameData === null || gameData === void 0 ? void 0 : gameData.bonus) === null || _c === void 0 ? void 0 : _c._text,
    ]
        .filter((v) => v !== undefined && v.length > 0)
        .join("|")
        .replace(/\|\|+/g, "|");
}
exports.defaultParseSymbol = defaultParseSymbol;
//# sourceMappingURL=parsePetfile.js.map