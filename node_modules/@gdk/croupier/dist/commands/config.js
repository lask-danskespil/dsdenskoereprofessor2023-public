"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeWithRequirements = exports.initFromSourceFile = exports.init = exports.validate = void 0;
const backutils_1 = require("@gdk/backutils");
const lodash = __importStar(require("lodash"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const assert_1 = require("assert");
const uuid_1 = __importDefault(require("uuid"));
const lotteries_1 = require("../lotteries");
const convert_1 = require("./convert");
const CONF_SCHEMA = path_1.default.join(__dirname, "..", "..", "resources", "conf-schema.json");
function validate(conf) {
    const validator = new backutils_1.JsonValidator(JSON.parse(fs_1.default.readFileSync(CONF_SCHEMA).toString()));
    validator.assert(conf);
    // rank ids should be unique
    const rankIds = lodash.uniq(conf.ranks.map((rank) => rank.id));
    (0, assert_1.strict)(rankIds.length === conf.ranks.length, `rank ids are not unique`);
    // rank ids should be consecutive and start at 1
    rankIds.sort((a, b) => a - b);
    const expRankIds = lodash.range(1, rankIds.length + 1);
    assert_1.strict.deepEqual(rankIds, expRankIds, `rank ids should be consecutive integers starting at 1` +
        ` (found [${rankIds.join(", ")}], expected [${expRankIds.join(", ")}])`);
}
exports.validate = validate;
function init(options) {
    var _a, _b, _c, _d;
    const config = {
        masterGameCode: (_a = options.masterGameCode) !== null && _a !== void 0 ? _a : "SET HERE: masterGameCode",
        code: (_b = options.code) !== null && _b !== void 0 ? _b : "SET HERE: variantCode",
        baseStake: 1,
        seed: uuid_1.default.v4(),
        ranks: [],
    };
    if (options.lotteryCode !== undefined) {
        options.lotteryCode = options.lotteryCode.toUpperCase();
        if (!Object.keys(lotteries_1.CONVERT_CONFIGS).includes(options.lotteryCode)) {
            backutils_1.logger.error(`config.init: invalid lottery code: "${options.lotteryCode}".` +
                ` Supported lottery codes:` +
                `["${Object.keys(lotteries_1.CONVERT_CONFIGS).join('", "')}"]`);
            process.exit(1);
        }
        config.lottery = options.lotteryCode;
    }
    if (options.sourceFile !== undefined) {
        if (options.lotteryCode === undefined) {
            backutils_1.logger.error(`config.init: lottery code is needed when generating a configuration` +
                `with a source file.`);
            process.exit(1);
        }
        initFromSourceFile(config, options.lotteryCode, options.sourceFile);
        (_d = (_c = lotteries_1.CONVERT_CONFIGS[options.lotteryCode]).initConfig) === null || _d === void 0 ? void 0 : _d.call(_c, config);
    }
    return config;
}
exports.init = init;
function initFromSourceFile(config, lotteryCode, sourceFile) {
    const source = (0, convert_1.extractConvertSource)({
        currentPath: process.cwd(),
        filePath: sourceFile,
    });
    config.sourceFile = `./${path_1.default.basename(sourceFile)}`;
    config.ranks = lodash.values(source).map(({ value, weight, symbols }) => {
        return {
            id: value,
            factor: { numerator: 1, denominator: 1 },
            shapes: [{ quantity: 0, dbRecordQuantity: weight, value: String(value) }],
        };
    });
    (0, lotteries_1.appendRanksAtEnd)(config);
}
exports.initFromSourceFile = initFromSourceFile;
/**
 * Merge the config with requirements, requirements override data in config
 * @param conf
 * @param requirements
 */
function mergeWithRequirements(conf, requirements) {
    /*if (!conf.infos) {
        conf.infos = {} as any;
    }

    for (const key of Object.keys(requirements)) {
        switch (key) {
            case "serviceName":
                conf.serviceName = requirements.serviceName;
                break;
            case "gameCode":
                conf.infos.gameCode = requirements.gameCode;
                break;
            case "serviceCode":
                conf.infos.serviceCode = requirements.serviceCode;
                break;
            case "bicCode":
                conf.infos.bicCode = requirements.bicCode;
                break;
            case "bicVariant":
                conf.infos.bicVariant = requirements.bicVariant;
                break;
            case "type":
                conf.infos.type = requirements.type;
                break;
            case "stakes":
                if (requirements.stakes.length) {
                    conf.stakes = requirements.stakes;
                }
                break;
        }
    }*/
    return conf;
}
exports.mergeWithRequirements = mergeWithRequirements;
//# sourceMappingURL=config.js.map