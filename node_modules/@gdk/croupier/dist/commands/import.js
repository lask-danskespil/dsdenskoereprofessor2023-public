"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CroupierImporter = void 0;
const alasql_1 = __importDefault(require("alasql"));
const fs = __importStar(require("fs-extra"));
const backutils_1 = require("@gdk/backutils");
const decompress_1 = __importDefault(require("decompress"));
class CroupierImporter {
    constructor() {
        this._id = 0;
        this._stakes = [];
        this.croupierConf = {
            masterGameCode: "",
            code: "",
            description: "",
            baseStake: 0,
            renewal: 0,
            ranks: [],
            seed: "",
            infos: {
                bicCode: 0,
                serviceCode: "",
                serviceName: "",
                type: "",
            },
        };
    }
    /**
     * Import archive file
     * @param file
     * @param serviceName
     * @param version
     */
    async import(file) {
        if (fs.existsSync("tmpdir")) {
            fs.removeSync("tmpdir");
        }
        const files = await (0, decompress_1.default)(file);
        const sqlCroupiersFiles = files
            .filter((f) => {
            return f.type === "file" && /prod\.sql$/.test(f.path);
        })
            .map((f) => f.data.toString("utf8"));
        const sqlUsrFiles = files
            .filter((f) => {
            return f.type === "file" && /external_service\.sql$/.test(f.path);
        })
            .map((f) => f.data.toString("utf8"));
        const jsonCroupierFiles = files
            .filter((f) => {
            return f.type === "file" && /croupier-.*\.json$/.test(f.path);
        })
            .map((f) => JSON.parse(f.data.toString("utf8")));
        if (sqlCroupiersFiles.length && sqlUsrFiles.length) {
            const sqlCroupierFile = sqlCroupiersFiles[0];
            const sqlUsrFile = sqlUsrFiles[0];
            this.importSQLCroupier(sqlCroupierFile);
            this.croupierConf.baseStake = this._stakes.map((s) => s.value).sort((a, b) => a - b)[0];
            this.importUsr(sqlUsrFile);
            this.croupierConf.description = `dealer ${this.croupierConf.code} for game ${this.croupierConf.masterGameCode}`;
            return this.croupierConf;
        }
        else if (jsonCroupierFiles.length && jsonCroupierFiles[0].schemaVersion === 3) {
            const jsonCroupierFile = jsonCroupierFiles[0];
            const { productVersion, productName, date, version, hashes, packageVersion } = jsonCroupierFile, confContent = __rest(jsonCroupierFile, ["productVersion", "productName", "date", "version", "hashes", "packageVersion"]);
            this.croupierConf = confContent;
            return this.croupierConf;
        }
        throw new Error("missing croupier file");
    }
    /**
     * Loads a sql croupier file and translates into a JSON format
     */
    importSQLCroupier(content) {
        const ast = alasql_1.default.parse(content);
        // For each statement, check insert intos
        ast.statements.forEach((s) => {
            if (!s.into || !s.into.tableid) {
                return;
            }
            switch (s.into.tableid) {
                case "ITG_GAME":
                    this.parseItgGame(s);
                    break;
                case "ITG_GAME_STAKE":
                    this.parseGameStake(s);
                    break;
                case "ITG_GAME_WIN_INDEX":
                    this.parseWin(s);
                    break;
                case "ITG_WIN_INDEX_SYMBOL":
                    this.parseSymbols(s);
                    break;
            }
        });
    }
    /**
     * Loads a sql usr file and translates into a JSON format
     */
    importUsr(content) {
        const ast = alasql_1.default.parse(content);
        // For each statement, check insert intos
        ast.statements.forEach((s) => {
            if (s.into && s.into.tableid === "REF_USR_EXTERNAL_SERVICE") {
                this.croupierConf.productName =
                    this.croupierConf.masterGameCode =
                        this.croupierConf.infos.serviceName =
                            this.pickValueOf(s, "EXS_NAME");
                this.croupierConf.infos.description = this.pickValueOf(s, "EXS_DESCRIPTION");
                this.croupierConf.infos.engineCode = this.pickValueOf(s, "ECO_CODE");
                this.croupierConf.infos.serviceCode = this.pickValueOf(s, "EXS_CODE");
                this.croupierConf.infos.type = this.pickValueOf(s, "EXS_TYPE");
                this.croupierConf.infos.bicCode = Number.parseInt(this.pickValueOf(s, "EXS_ACCOUNT_NUMBER"), 10);
                if (this.croupierConf.infos.serviceCode === "undefined") {
                    backutils_1.logger.warn(`serviceCode was not defined, it will be set to "XXX"`);
                    this.croupierConf.infos.serviceCode = "XXX";
                }
            }
        });
    }
    /**
     * extract game info
     */
    parseItgGame(statement) {
        this.croupierConf.renewal = this.pickValueOf(statement, "GAM_RENEWAL");
        this.croupierConf.version = this.pickValueOf(statement, "GAM_REVISION");
        this.croupierConf.code = this.pickValueOf(statement, "GAM_CODE");
    }
    /**
     * Add a stake to the stakes list
     */
    parseGameStake(statement) {
        this._stakes.push({
            value: this.pickValueOf(statement, "GST_STAKE"),
            currency: this.pickValueOf(statement, "GST_CURRENCY").toLowerCase().trim(),
        });
    }
    /**
     * Add a rank to the rank list
     */
    parseWin(statement) {
        const rank = {
            id: this.pickValueOf(statement, "GWI_WIN_INDEX"),
            factor: {
                numerator: this.pickValueOf(statement, "GWI_WIN_FACTOR") * 100,
                denominator: this.pickValueOf(statement, "GWI_REFERENCE_STAKE"),
            },
            renewal: this.pickValueOf(statement, "GWI_RENEWAL"),
            tickets: [],
        };
        this.croupierConf.ranks.push(rank);
    }
    /**
     * Add ticket to the matching rank
     */
    parseSymbols(statement) {
        const rankId = this.pickValueOf(statement, "GWI_WIN_INDEX");
        const rank = this.croupierConf.ranks.find((each) => each.id === rankId);
        const ticket = {
            id: this._nextId(),
            symbol: this.pickValueOf(statement, "WSY_WINNING_SYMBOL"),
            quantity: this.pickValueOf(statement, "WSY_NUMBER_OF_TICKETS"),
            bonus: this.pickValueOf(statement, "WSY_BONUS") === "1",
            tv: this.pickValueOf(statement, "WSY_TV") === "1",
            extra: this.pickValueOf(statement, "WSY_EXTRA") === 1,
            metadatas: { shape: "" },
        };
        rank.tickets.push(ticket);
    }
    pickValueOf(statement, columnid) {
        for (let i = 0; i < statement.columns.length; i++) {
            if (statement.columns[i].columnid === columnid) {
                if (statement.values) {
                    return statement.values[0][i].value;
                }
                else if (statement.select) {
                    return statement.select.columns[i].value;
                }
            }
        }
        return undefined;
    }
    _nextId() {
        return this._id++;
    }
}
exports.CroupierImporter = CroupierImporter;
//# sourceMappingURL=import.js.map