"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customize = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const import_1 = require("./import");
const customize = async (conf) => {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!fs_extra_1.default.existsSync(conf.path)) {
        throw new Error(`Croupier configuration or croupier to import : ${conf.path} not found.`);
    }
    let croupierConfig;
    if (/\.json$/.test(conf.path)) {
        croupierConfig = fs_extra_1.default.readJsonSync(conf.path);
    }
    else {
        croupierConfig = await new import_1.CroupierImporter().import(conf.path);
    }
    croupierConfig.code = conf.code;
    croupierConfig.masterGameCode = (_a = conf.masterGameCode) !== null && _a !== void 0 ? _a : croupierConfig.masterGameCode;
    croupierConfig.baseStake = (_b = conf.baseStake) !== null && _b !== void 0 ? _b : croupierConfig.baseStake;
    croupierConfig.description = (_c = conf.description) !== null && _c !== void 0 ? _c : croupierConfig.description;
    if (conf.renewal !== undefined) {
        croupierConfig.renewal = (_d = conf.renewal) !== null && _d !== void 0 ? _d : undefined;
    }
    if (conf.ranks) {
        for (const rank of conf.ranks) {
            const croupierConfigRank = croupierConfig.ranks.find((r) => r.id === rank.id);
            if (rank.renewal !== undefined) {
                croupierConfigRank.renewal = (_e = rank.renewal) !== null && _e !== void 0 ? _e : undefined;
            }
            croupierConfigRank.prizeType = (_f = rank.prizeType) !== null && _f !== void 0 ? _f : croupierConfigRank.prizeType;
            croupierConfigRank.prizeDescription =
                (_g = rank.prizeDescription) !== null && _g !== void 0 ? _g : croupierConfigRank.prizeDescription;
            // work with quantities
            if (rank.quantity !== undefined) {
                const nbTickets = croupierConfigRank.tickets.length;
                const rankQuantity = croupierConfigRank.tickets.reduce((total, ticket) => total + ticket.quantity, 0);
                const factor = rank.quantity / rankQuantity;
                let remaining = rank.quantity;
                for (const ticket of croupierConfigRank.tickets) {
                    ticket.quantity = Math.floor(factor * ticket.quantity);
                    remaining -= ticket.quantity;
                }
                for (let i = 0; i < remaining; i++) {
                    croupierConfigRank.tickets[i].quantity++;
                }
            }
        }
    }
    return croupierConfig;
};
exports.customize = customize;
//# sourceMappingURL=customize.js.map