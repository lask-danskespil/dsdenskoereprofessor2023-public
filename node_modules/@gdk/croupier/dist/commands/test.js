"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameTestFileNotFoundError = exports.executeTests = void 0;
const fs = __importStar(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const mocha_1 = __importDefault(require("mocha"));
const backutils_1 = require("@gdk/backutils");
function executeTests(gamesToRun, color = false) {
    const mocha = new mocha_1.default({
        reporter: "spec",
        color,
        globals: ["gdkLogLevel"],
    });
    const testDirectory = path_1.default.join(".build", "test");
    const filesToTest = [];
    for (const gameName of gamesToRun) {
        filesToTest.push(...findTestFiles(gameName));
    }
    // set global gdkLogLevel in order to restore it in mocha test files
    global.gdkLogLevel = backutils_1.logger.level;
    for (const file of filesToTest) {
        mocha.addFile(file);
    }
    backutils_1.logger.info(`Manual test run : mocha ${filesToTest.join(" ")}`);
    mocha.run((failures) => {
        if (failures > 0) {
            backutils_1.logger.error("Test run failed");
            process.exitCode = Number(failures);
        }
    });
}
exports.executeTests = executeTests;
class GameTestFileNotFoundError extends Error {
    constructor(gameName) {
        super(`No test file found for game ${gameName}.` +
            ` Expected a "${gameName}" directory or a "${gameName}.spec.ts" file in test folder`);
        this.name = "GameTestFileNotFoundError";
    }
}
exports.GameTestFileNotFoundError = GameTestFileNotFoundError;
function findTestFiles(gameName) {
    const testDirectory = path_1.default.join(".build", "test", gameName);
    if (fs.existsSync(testDirectory) && fs.lstatSync(testDirectory).isDirectory()) {
        return getTestFilesRecursively(testDirectory);
    }
    const testFile = path_1.default.join(".build", "test", `${gameName}.spec.ts`);
    if (fs.existsSync(testFile) && fs.lstatSync(testFile).isFile()) {
        return [testFile];
    }
    throw new GameTestFileNotFoundError(gameName);
}
/**
 * get all test files in a directory tree
 */
function getTestFilesRecursively(directory) {
    const files = [];
    for (const file of fs.readdirSync(directory)) {
        if (fs.lstatSync(path_1.default.join(directory, file)).isDirectory()) {
            files.push(...getTestFilesRecursively(path_1.default.join(directory, file)));
        }
        else if (file.substr(-7) === "spec.js") {
            // it's a common test file
            files.push(path_1.default.join(directory, file));
        }
    }
    return files;
}
//# sourceMappingURL=test.js.map