"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.appendRanksAtEnd = exports.CONVERT_CONFIGS = void 0;
exports.CONVERT_CONFIGS = {
    SVS: {
        prizeDescriptions: false,
        currency: "SEK",
        depleting: true,
        computeRenewal: (poolSize) => Math.floor(0.2 * poolSize),
        initConfig: stackNullRank,
    },
    DS: {
        currency: "DKK",
        depleting: false,
        initConfig: stackNullRank,
    },
    EESTI: {
        currency: "EUR",
        depleting: false,
    },
    FDJ: {
        currency: "EUR",
        depleting: true,
        computeRenewal: (poolSize) => poolSize - 1,
        initConfig: addConfigInfos,
    },
    NT: {
        currency: "NOK",
        depleting: false,
    },
    LOR: {
        currency: "CHF",
        depleting: true,
        computeRenewal: (poolSize) => Math.floor(0.1 * poolSize),
        initConfig: shiftNullRank,
    },
};
// initConfigRankIds strategy: if a rank has rank 0, change its id to be the last one
// ex: rank id [0, 1, 2, 3] => rank ids [1, 2, 3, 4], rank id 0 became 4
function stackNullRank(config) {
    const nullRankIndex = config.ranks.findIndex((rank) => rank.id === 0);
    if (nullRankIndex >= 0) {
        config.ranks[nullRankIndex].id = config.ranks.length;
    }
}
// initConfigRankIds strategy: if a rank has rank 0, shift every ranks by adding 1 to their ids
// ex: rank id [0, 1, 2, 3] => rank ids [1, 2, 3, 4], rank id 0 became 1
function shiftNullRank(config) {
    if (config.ranks.some((rank) => rank.id === 0)) {
        for (const rank of config.ranks) {
            rank.id += 1;
        }
    }
}
function addConfigInfos(config) {
    if (config.infos === undefined) {
        config.infos = {
            bicCode: 0,
            serviceName: "",
            serviceCode: "",
            engineCode: "ITG",
            description: "",
            type: "Interactif",
        };
        appendRanksAtEnd(config);
    }
}
// modify given config to append "ranks" key / value in last position in the config.
// Even if order if not guaranteed in objects, node does preserve key / value order,
// and we prefer ranks to be at the end.
function appendRanksAtEnd(config) {
    const ranks = config.ranks;
    delete config.ranks;
    config.ranks = ranks;
}
exports.appendRanksAtEnd = appendRanksAtEnd;
//# sourceMappingURL=lotteries.js.map