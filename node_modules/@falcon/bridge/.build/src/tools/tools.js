"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadJSON = exports.loadStyleSheet = exports.loadScript = exports.injectScript = exports.loadFile = exports.getBridgePath = exports.uid = exports.getQueryParameters = void 0;
var axios_1 = require("axios");
/**
 * Returns the current query parameters according to the current window's search URL
 */
function getQueryParameters() {
    var searchParams = window.location.search;
    var splitResult = searchParams.substr(1).split(/&?([^=]+)=([^&]+)/g);
    var splitParams = {};
    if (!splitResult) {
        return splitParams;
    }
    for (var i = 1; i < splitResult.length; i += 3) {
        splitParams[splitResult[i]] = splitResult[i + 1];
    }
    return splitParams;
}
exports.getQueryParameters = getQueryParameters;
/**
 * Returns an uid
 */
function uid() {
    return currentUid++;
}
exports.uid = uid;
var currentUid = 0;
/**
 * Returns the current path of the bridge
 */
function getBridgePath() {
    return window.location.pathname.split("/").slice(0, -1).join("/");
}
exports.getBridgePath = getBridgePath;
/**
 * Loads the given file
 * @param url the url of the file to load on the server
 */
function loadFile(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios_1.default.get(url)];
                case 1: return [2 /*return*/, (_a.sent()).data];
            }
        });
    });
}
exports.loadFile = loadFile;
/**
 * Injects a new script in the document's head
 * @param content the content of the script
 */
function injectScript(content, url) {
    if (url === void 0) { url = "bridge-unkwnown-script.js"; }
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.text = "".concat(content, "\n//# sourceURL=").concat(window.location.href, "/").concat(url, "\n");
    document.head.appendChild(script);
    return script;
}
exports.injectScript = injectScript;
/**
 * Loads the given script and adds in the document's head
 * @param url the url of the script to load
 */
function loadScript(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var script = document.createElement("script");
                    script.type = "text/javascript";
                    (script.onload = function () { return resolve(); }), (script.onerror = function () { return reject(); });
                    script.src = url;
                    document.head.appendChild(script);
                })];
        });
    });
}
exports.loadScript = loadScript;
/**
 * Loads the given style sheet and adds in the document's head.
 * @param url the url of the stylesheet to load.
 */
function loadStyleSheet(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var style = document.createElement("link");
                    style.type = "text/css";
                    style.rel = "stylesheet";
                    style.onload = function () { return resolve(); };
                    style.onerror = function () { return reject(); };
                    style.href = url;
                    document.head.appendChild(style);
                })];
        });
    });
}
exports.loadStyleSheet = loadStyleSheet;
/**
 * Load JSON file directly
 * @param url file name
 * @return Promise that resolves once the json is loaded and parsed
 */
function loadJSON(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var request = new XMLHttpRequest();
                    // ie10 seems to not know this method!
                    if (request.overrideMimeType) {
                        request.overrideMimeType("application/json");
                    }
                    request.addEventListener("error", function (err) { return reject(err); });
                    request.open("GET", url, true);
                    request.onreadystatechange = function () {
                        if (request.readyState === 4 && request.status === 200) {
                            try {
                                var parsed = JSON.parse(request.responseText);
                                resolve(parsed);
                            }
                            catch (err) {
                                reject("Can't parse ".concat(url));
                            }
                        }
                    };
                    request.send(null);
                })];
        });
    });
}
exports.loadJSON = loadJSON;
//# sourceMappingURL=tools.js.map