"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var request_override_1 = require("./tools/request-override");
/**
 * BabylonJS Factory implementation example. This has been done to load a GDK-free game
 * that laods its own assets etc. Also, as an example, this class implements the "INotifier" interface
 * to be able to get notified when the lottery sends notification to the game (purse changed, etc.).
 */
var BabylonJSExampleGuestImpl = /** @class */ (function () {
    /**
     * Constructor.
     * @param _bridge defines the reference to the bridge instance.
     * @param _parameters defines the reference to the parameters object available in the "factory.parameters" property in game.conf.jso
     * @param _channel defines the reference to the bridge's channel used to communicate with the host. Same as accessing "_bridge.channel".
     */
    function BabylonJSExampleGuestImpl(_bridge, _parameters, _channel) {
        this._bridge = _bridge;
        this._parameters = _parameters;
        this._channel = _channel;
        this._game = null;
        this._overrideXMLHttpRequest();
        this._loadGame();
        // Because we want to listen to notifications, the class is implementing INotifier which defines
        // all the available pre-defined notifications.
        // The only step to get notified is to register the notifier instance which is here "this".
        // In other words, each time the host (the lottery) notifies that the purse has changed, the method
        // ".notifyPurseInformationChange" will be called here.
        //
        // On the lottery side, the call will look like:
        // 	bridgeHelperInstance.notifierProxy.notifyPurseInformationChange(...);
        this._channel.setNotifier(this);
    }
    /**
     * Called on the host wants to notify the game that the purse changed.
     * @param purseInformation defines the new purse information to display in the game.
     */
    BabylonJSExampleGuestImpl.prototype.notifyPurseInformationChange = function (purseInformation) {
        this._game.scene.setPurse(purseInformation.displayedAmount.currency, purseInformation.displayedAmount.value);
    };
    /**
     * Called on the host wants to notify the game that the user information changed (firstname, lastname, etc.).
     * @param userInformation defines the new user informations.
     */
    BabylonJSExampleGuestImpl.prototype.notifyUserInformationChange = function (userInformation) {
        this._game.scene.setUserInformation(userInformation.firstName, userInformation.lastName);
    };
    /**
     * Overrides the XMLHttpRequest object.
     */
    BabylonJSExampleGuestImpl.prototype._overrideXMLHttpRequest = function () {
        // Override request for game assets
        request_override_1.HttpRequestOverride.override({
            urlRegExp: /^(.\/)?scenes/,
            onOpen: function (c) { return ({ method: c.method, url: "game/local/".concat(c.url) }); },
        });
    };
    /**
     * Loads the game script file and configures it.
     */
    BabylonJSExampleGuestImpl.prototype._loadGame = function () {
        return __awaiter(this, void 0, void 0, function () {
            var canvas;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        canvas = document.createElement("canvas");
                        canvas.id = "renderCanvas";
                        canvas.style.width = "100%";
                        canvas.style.height = "100%";
                        canvas.style.position = "absolute";
                        canvas.style.top = "0";
                        document.body.appendChild(canvas);
                        // Load the game's script file. This game has been built using Webpack and is then
                        // available as a single JS file.
                        return [4 /*yield*/, this._bridge.loadScripts(["".concat(this._parameters.bundleBaseUrl, "/dist/bundle.js")])];
                    case 1:
                        // Load the game's script file. This game has been built using Webpack and is then
                        // available as a single JS file.
                        _a.sent();
                        // The game's script file exports a global variable in "window" named "game".
                        // We just have to have to access it in order to create the new instance of the game.
                        this._game = new window["game"].Game();
                        // Using Babylon.JS, just wait for the 3d scene to be ready before accessing elements in it.
                        this._game.scene.executeWhenReady(function () { return __awaiter(_this, void 0, void 0, function () {
                            var purse, userInformation;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._bridge.channel.getPurseInformation()];
                                    case 1:
                                        purse = _a.sent();
                                        this.notifyPurseInformationChange(purse);
                                        return [4 /*yield*/, this._bridge.channel.getUserInformation({})];
                                    case 2:
                                        userInformation = _a.sent();
                                        this.notifyUserInformationChange(userInformation);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        return [2 /*return*/];
                }
            });
        });
    };
    return BabylonJSExampleGuestImpl;
}());
exports.default = BabylonJSExampleGuestImpl;
//# sourceMappingURL=babylonjs-factory-example.js.map