"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequestOverride = void 0;
var HttpRequestOverride = /** @class */ (function () {
    function HttpRequestOverride() {
    }
    /**
     * Overrides the request to the given Url.
     * @param configuration defines configuration of the override (callbacks and replacers).
     */
    HttpRequestOverride.override = function (configuration) {
        if (!this._requestOpen && !this._requestSend && !this._imageDescriptor) {
            this._overrideXMLHttpRequest();
        }
        this.overridenUrls.push(configuration);
    };
    /**
     * Overrides the .open function to handle request manually.
     */
    HttpRequestOverride._overrideXMLHttpRequest = function () {
        // XMLHttpRequest
        this._requestOpen = XMLHttpRequest.prototype.open;
        this._requestSend = XMLHttpRequest.prototype.send;
        XMLHttpRequest.prototype.open = function (method, url) {
            HttpRequestOverride._overrideOpen(this, method, url);
        };
        XMLHttpRequest.prototype.send = function (body) {
            HttpRequestOverride._overrideSend(this, body);
        };
        // Image
        this._imageDescriptor = Object.getOwnPropertyDescriptor(Image.prototype, "src");
        Object.defineProperty(Image.prototype, "src", {
            set: function (url) {
                HttpRequestOverride._overrideImageSetSrc(this, url);
            },
        });
    };
    /**
     * Defines the function called instead of ".open" in XMLHttpRequest
     */
    HttpRequestOverride._overrideOpen = function (request, method, url) {
        var override = HttpRequestOverride.overridenUrls.find(function (o) { return url.match(o.urlRegExp); });
        if (override) {
            request._originalUrl = url;
        }
        if (override && override.onOpen) {
            var newConfiguration = override.onOpen({ method: method, url: url });
            method = newConfiguration.method;
            url = newConfiguration.url;
            request._newUrl = url;
        }
        HttpRequestOverride._requestOpen.call(request, method, url);
    };
    /**
     * Defines the function called instead of ".send" in XMLHttpRequest
     */
    HttpRequestOverride._overrideSend = function (request, body) {
        return __awaiter(this, void 0, void 0, function () {
            var override, overrideResult, response_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        override = HttpRequestOverride.overridenUrls.find(function (o) { return request._originalUrl && request._originalUrl.match(o.urlRegExp); });
                        if (override && override.configure) {
                            override.configure(request);
                        }
                        if (!(override && override.onSend)) return [3 /*break*/, 4];
                        overrideResult = override.onSend(request, body);
                        if (overrideResult.hasOwnProperty("body")) {
                            body = overrideResult.body;
                        }
                        if (!overrideResult.abort) return [3 /*break*/, 4];
                        if (!overrideResult.result) {
                            throw new Error("A result must be provided when aborting a request.");
                        }
                        if (!(overrideResult.result instanceof Promise)) return [3 /*break*/, 2];
                        return [4 /*yield*/, overrideResult.result];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = overrideResult.result;
                        _b.label = 3;
                    case 3:
                        response_1 = _a;
                        Object.defineProperty(request, "responseText", { get: function () { return response_1.data; } });
                        Object.defineProperty(request, "readyState", { get: function () { return response_1.readyState; } });
                        Object.defineProperty(request, "status", { get: function () { return response_1.status; } });
                        XMLHttpRequest.prototype.dispatchEvent.call(request, new Event("readystatechange"));
                        return [2 /*return*/];
                    case 4:
                        this._requestSend.call(request, body);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Defines the function called on an image src is set to an instance of "Image".
     * This is typically used to load textures in BabylonJS.
     */
    HttpRequestOverride._overrideImageSetSrc = function (image, url) {
        var override = HttpRequestOverride.overridenUrls.find(function (o) { return url.match(o.urlRegExp); });
        if (override && override.onOpen) {
            var newConfiguration = override.onOpen({ method: "GET", url: url });
            url = newConfiguration.url;
        }
        HttpRequestOverride._imageDescriptor.set.call(image, url);
    };
    /**
     * Defines the list of all overriden Urls
     */
    HttpRequestOverride.overridenUrls = [];
    HttpRequestOverride._requestOpen = null;
    HttpRequestOverride._requestSend = null;
    HttpRequestOverride._imageDescriptor = null;
    return HttpRequestOverride;
}());
exports.HttpRequestOverride = HttpRequestOverride;
//# sourceMappingURL=request-override.js.map