"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EItgBetMode = exports.EHeader = exports.EPath = exports.EMediaTypes = exports.EGameMode = void 0;
var axios_1 = require("axios");
var token_store_1 = require("../tools/token-store");
var tools_1 = require("../tools/tools");
var EGameMode;
(function (EGameMode) {
    EGameMode["demo"] = "DEMO";
    EGameMode["normal"] = "NORMAL";
})(EGameMode = exports.EGameMode || (exports.EGameMode = {}));
var EMediaTypes;
(function (EMediaTypes) {
    EMediaTypes["ERROR"] = "application/vnd.lotsys.falcon.error-1+json";
    EMediaTypes["REPLAYTOKEN"] = "application/vnd.lotsys.falcon.gateway.replayprotection.token-1+json";
    EMediaTypes["SESSIONCREATE"] = "application/vnd.lotsys.itf.session.request-1+json";
    EMediaTypes["CATALOG"] = "application/vnd.fgs.itf.catalog.game.list-5+json";
    EMediaTypes["COMPATIBILITY"] = "application/vnd.fgs.itf.catalog.unauthenticated.lottery.games.compatibility-1+json";
    EMediaTypes["USERDATAREQUEST"] = "application/vnd.lotsys.itf.game.userdata.search.parameters-1+json";
    EMediaTypes["USERDATARESPONSE"] = "application/vnd.lotsys.itf.game.userdata-1+json";
    EMediaTypes["JACKPOT"] = "application/vnd.lotsys.itf.jackpot-1+json";
    EMediaTypes["GAMEMODEL"] = "application/vnd.lotsys.itf.game.model-1+json";
    EMediaTypes["GAMESESSIONS"] = "application/vnd.lotsys.itf.game.session.list-1+json";
    EMediaTypes["GAMESESSIONSPARAMETERS"] = "application/vnd.lotsys.itf.game.session.search.parameters-1+json";
    EMediaTypes["BETREQUEST"] = "application/vnd.lotsys.itf.game.bet.request-1+json";
    EMediaTypes["BETRESULT"] = "application/vnd.lotsys.itf.game.bet.result-1+json";
    EMediaTypes["GAMIFCONTEXT"] = "application/vnd.lotsys.itf.gamification.context-1+json";
    EMediaTypes["BETANDCLAIM"] = "application/vnd.lotsys.itg.ticket.betManualClaim-1+json";
    EMediaTypes["AUTOCLAIM"] = "application/vnd.lotsys.itg.ticket.betAutoClaim-1+json";
    EMediaTypes["TICKETSLIST"] = "application/vnd.lotsys.itf.game.ticket.list-1+json";
    EMediaTypes["TICKETSLIST2"] = "application/vnd.lotsys.itf.game.ticket.list-2+json";
    EMediaTypes["TICKETSLIST3"] = "application/vnd.lotsys.itf.game.ticket.list-3+json";
    EMediaTypes["GETSTATE"] = "application/vnd.lotsys.itf.session.state.info-1+json";
    EMediaTypes["GAMECONFIGURATION"] = "application/vnd.fgs.itf.catalog.unauthenticated.lotterygame.config.map-1+json";
    EMediaTypes["PURSE"] = "application/vnd.fgs.itf.virtualcurrency.purse.list-1+json";
    EMediaTypes["MTP_GETROOMS"] = "application/vnd.lotsys.itf.game.room.list-1+json";
    EMediaTypes["MTP_GETROOM"] = "application/vnd.lotsys.itf.game.room-1+json";
    EMediaTypes["MTP_GETSESSION"] = "application/vnd.lotsys.itf.game.session-1+json";
    EMediaTypes["MTP_ENTERANDBET_REQUEST"] = "application/vnd.lotsys.itf.game.enter.bet.request-1+json";
    EMediaTypes["MTP_ENTERROOM_RESULT"] = "application/vnd.lotsys.itf.game.enter.result-1+json";
    EMediaTypes["MTP_ENTERROOM_REQUEST"] = "application/vnd.lotsys.itf.game.enter.request-1+json";
    EMediaTypes["PRS_TICKET_INFOS"] = "application/vnd.fgs.itf.presto.ticket-1+json";
})(EMediaTypes = exports.EMediaTypes || (exports.EMediaTypes = {}));
var EPath;
(function (EPath) {
    EPath["REPLAYPROTECTION"] = "/falcon/gateway/replayprotectiontokens";
    EPath["USERDATA"] = "/itf/game/userdata";
    EPath["ITFSESSION"] = "/itf/session";
    EPath["GAMES"] = "/itf/catalog/games/lotteries";
    EPath["JACKPOT"] = "/itf/jackpot/lotteries";
    EPath["GAMEMODEL"] = "/itf/game/model";
    EPath["GAMECONFIGURATION"] = "/itf/catalog-unauthenticated/lotteries";
    EPath["GAMESESSIONS"] = "/itf/game/sessions";
    EPath["BET"] = "/itf/game/bet";
    EPath["GAMIFCONTEXT"] = "/itf/gamif/games";
    EPath["GETITGTICKETS"] = "/itf/game/ITG/tickets";
    EPath["PURSE"] = "/itf/virtual-currency-purse/lotteries";
    EPath["MTP_ROOMS"] = "/itf/game/MTP/rooms";
    EPath["MTP_ENTER"] = "/itf/game/enter";
    EPath["MTP_ENTERANDBET"] = "/itf/game/enter/bet";
    EPath["MTP_SESSION"] = "/itf/game/session/room";
    EPath["WIZZ_AVATAR"] = "/avatar";
})(EPath = exports.EPath || (exports.EPath = {}));
var EHeader;
(function (EHeader) {
    EHeader["CONTENTTYPE"] = "Content-Type";
    EHeader["ACCEPT"] = "Accept";
    EHeader["TOKEN"] = "replay-token";
    EHeader["ASK_TOKEN"] = "replay-token-generate";
    EHeader["GENERATED_TOKEN"] = "replay-token-generated";
    EHeader["CORRELATION_ID"] = "correlation-id";
})(EHeader = exports.EHeader || (exports.EHeader = {}));
var EItgBetMode;
(function (EItgBetMode) {
    EItgBetMode["AUTO"] = "BET_AUTO_CLAIM";
    EItgBetMode["MANUAL"] = "BET_MANUAL_CLAIM";
})(EItgBetMode = exports.EItgBetMode || (exports.EItgBetMode = {}));
var DEFAULT_MULTIBET_DELAY = 3500;
var MAX_RETRIES_ON_401 = 1;
var gameCount = 0;
var PlatformITF = /** @class */ (function () {
    /**
     * Constructor
     * @param bridge
     */
    function PlatformITF(bridge) {
        var _this = this;
        this.bridge = bridge;
        this.ticketsMap = {};
        this.masksMap = {};
        // Save configuration
        this._configuration = bridge.configuration;
        // instanciate tokenStore
        this._tokens = new token_store_1.TokenStore(function () { return _this.getReplayProtectionToken(); });
        // Request without token instance
        this._request = axios_1.default.create({ baseURL: this._configuration.paths.applications.ITF });
        this._request.interceptors.request.use(function (config) {
            config.headers[_this._configuration.correlationIdHeaderName
                ? _this._configuration.correlationIdHeaderName
                : EHeader.CORRELATION_ID] = _this.bridge.getCorrelationId();
            _this.bridge.channel.emitRequestParamsTag(config);
            return config;
        });
        this._request.interceptors.response.use(function (response) {
            _this.bridge.channel.emitRequestResponseTag(response.config, response);
            return response;
        }, function (error) {
            return _this._handleResponseErrors(error);
        });
        // Request with token instance
        this._requestWithToken = axios_1.default.create({ baseURL: this._configuration.paths.applications.ITF });
        this._requestWithToken.interceptors.request.use(function (config) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        config.headers[EHeader.ASK_TOKEN] = true;
                        _a = config.headers;
                        _b = EHeader.TOKEN;
                        return [4 /*yield*/, this._tokens.get()];
                    case 1:
                        _a[_b] = _c.sent();
                        config.headers[this._configuration.correlationIdHeaderName
                            ? this._configuration.correlationIdHeaderName
                            : EHeader.CORRELATION_ID] = this.bridge.getCorrelationId();
                        this.bridge.channel.emitRequestParamsTag(config);
                        return [2 /*return*/, config];
                }
            });
        }); }, function (error) {
            throw error;
        });
        this._requestWithToken.interceptors.response.use(function (response) {
            // store generated token if one is present in the response
            if (response && response.headers && response.headers[EHeader.GENERATED_TOKEN]) {
                _this._tokens.add(response.headers[EHeader.GENERATED_TOKEN]);
            }
            _this.bridge.channel.emitRequestResponseTag(response.config, response);
            return response;
        }, function (error) {
            return _this._handleResponseErrors(error);
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //    COMMON
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Retrive a replay protection token
     */
    PlatformITF.prototype.getReplayProtectionToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        config = {
                            method: "post",
                            data: {},
                            url: EPath.REPLAYPROTECTION,
                            eventTag: "getReplayProtectionToken",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.REPLAYTOKEN,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.value];
                }
            });
        });
    };
    /**
     * Retrieve state information from IF in order to authenticate
     * @param lotteryCode
     */
    PlatformITF.prototype.getState = function (lotteryCode) {
        return __awaiter(this, void 0, void 0, function () {
            var config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        lotteryCode = lotteryCode || this.bridge.channel.lotteryCode;
                        config = {
                            method: "get",
                            url: "/itf/session/state?lottery=".concat(lotteryCode),
                            eventTag: "getState",
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.GETSTATE,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        if (data && data.redirectUrl && this.bridge.getOpenGameParameters().lotteryChannel) {
                            data.redirectUrl += "&channel=" + this.bridge.getOpenGameParameters().lotteryChannel;
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Creates an IF session
     * @param sessionToken
     * @param demo
     */
    PlatformITF.prototype.createSession = function (sessionToken, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        sessionToken = sessionToken || {
                            provider: this.bridge.channel.lotteryCode,
                            state: "dummy_state",
                            value: "dummy_value",
                        };
                        body = {
                            demoMode: demo,
                            lottery: sessionToken.provider,
                            state: sessionToken.state,
                            token: sessionToken.value,
                        };
                        if (this.bridge.getOpenGameParameters().lotteryChannel) {
                            body.channel = this.bridge.getOpenGameParameters().lotteryChannel;
                        }
                        config = {
                            method: "post",
                            url: EPath.ITFSESSION,
                            data: body,
                            eventTag: "createSession",
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.SESSIONCREATE,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retrive game configuration, try to get the config from getGameConfigurationService, fallback to loadJSON on error
     * @param lotteryCode the code of the current lottery. @example "fdj" or "fake-lottery".
     * @param service the service object containing the applicationId and service name.
     */
    PlatformITF.prototype.getCurrentGameConfig = function (lotteryCode, service) {
        return __awaiter(this, void 0, void 0, function () {
            var data, config;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!lotteryCode) {
                            lotteryCode = this.bridge.channel.lotteryCode;
                        }
                        if (!service) {
                            service = { applicationId: this.bridge.channel.type, serviceName: this.bridge.channel.name };
                        }
                        config = {
                            method: "get",
                            url: "".concat(EPath.GAMECONFIGURATION, "/").concat(lotteryCode, "/games/").concat(service.serviceName, "/config"),
                            eventTag: "getCurrentGameConfig",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.GAMECONFIGURATION,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        if (typeof data.stakes === "string") {
                            data.stakes = JSON.parse(data.stakes);
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retrieve games compatibility for a lottery
     * @param lotteryGameCode
     */
    PlatformITF.prototype.getCompatibility = function (lotteryGameCode) {
        return __awaiter(this, void 0, void 0, function () {
            var lotteryCode, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        lotteryCode = this.bridge.channel.lotteryCode;
                        lotteryGameCode = lotteryGameCode || this.bridge.channel.name;
                        config = {
                            method: "get",
                            url: "".concat(EPath.GAMECONFIGURATION, "/").concat(lotteryCode, "/compatibility?gameCodes=").concat(lotteryGameCode),
                            eventTag: "getCompatibility",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.COMPATIBILITY,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.gamesCompatibility || []];
                }
            });
        });
    };
    /**
     * Retrieve games catalog for a lottery
     * @param lotteryCode
     */
    PlatformITF.prototype.getGames = function (lotteryCode) {
        return __awaiter(this, void 0, void 0, function () {
            var config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        lotteryCode = lotteryCode || this.bridge.channel.lotteryCode;
                        config = {
                            method: "get",
                            url: "".concat(EPath.GAMES, "/").concat(lotteryCode),
                            eventTag: "getGames",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.CATALOG,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data || []];
                }
            });
        });
    };
    /**
     * Retrieves players information
     * @param playersIds string[]
     * @param lotteryCode
     * @return IPlayerInformation[]
     */
    PlatformITF.prototype.getPlayersInfo = function (playersIds, lotteryCode) {
        return __awaiter(this, void 0, void 0, function () {
            var config, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lotteryCode = lotteryCode || this.bridge.channel.lotteryCode;
                        config = {
                            method: "get",
                            eventTag: "getPlayersInfo",
                            url: "/itf/players/lotteries/".concat(lotteryCode, "/players?").concat(playersIds
                                .map(function (id) { return "playerIds=" + id; })
                                .join("&")),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retrieves current player information
     * @return IPlayerInformation
     */
    PlatformITF.prototype.getCurrentPlayerInfo = function (lotteryCode) {
        return __awaiter(this, void 0, void 0, function () {
            var config, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lotteryCode = lotteryCode || this.bridge.channel.lotteryCode;
                        config = {
                            method: "get",
                            eventTag: "getCurrentPlayerInfo",
                            url: "/itf/players/lotteries/".concat(lotteryCode, "/players/current"),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retrieves the player purses for a currency
     * @param currencyCode
     * @param playerId
     * @param service
     * @param lotteryCode
     */
    PlatformITF.prototype.getPlayerCurrency = function (currencyCode, playerId, service, lotteryCode) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        lotteryCode = lotteryCode || this.bridge.channel.lotteryCode;
                        serviceName = service
                            ? service.serviceName || this.bridge.channel.name
                            : this.bridge.channel.name;
                        config = {
                            method: "get",
                            eventTag: "getPlayerCurrency",
                            url: "".concat(EPath.PURSE, "/").concat(lotteryCode, "/players/").concat(playerId, "/purses?currency=").concat(currencyCode, "&serviceName=").concat(serviceName),
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.PURSE,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Return avatar url for id
     * @param id
     */
    PlatformITF.prototype.getAvatarUrl = function (id) {
        return "".concat(this._configuration.paths.media).concat(EPath.WIZZ_AVATAR, "/").concat(id, ".png");
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //   Jackpots
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Retrieve old Jackpot balance
     */
    PlatformITF.prototype.getJackpotInformation = function (service) {
        if (service === void 0) { service = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        serviceName = service.serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            eventTag: "getJackpotInformation",
                            url: "".concat(EPath.JACKPOT, "/").concat(this.bridge.channel.lotteryCode, "/games/").concat(serviceName, "/jackpots"),
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.JACKPOT,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Returns the current jackpots.
     * @param service the service's informations.
     */
    //TODO - Get the correct API definition for getJackpotConfigurationForGame
    PlatformITF.prototype.getJackpotConfiguration = function (serviceName) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.get("/jackpots/".concat(serviceName))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //     ITG
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Retrieve model for an ITG game
     * @param serviceName
     */
    PlatformITF.prototype.getItgModel = function (serviceName) {
        return __awaiter(this, void 0, void 0, function () {
            var config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        serviceName = serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            eventTag: "getItgModel",
                            url: "/itf/game/model/ITG/".concat(serviceName),
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.GAMEMODEL,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * retrieve a specific ticket
     * @param ticketId
     * @param demo
     * @returns a ticket or null if no ticket was found
     */
    PlatformITF.prototype.getItgTicket = function (ticketId, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var gameMode, config, data, ticket;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        gameMode = demo ? EGameMode.demo : EGameMode.normal;
                        return [4 /*yield*/, this.bridge.updateGameMode(gameMode)];
                    case 1:
                        _b.sent();
                        config = {
                            method: "get",
                            eventTag: "getItgTicket",
                            url: "/itf/game/ITG/tickets?demoMode=".concat(demo, "&filter.engineHistoryId=").concat(ticketId),
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.TICKETSLIST,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        if (data.length > 0) {
                            ticket = data[0];
                            // ensure we got a ticket for the game loaded
                            if (ticket.serviceName !== this.bridge.channel.name) {
                                throw { code: "mismatch-game-code" };
                            }
                            return [2 /*return*/, ticket];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Retrieve all non claimed ticket for a game (and current player)
     * @param serviceName
     * @param demo
     */
    PlatformITF.prototype.getItgTickets = function (serviceName, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var gameMode, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._itgBetMediaType()];
                    case 1:
                        if ((_b.sent()) !== EMediaTypes.BETANDCLAIM) {
                            // mode auto claim, no resume game
                            return [2 /*return*/, []];
                        }
                        serviceName = serviceName || this.bridge.channel.name;
                        gameMode = demo ? EGameMode.demo : EGameMode.normal;
                        return [4 /*yield*/, this.bridge.updateGameMode(gameMode)];
                    case 2:
                        _b.sent();
                        config = {
                            method: "get",
                            eventTag: "getItgTickets",
                            url: "/itf/game/ITG/tickets?demoMode=".concat(demo, "&filter.ticketStatus=OPENED&filter.gameCode=").concat(serviceName),
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.TICKETSLIST,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 3:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Place a bet on an ITG game.
     * @param betRequest the bet request object containing the needed bet request informations.
     */
    PlatformITF.prototype.createITGBet = function (betRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var mediaType, applicationId, serviceName, body, config, data, storedData, mask;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._isMultiBet()) {
                            return [2 /*return*/, new Promise(function (resolve) { })];
                        }
                        return [4 /*yield*/, this._itgBetMediaType()];
                    case 1:
                        mediaType = _b.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            mediaType: mediaType,
                            stake: betRequest.stake,
                            data: betRequest.revelationData || betRequest.eventReference
                                ? {
                                    revelationData: betRequest.revelationData,
                                    eventReference: betRequest.eventReference,
                                }
                                : undefined,
                        };
                        return [4 /*yield*/, this.bridge.updateGameMode(betRequest.demo ? EGameMode.demo : EGameMode.normal)];
                    case 2:
                        _b.sent();
                        config = {
                            method: "post",
                            data: body,
                            url: "".concat(EPath.BET, "?demoMode=").concat(Boolean(betRequest.demo)),
                            eventTag: "createITGBet",
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                            extraTagData: {
                                response: {
                                    gameCount: ++gameCount,
                                },
                            },
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 3:
                        data = (_b.sent()).data;
                        if (!(data.jackpotResult && data.jackpotResult.wonAmount.value > 0)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.bridge.displayJackpotRevelation(data.jackpotResult)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        if (!(mediaType !== EMediaTypes.BETANDCLAIM)) return [3 /*break*/, 7];
                        storedData = JSON.parse(JSON.stringify(data));
                        delete storedData.message;
                        return [4 /*yield*/, this.bridge.channel.maskPurse({
                                betAmount: betRequest.stake,
                                purseInformation: null,
                                winAmount: storedData.wonAmount,
                            })];
                    case 6:
                        mask = _b.sent();
                        this.bridge.displayedAmount = mask;
                        this.masksMap[data.data.id] = mask.maskId;
                        this.ticketsMap[data.data.id] = storedData;
                        _b.label = 7;
                    case 7:
                        this.bridge.emitEvent("HAS_BET", data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     *
     * @param betRequest
     * @param ticketId
     */
    PlatformITF.prototype.updateItgBet = function (betRequest, ticketId) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._itgBetMediaType()];
                    case 1:
                        if ((_b.sent()) !== EMediaTypes.BETANDCLAIM) {
                            // mode auto claim, do nothing on update
                            return [2 /*return*/, this.ticketsMap[ticketId]];
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(betRequest.demo ? EGameMode.demo : EGameMode.normal)];
                    case 2:
                        _b.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            stake: betRequest.stake,
                            data: {
                                id: ticketId,
                                revelationData: betRequest.revelationData,
                            },
                        };
                        config = {
                            method: "put",
                            data: body,
                            url: "".concat(EPath.BET, "?demoMode=").concat(Boolean(betRequest.demo)),
                            eventTag: "updateItgBet",
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 3:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Claim a ticket on an ITG game.
     * @param betRequest the bet request object containing the needed bet request informations.
     * @param ticketId the id of the ticket to claim.
     */
    PlatformITF.prototype.claimItgBet = function (betRequest, ticketId) {
        return __awaiter(this, void 0, void 0, function () {
            var storedData, applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._itgBetMediaType()];
                    case 1:
                        if (!((_b.sent()) !== EMediaTypes.BETANDCLAIM)) return [3 /*break*/, 3];
                        storedData = this.ticketsMap[ticketId];
                        // clear purse the old way
                        return [4 /*yield*/, this.bridge.channel.clearPurse(this.masksMap[ticketId])];
                    case 2:
                        // clear purse the old way
                        _b.sent();
                        this.bridge.displayedAmount = null;
                        // delete stored infos
                        delete this.masksMap[ticketId];
                        delete this.ticketsMap[ticketId];
                        this.bridge.emitEvent("HAS_CLAIMED", storedData);
                        if (storedData && storedData.wonAmount) {
                            this.bridge.emitEvent("TAG", {
                                eventType: "bet",
                                event: storedData.wonAmount.value > 0 ? "betWin" : "betLoose",
                                amount: storedData.wonAmount,
                            });
                            return [2 /*return*/, storedData];
                        }
                        _b.label = 3;
                    case 3: return [4 /*yield*/, this.bridge.updateGameMode(betRequest.demo ? EGameMode.demo : EGameMode.normal)];
                    case 4:
                        _b.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            stake: betRequest.stake,
                            data: {
                                id: ticketId,
                                revelationData: betRequest.revelationData,
                                status: "CLAIMED",
                            },
                        };
                        config = {
                            method: "put",
                            data: body,
                            url: "".concat(EPath.BET, "?demoMode=").concat(Boolean(betRequest.demo)),
                            eventTag: "claimItgBet",
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 5:
                        data = (_b.sent()).data;
                        this.bridge.emitEvent("HAS_CLAIMED", data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //     Ein
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Retrieve model for an ITG game
     * @param serviceName
     */
    PlatformITF.prototype.getEinModel = function (serviceName, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        serviceName = serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            eventTag: "getEinModel",
                            url: "/itf/game/model/EIN/".concat(serviceName, "?demoMode=").concat(demo),
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.GAMEMODEL,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * retrieve a specific ticket
     * @param ticketId
     * @param demo
     * @returns a ticket or null if no ticket was found
     */
    PlatformITF.prototype.getEinTicket = function (ticketId, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        config = {
                            method: "get",
                            eventTag: "getEinTicket",
                            url: "/itf/game/EIN/tickets?demoMode=".concat(demo, "&filter.engineHistoryId=").concat(ticketId),
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.TICKETSLIST3,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.length ? data[0] : null];
                }
            });
        });
    };
    /**
     * Retrieve all non claimed ticket for a game (and current player)
     * @param serviceName
     * @param demo
     */
    PlatformITF.prototype.getEinTickets = function (serviceName, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._itgBetMediaType()];
                    case 1:
                        if ((_b.sent()) !== "application/vnd.fgs.instant.ticket.betManualClaim-1+json") {
                            // mode auto claim, no resume game
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 2:
                        _b.sent();
                        serviceName = serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            eventTag: "getEinTickets",
                            url: "/itf/game/EIN/tickets?demoMode=".concat(demo, "&filter.ticketStatus=DRAWN&filter.gameCode=").concat(serviceName),
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.TICKETSLIST3,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 3:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Place a bet on an ITG game.
     * @param betRequest the bet request object containing the needed bet request informations.
     */
    PlatformITF.prototype.createEinBet = function (betRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._isMultiBet()) {
                            return [2 /*return*/, new Promise(function () { })];
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(betRequest.demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            mediaType: "application/vnd.fgs.instant.ticket.betManualClaim-1+json",
                            stake: betRequest.stake,
                            data: {
                                gameClientData: betRequest.gameClientData,
                            },
                        };
                        config = {
                            method: "post",
                            data: body,
                            url: "".concat(EPath.BET, "?demoMode=").concat(Boolean(betRequest.demo)),
                            eventTag: "createEinBet",
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                            extraTagData: {
                                response: {
                                    gameCount: ++gameCount,
                                },
                            },
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        this.bridge.emitEvent("HAS_BET", data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     *
     * @param betRequest
     * @param ticketId
     */
    PlatformITF.prototype.updateEinBet = function (betRequest, ticketId) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._itgBetMediaType()];
                    case 1:
                        if ((_b.sent()) !== "application/vnd.fgs.instant.ticket.betManualClaim-1+json") {
                            // mode auto claim, do nothing on update
                            return [2 /*return*/, this.ticketsMap[ticketId]];
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(betRequest.demo ? EGameMode.demo : EGameMode.normal)];
                    case 2:
                        _b.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            stake: betRequest.stake,
                            mediaType: "application/vnd.fgs.instant.ticket.betManualClaim-1+json",
                            data: {
                                id: ticketId,
                                gameClientData: betRequest.gameClientData,
                            },
                        };
                        config = {
                            method: "put",
                            data: body,
                            url: "".concat(EPath.BET, "?demoMode=").concat(Boolean(betRequest.demo)),
                            eventTag: "updateEinBet",
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 3:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Claim a ticket on an ITG game.
     * @param betRequest the bet request object containing the needed bet request informations.
     * @param ticketId the id of the ticket to claim.
     */
    PlatformITF.prototype.claimEinBet = function (betRequest, ticketId) {
        return __awaiter(this, void 0, void 0, function () {
            var storedData, applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._itgBetMediaType()];
                    case 1:
                        if (!((_b.sent()) !== "application/vnd.fgs.instant.ticket.betManualClaim-1+json")) return [3 /*break*/, 4];
                        storedData = this.ticketsMap[ticketId];
                        if (!storedData) return [3 /*break*/, 3];
                        // clear purse the old way
                        return [4 /*yield*/, this.bridge.channel.clearPurse(this.masksMap[ticketId])];
                    case 2:
                        // clear purse the old way
                        _b.sent();
                        this.bridge.displayedAmount = null;
                        // delete stored infos
                        delete this.masksMap[ticketId];
                        delete this.ticketsMap[ticketId];
                        this.bridge.emitEvent("HAS_CLAIMED", storedData);
                        _b.label = 3;
                    case 3: return [2 /*return*/, storedData];
                    case 4: return [4 /*yield*/, this.bridge.updateGameMode(betRequest.demo ? EGameMode.demo : EGameMode.normal)];
                    case 5:
                        _b.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            stake: betRequest.stake,
                            mediaType: "application/vnd.fgs.instant.ticket.betManualClaim-1+json",
                            data: {
                                id: ticketId,
                                gameClientData: betRequest.gameClientData,
                                status: "CLAIMED",
                            },
                        };
                        config = {
                            method: "put",
                            data: body,
                            url: "".concat(EPath.BET, "?demoMode=").concat(Boolean(betRequest.demo)),
                            eventTag: "claimEinBet",
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 6:
                        data = (_b.sent()).data;
                        this.bridge.emitEvent("HAS_CLAIMED", data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //    MOTORS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformITF.prototype.getMtrModel = function (service, demoMode) {
        if (demoMode === void 0) { demoMode = false; }
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demoMode ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = service.applicationId || this.bridge.channel.type;
                        serviceName = service.serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            url: "".concat(EPath.GAMEMODEL, "/").concat(applicationId, "/").concat(serviceName, "?demoMode=").concat(demoMode),
                            eventTag: "getMtrModel",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.GAMEMODEL,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformITF.prototype.getMtrSession = function (service, demoMode, sessionId) {
        return __awaiter(this, void 0, void 0, function () {
            var parameters, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demoMode ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        parameters = [
                            "applicationId=".concat(service.applicationId || this.bridge.channel.type),
                            "serviceName=".concat(service.serviceName || this.bridge.channel.name),
                            "demoMode=".concat(demoMode || false),
                        ];
                        if (sessionId) {
                            parameters.push("gameSessionId=".concat(sessionId));
                        }
                        config = {
                            method: "get",
                            url: "".concat(EPath.GAMESESSIONS, "?").concat(parameters.join("&")),
                            eventTag: "getMtrSession",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.GAMESESSIONS,
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.GAMESESSIONSPARAMETERS,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        if (!data || !data.length) {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, data[0]];
                }
            });
        });
    };
    PlatformITF.prototype.createMtrBet = function (betRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var demoMode, applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._isMultiBet()) {
                            return [2 /*return*/, new Promise(function (resolve) { })];
                        }
                        demoMode = betRequest.demo === undefined ? false : betRequest.demo;
                        return [4 /*yield*/, this.bridge.updateGameMode(demoMode ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            stake: betRequest.stake,
                            data: betRequest.parameters,
                        };
                        config = {
                            method: "post",
                            url: "".concat(EPath.BET, "?demoMode=").concat(demoMode),
                            eventTag: "createMtrBet",
                            data: body,
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                            extraTagData: {
                                response: {
                                    gameCount: ++gameCount,
                                },
                            },
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        // The id here is a number. It should be a string.
                        data.data.data.id = data.data.data.id.toString();
                        this.bridge.emitEvent("HAS_BET", data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformITF.prototype.updateMtrBet = function (betUpdateRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var demoMode, applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        demoMode = betUpdateRequest.demo === undefined ? false : betUpdateRequest.demo;
                        return [4 /*yield*/, this.bridge.updateGameMode(demoMode ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = betUpdateRequest.applicationId || this.bridge.channel.type;
                        serviceName = betUpdateRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            data: betUpdateRequest.parameters,
                        };
                        config = {
                            method: "put",
                            url: "".concat(EPath.BET, "?demoMode=").concat(demoMode),
                            eventTag: "updateMtrBet",
                            data: body,
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        // The id here is a number. It should be a string.
                        data.data.data.id = data.data.data.id.toString();
                        if (data.wonAmount) {
                            this.bridge.emitEvent("HAS_CLAIMED", data);
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //     PRESTO
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformITF.prototype.getPrsTicketInfos = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._request.request({
                            method: "get",
                            url: "/itf/game/presto/ticket",
                            eventTag: "gePrsTicketInfos",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.PRS_TICKET_INFOS,
                                _a),
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //     GAMIF
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformITF.prototype.getGamifContext = function (service) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        applicationId = service.applicationId || this.bridge.channel.type;
                        serviceName = service.serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            url: "".concat(EPath.GAMIFCONTEXT, "/").concat(serviceName),
                            eventTag: "getGamifContext",
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.GAMIFCONTEXT,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //   MULTIPASS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformITF.prototype.getMtpModel = function (service, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = service.applicationId || this.bridge.channel.type;
                        serviceName = service.serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            url: "".concat(EPath.GAMEMODEL, "/").concat(applicationId, "/").concat(serviceName, "?demoMode=").concat(Boolean(demo)),
                            eventTag: "getMtpModel",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.GAMEMODEL,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformITF.prototype.getMtpRoom = function (service, roomId, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = service.applicationId || this.bridge.channel.type;
                        serviceName = service.serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            url: "itf/game/".concat(applicationId, "/").concat(serviceName, "/rooms/").concat(roomId, "?demoMode=").concat(Boolean(demo)),
                            eventTag: "getMtpRoom",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.MTP_GETROOM,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformITF.prototype.getMtpRooms = function (service, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        serviceName = service.serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            url: "".concat(EPath.MTP_ROOMS, "?demoMode=").concat(Boolean(demo)),
                            eventTag: "getMtpRooms",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.MTP_GETROOMS,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.filter(function (r) { return r.serviceName === serviceName; })];
                }
            });
        });
    };
    PlatformITF.prototype.getMtpSession = function (service, roomId, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = service.applicationId || this.bridge.channel.type;
                        serviceName = service.serviceName || this.bridge.channel.name;
                        config = {
                            method: "get",
                            url: "".concat(EPath.MTP_SESSION, "?applicationId=").concat(applicationId, "&serviceName=").concat(serviceName, "&roomId=").concat(roomId, "&demoMode=").concat(Boolean(demo)),
                            eventTag: "getMtpSession",
                            headers: (_a = {},
                                _a[EHeader.ACCEPT] = EMediaTypes.MTP_GETSESSION,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformITF.prototype.enterMtpRoom = function (enterRoomRequest, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = enterRoomRequest.applicationId || this.bridge.channel.type;
                        serviceName = enterRoomRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            roomCriteria: {
                                betLevelId: enterRoomRequest.betLevelId,
                            },
                        };
                        config = {
                            method: "post",
                            url: "".concat(EPath.MTP_ENTER, "?demoMode=").concat(Boolean(demo)),
                            eventTag: "enterMtpRoom",
                            data: body,
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.MTP_ENTERROOM_REQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.MTP_ENTERROOM_RESULT,
                                _a),
                        };
                        return [4 /*yield*/, this._request.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformITF.prototype.enterMtpRoomAndBet = function (enterAndBetRequest, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, mediaType, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = enterAndBetRequest.applicationId || this.bridge.channel.type;
                        serviceName = enterAndBetRequest.serviceName || this.bridge.channel.name;
                        mediaType = "application/vnd.lotsys.mtp.game.engine.room.criteria-and-bet-1+json";
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            stake: enterAndBetRequest.stake,
                            mediaType: mediaType,
                            data: {
                                data: enterAndBetRequest.parameters || {},
                                betLevelId: enterAndBetRequest.betLevelId,
                                channelId: "FDJ_WEB",
                            },
                        };
                        config = {
                            method: "post",
                            url: "".concat(EPath.BET, "?demoMode=").concat(Boolean(demo)),
                            eventTag: "enterMtpRoomAndBet",
                            data: body,
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        this.bridge.emitEvent("HAS_BET", data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformITF.prototype.createMtpBet = function (betRequest, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._isMultiBet()) {
                            return [2 /*return*/, new Promise(function (resolve) { })];
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            stake: betRequest.stake,
                            data: {
                                data: betRequest.parameters || {},
                                roomId: betRequest.roomId,
                                gameSessionId: betRequest.sessionId,
                                channelId: "FDJ_WEB",
                            },
                        };
                        config = {
                            method: "post",
                            url: "".concat(EPath.BET, "?demoMode=").concat(Boolean(demo)),
                            eventTag: "createMtpBet",
                            data: body,
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        this.bridge.emitEvent("HAS_BET", data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformITF.prototype.updateMtpBet = function (betRequest, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, body, config, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? EGameMode.demo : EGameMode.normal)];
                    case 1:
                        _b.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        body = {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            data: {
                                eventName: betRequest.parameters.eventName,
                                data: betRequest.parameters || {},
                                roomId: betRequest.roomId,
                                gameSessionId: betRequest.sessionId,
                                playerGameSessionId: betRequest.playerGameSessionId,
                                channelId: "FDJ_WEB",
                            },
                        };
                        config = {
                            method: "put",
                            url: "".concat(EPath.BET, "?demoMode=").concat(Boolean(demo)),
                            eventTag: "updateMtpBet",
                            data: body,
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = EMediaTypes.BETREQUEST,
                                _a[EHeader.ACCEPT] = EMediaTypes.BETRESULT,
                                _a),
                        };
                        return [4 /*yield*/, this._requestWithToken.request(config)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformITF.prototype.createNotificationsChannel = function (settings) {
        return __awaiter(this, void 0, void 0, function () {
            var pushConfig, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pushConfig = this.bridge.configuration.paths.push[this.bridge.channel.hostKey] ||
                            this.bridge.configuration.paths.push[""];
                        settings.hostName = settings.hostName || pushConfig.hostName;
                        settings.port = settings.port || pushConfig.port;
                        settings.secure = settings.secure || pushConfig.secure;
                        return [4 /*yield*/, (0, tools_1.loadScript)(pushConfig.libPath)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, window["pushClient"].initializePush()];
                    case 2:
                        p = _a.sent();
                        return [2 /*return*/, p.createChannel(settings)];
                }
            });
        });
    };
    /**
     * Retrieve bet mode
     */
    PlatformITF.prototype._itgBetMediaType = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bridge.getCurrentGameConfiguration()];
                    case 1: return [2 /*return*/, (_a.sent()).betMode];
                }
            });
        });
    };
    /**
     * Get the content type from a map of HTTP headers
     * @param headers HTTP headers
     */
    PlatformITF.prototype._getHeader = function (headers, headerName) {
        var header = headers[headerName] || headers[headerName.toLowerCase()];
        if (header) {
            header = header.split(";")[0];
        }
        return header;
    };
    /**
     * Handle errors on reponse in error
     * @param error the error object that comes from the request
     */
    PlatformITF.prototype._handleResponseErrors = function (error) {
        return __awaiter(this, void 0, void 0, function () {
            var genericError;
            return __generator(this, function (_a) {
                genericError = { code: "default" };
                // no response ?
                if (!error.response) {
                    this.bridge.channel.emitRequestErrorTag(error.config, {
                        data: {},
                        status: -1,
                        headers: {},
                    });
                    throw genericError;
                }
                this.bridge.channel.emitRequestErrorTag(error.config, error.response);
                // not logged
                if (error.response.status === 401) {
                    return [2 /*return*/, this._retryOn401(error.config)];
                }
                // no headers in response
                if (!error.response.headers) {
                    throw genericError;
                }
                // response content type is not an error
                if (this._getHeader(error.response.headers, EHeader.CONTENTTYPE) !== EMediaTypes.ERROR) {
                    throw genericError;
                }
                // no data in error response
                if (!error.response.data) {
                    throw genericError;
                }
                throw error.response.data;
            });
        });
    };
    /**
     * Retry 401 errored request.
     * Will try to relog user and get a new replay token if necessary.
     * @param config - original axios request
     */
    PlatformITF.prototype._retryOn401 = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var userNotLogged, gameMode, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        userNotLogged = { code: "unauthorized" };
                        if (config.retries !== undefined) {
                            if (config.retries >= MAX_RETRIES_ON_401) {
                                throw userNotLogged;
                            }
                            config.retries++;
                        }
                        else {
                            config.retries = 1;
                        }
                        return [4 /*yield*/, this.bridge.getGameMode()];
                    case 1:
                        gameMode = _c.sent();
                        if (!Object.values(EGameMode).includes(gameMode)) {
                            throw userNotLogged;
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(gameMode, true)];
                    case 2:
                        _c.sent();
                        if (!config.headers["replay-token"]) return [3 /*break*/, 4];
                        _a = config.headers;
                        _b = "replay-token";
                        return [4 /*yield*/, this.getReplayProtectionToken()];
                    case 3:
                        _a[_b] = _c.sent();
                        _c.label = 4;
                    case 4: return [2 /*return*/, this._request.request(config)];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //   MOCKS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformITF.prototype.mockAddMTR = function (applicationId, serviceName, mockValues) {
        return __awaiter(this, void 0, void 0, function () {
            var mockData, model;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mockValues.unshift(null);
                        mockData = mockValues.join("&elements=");
                        return [4 /*yield*/, this.getMtrModel({ applicationId: applicationId, serviceName: serviceName })];
                    case 1:
                        model = _b.sent();
                        return [4 /*yield*/, this._request.post("".concat(this.bridge.mocksConfiguration.path, "/add?gameModelId=").concat(model.data.gmid).concat(mockData), {
                                headers: (_a = {},
                                    _a[EHeader.CONTENTTYPE] = "application/vnd.lotsys.xs.motors.enveloppe.base-1+json",
                                    _a),
                            })];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PlatformITF.prototype.mockResetMTR = function (applicationId, serviceName) {
        return __awaiter(this, void 0, void 0, function () {
            var model;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getMtrModel({ applicationId: applicationId, serviceName: serviceName })];
                    case 1:
                        model = _b.sent();
                        return [4 /*yield*/, this._request.get("".concat(this.bridge.mocksConfiguration.path, "/reset?gameModelId=").concat(model.data.gmid), {
                                headers: (_a = {},
                                    _a[EHeader.CONTENTTYPE] = "application/vnd.lotsys.xs.motors.enveloppe.base-1+json",
                                    _a),
                            })];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PlatformITF.prototype.mockAddITG = function (applicationId, mockValues) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._request.post("".concat(this.bridge.mocksConfiguration.path, "/draws"), mockValues, {
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = "application/vnd.fgs.itg.mock.draw.summary-1+json",
                                _a),
                        })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PlatformITF.prototype.mockGetITG = function (applicationId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._request.get("".concat(this.bridge.mocksConfiguration.path, "/draws"), {
                            headers: (_a = {},
                                _a[EHeader.CONTENTTYPE] = "application/vnd.fgs.itg.mock.draw.summary.list-1+json",
                                _a),
                        })];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    PlatformITF.prototype.mockResetITG = function (applicationId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.delete("".concat(this.bridge.mocksConfiguration.path, "/draws"))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PlatformITF.prototype.mockResetAllITG = function (applicationId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.delete("".concat(this.bridge.mocksConfiguration.path, "/draws/all"))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Very poor way to protect the player from a multiple bet bug coming from a game.
     */
    PlatformITF.prototype._isMultiBet = function () {
        var now = new Date();
        if (this._lastBetDate) {
            var delta = now.getTime() - this._lastBetDate.getTime();
            if (delta <
                (this._configuration.multiBetDelay
                    ? this._configuration.multiBetDelay
                    : DEFAULT_MULTIBET_DELAY)) {
                this.bridge.emitEvent("TAG", { eventType: "error", event: "multibet-occurence" });
                return true;
            }
        }
        this._lastBetDate = now;
        return false;
    };
    return PlatformITF;
}());
exports.default = PlatformITF;
//# sourceMappingURL=platform-itf.js.map