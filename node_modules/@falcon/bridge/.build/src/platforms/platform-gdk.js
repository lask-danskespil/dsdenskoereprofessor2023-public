"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EItgBetMode = exports.EHeader = exports.EPath = exports.EMediaTypes = void 0;
var axios_1 = require("axios");
var falcon_game_bridge_1 = require("../falcon-game-bridge");
var tools_1 = require("../tools/tools");
var common_1 = require("../typings/common");
var token_store_1 = require("../tools/token-store");
var EMediaTypes;
(function (EMediaTypes) {
    EMediaTypes["BETANDCLAIM"] = "application/vnd.lotsys.itg.ticket.betManualClaim-1+json";
    EMediaTypes["AUTOCLAIM"] = "application/vnd.lotsys.itg.ticket.betAutoClaim-1+json";
})(EMediaTypes = exports.EMediaTypes || (exports.EMediaTypes = {}));
var EPath;
(function (EPath) {
    EPath["REPLAYPROTECTION"] = "/token";
    EPath["ITFSESSION"] = "/session";
    EPath["GETSTATE"] = "/state";
    EPath["GAMECONFIGURATION"] = "/gameConfig";
})(EPath = exports.EPath || (exports.EPath = {}));
var EHeader;
(function (EHeader) {
    EHeader["CONTENTTYPE"] = "Content-Type";
    EHeader["ACCEPT"] = "Accept";
    EHeader["TOKEN"] = "replay-token";
    EHeader["ASK_TOKEN"] = "replay-token-generate";
    EHeader["GENERATED_TOKEN"] = "replay-token-generated";
})(EHeader = exports.EHeader || (exports.EHeader = {}));
var EItgBetMode;
(function (EItgBetMode) {
    EItgBetMode["AUTO"] = "BET_AUTO_CLAIM";
    EItgBetMode["MANUAL"] = "BET_MANUAL_CLAIM";
})(EItgBetMode = exports.EItgBetMode || (exports.EItgBetMode = {}));
var DEFAULT_MULTIBET_DELAY = 3000;
var PlatformGDK = /** @class */ (function () {
    /**
     * Constructor
     * @param configuration the platform configuration
     */
    function PlatformGDK(bridge) {
        var _this = this;
        this.bridge = bridge;
        this.ticketsMap = {};
        this.masksMap = {};
        // Save configuration
        this._configuration = bridge.configuration;
        // instanciate tokenStore
        this._tokens = new token_store_1.TokenStore(function () { return _this.getReplayProtectionToken(); });
        // Request without token instance
        this._request = axios_1.default.create({ baseURL: this._configuration.paths.applications.GDK });
        this._request.interceptors.response.use(function (a) { return a; }, function (e) { return _this._handleResponseErrors(e); });
        // Request with token instance
        this._requestWithToken = axios_1.default.create({ baseURL: this._configuration.paths.applications.GDK });
        this._requestWithToken.interceptors.request.use(function (config) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        config.headers[EHeader.ASK_TOKEN] = true;
                        _a = config.headers;
                        _b = EHeader.TOKEN;
                        return [4 /*yield*/, this._tokens.get()];
                    case 1:
                        _a[_b] = _c.sent();
                        return [2 /*return*/, config];
                }
            });
        }); }, function (error) {
            throw error;
        });
        this._requestWithToken.interceptors.response.use(function (response) {
            // store generated token if one is present in the response
            if (response && response.headers && response.headers[EHeader.GENERATED_TOKEN]) {
                _this._tokens.add(response.headers[EHeader.GENERATED_TOKEN]);
            }
            return response;
        }, function (error) {
            return _this._handleResponseErrors(error);
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //    COMMON
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Retrive a replay protection token
     */
    PlatformGDK.prototype.getReplayProtectionToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.post(EPath.REPLAYPROTECTION, {})];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.value];
                }
            });
        });
    };
    /**
     * Retrieve state information from IF in order to authenticate
     */
    PlatformGDK.prototype.getState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.get(EPath.GETSTATE)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Creates an IF session
     * @param userInformation
     */
    PlatformGDK.prototype.createSession = function (sessionToken, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var body, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sessionToken = sessionToken || {
                            provider: this.bridge.channel.lotteryCode,
                            state: "dummy_state",
                            value: "dummy_value",
                        };
                        body = {
                            demoMode: demo,
                            lottery: sessionToken.provider,
                            state: sessionToken.state,
                            token: sessionToken.value,
                        };
                        return [4 /*yield*/, this._request.post(EPath.ITFSESSION, body)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retrive game configuration, try to get the config from getGameConfigurationService, fallback to loadJSON on error.
     */
    PlatformGDK.prototype.getCurrentGameConfig = function (lotteryCode, service) {
        return __awaiter(this, void 0, void 0, function () {
            var data, e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 5]);
                        return [4 /*yield*/, this._request.get(EPath.GAMECONFIGURATION)];
                    case 1:
                        data = (_b.sent()).data;
                        return [3 /*break*/, 5];
                    case 2:
                        e_1 = _b.sent();
                        // eslint-disable-next-line no-console
                        console.log("no response from getGameConfiguration service, loading conf from disk");
                        _a = tools_1.loadJSON;
                        return [4 /*yield*/, this.bridge.getPaths()];
                    case 3: return [4 /*yield*/, _a.apply(void 0, [(_b.sent()).configPath])];
                    case 4:
                        data = _b.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retrieve games compatibility for a lottery
     */
    PlatformGDK.prototype.getCompatibility = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, []];
            });
        });
    };
    /**
     * Retrieve games catalog for a lottery
     */
    PlatformGDK.prototype.getGames = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, []];
            });
        });
    };
    /**
     * Retrieves players information
     * @param playersIds string[]
     * @return IPlayerInformation[]
     */
    PlatformGDK.prototype.getPlayersInfo = function (playersIds, lotteryCode) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.get("/players?playersIds=".concat(playersIds.join(",")))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retrieves current player information
     * @return IPlayerInformation
     */
    PlatformGDK.prototype.getCurrentPlayerInfo = function (lotteryCode) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lotteryCode = lotteryCode || this.bridge.channel.lotteryCode;
                        return [4 /*yield*/, this._request.get("/player")];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retrieves the player purses for a currency
     * @param currencyCode
     */
    PlatformGDK.prototype.getPlayerCurrency = function (currencyCode) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                data = [
                    // @TODO make a gameserver service
                    {
                        balance: {
                            currency: "XTK",
                            value: Math.floor(Math.random() * 10000),
                        },
                        playerId: "",
                        restrictions: {
                            applicationId: "mtp",
                            serviceName: "any",
                        },
                        type: common_1.ECurrencyPurseType.GIFT,
                        validFrom: "",
                        validTo: "",
                    },
                    {
                        balance: {
                            currency: "XTK",
                            value: Math.floor(Math.random() * 10000),
                        },
                        playerId: "",
                        restrictions: {
                            applicationId: "mtp",
                            serviceName: "any",
                        },
                        type: common_1.ECurrencyPurseType.DEFAULT,
                        validFrom: "",
                        validTo: "",
                    },
                ];
                return [2 /*return*/, data];
            });
        });
    };
    /**
     * Return avatar url for id
     * @param id
     */
    PlatformGDK.prototype.getAvatarUrl = function (id) {
        return "default";
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //   Jackpots
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Old jackpot palance service
     * @param service Old jackpot palance service
     */
    PlatformGDK.prototype.getJackpotInformation = function (service) {
        if (service === void 0) { service = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error("Old jackpot is no more supported on 2.9+ / 3.5+");
            });
        });
    };
    /**
     * Returns the current jackpots.
     * @param service the service's informations.
     */
    PlatformGDK.prototype.getJackpotConfiguration = function (serviceName) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.get("/jackpots/".concat(serviceName))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //     ITG
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Retrieve model for an ITG game
     * @param serviceName
     */
    PlatformGDK.prototype.getItgModel = function (serviceName) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceName = serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.get("/itf/game/model/ITG/".concat(serviceName))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * retrieve a specific ticket
     * @param ticketId
     * @returns a ticket or null if no ticket was found
     */
    PlatformGDK.prototype.getItgTicket = function (ticketId, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this._requestWithToken.get("/itg/tickets/".concat(ticketId))];
                    case 2:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.length ? data[0] : null];
                }
            });
        });
    };
    /**
     * Retrieve all non claimed ticket for a game (and current player)
     * @param serviceName
     * @param demo
     */
    PlatformGDK.prototype.getItgTickets = function (serviceName, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.itgBetMediaType()];
                    case 1:
                        if ((_a.sent()) !== EItgBetMode.MANUAL) {
                            // mode auto claim, no resume game
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(demo ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 2:
                        _a.sent();
                        serviceName = serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._requestWithToken.get("/itg/tickets?demoMode=".concat(demo, "&ticketStatus=OPENED&gameCode=").concat(serviceName))];
                    case 3:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Place a bet on an ITG game.
     * @param betRequest the bet request object containing the needed bet request informations.
     */
    PlatformGDK.prototype.createITGBet = function (betRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var mediaType, applicationId, serviceName, data, storedData, mask;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isMultiBet()) {
                            return [2 /*return*/, new Promise(function (resolve) { })];
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(betRequest.demo ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.itgBetMediaType()];
                    case 2:
                        mediaType = _a.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = (betRequest.serviceName || this.bridge.channel.name).toLowerCase();
                        return [4 /*yield*/, this._requestWithToken.post("/itg/".concat(betRequest.serviceName, "/tickets?demoMode=").concat(Boolean(betRequest.demo)), {
                                applicationId: applicationId,
                                serviceName: serviceName,
                                mediaType: mediaType,
                                stake: betRequest.stake,
                                data: betRequest.revelationData || betRequest.eventReference
                                    ? {
                                        revelationData: betRequest.revelationData,
                                        eventReference: betRequest.eventReference,
                                    }
                                    : undefined,
                            })];
                    case 3:
                        data = (_a.sent()).data;
                        if (!(mediaType !== EMediaTypes.BETANDCLAIM)) return [3 /*break*/, 5];
                        storedData = JSON.parse(JSON.stringify(data));
                        delete storedData.message;
                        return [4 /*yield*/, this.bridge.channel.maskPurse({
                                betAmount: betRequest.stake,
                                purseInformation: null,
                                winAmount: storedData.wonAmount,
                            })];
                    case 4:
                        mask = _a.sent();
                        this.bridge.displayedAmount = mask;
                        this.masksMap[data.data.id] = mask.maskId;
                        this.ticketsMap[data.data.id] = storedData;
                        _a.label = 5;
                    case 5: return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     *
     * @param ticketId
     * @param data data that will be stored as current revelation data
     * @param demo
     */
    PlatformGDK.prototype.updateItgBet = function (betRequest, ticketId) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.itgBetMediaType()];
                    case 1:
                        if ((_a.sent()) !== EItgBetMode.MANUAL) {
                            // mode auto claim, do nothing on update
                            return [2 /*return*/, this.ticketsMap[ticketId]];
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(betRequest.demo ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 2:
                        _a.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._requestWithToken.put("/itg/".concat(betRequest.serviceName, "/tickets/").concat(ticketId), {
                                applicationId: applicationId,
                                serviceName: serviceName,
                                stake: betRequest.stake,
                                data: {
                                    id: ticketId,
                                    revelationData: betRequest.revelationData,
                                },
                            })];
                    case 3:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Claim a ticket on an ITG game.
     * @param betRequest the bet request object containing the needed bet request informations.
     * @param ticketId the id of the ticket to claim.
     */
    PlatformGDK.prototype.claimItgBet = function (betRequest, ticketId) {
        return __awaiter(this, void 0, void 0, function () {
            var storedData, applicationId, serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.itgBetMediaType()];
                    case 1:
                        if (!((_a.sent()) !== EItgBetMode.MANUAL)) return [3 /*break*/, 3];
                        storedData = this.ticketsMap[ticketId];
                        // clear purse the old way
                        return [4 /*yield*/, this.bridge.channel.clearPurse(this.masksMap[ticketId])];
                    case 2:
                        // clear purse the old way
                        _a.sent();
                        this.bridge.displayedAmount = null;
                        // delete stored infos
                        delete this.masksMap[ticketId];
                        delete this.ticketsMap[ticketId];
                        return [2 /*return*/, storedData];
                    case 3: return [4 /*yield*/, this.bridge.updateGameMode(betRequest.demo ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 4:
                        _a.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._requestWithToken.put("/itg/".concat(betRequest.serviceName, "/tickets/").concat(ticketId), {
                                applicationId: applicationId,
                                serviceName: serviceName,
                                stake: betRequest.stake,
                                data: {
                                    id: ticketId,
                                    revelationData: betRequest.revelationData,
                                    status: "CLAIMED",
                                },
                            })];
                    case 5:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //    MOTORS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformGDK.prototype.getMtrModel = function (service, demoMode) {
        if (demoMode === void 0) { demoMode = false; }
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demoMode ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 1:
                        _a.sent();
                        serviceName = service.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.get("/mtr/".concat(serviceName, "/model?demoMode=").concat(demoMode))];
                    case 2:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get Mtr session.
     * @template TGameData Response game data.
     * @template TEventResponse Response event response.
     * @template TEventParameters Event parameters.
     * @param service
     * @param demoMode
     * @param sessionId
     */
    PlatformGDK.prototype.getMtrSession = function (service, demoMode, sessionId) {
        if (demoMode === void 0) { demoMode = false; }
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, parameters, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demoMode ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 1:
                        _a.sent();
                        serviceName = service.serviceName || this.bridge.channel.name;
                        parameters = ["demoMode=".concat(demoMode)];
                        if (sessionId) {
                            parameters.push("gameSessionId=".concat(sessionId));
                        }
                        return [4 /*yield*/, this._request.get("/mtr/".concat(serviceName, "/session").concat(parameters.length ? "?".concat(parameters.join("&")) : ""))];
                    case 2:
                        data = (_a.sent()).data;
                        return [2 /*return*/, Object.keys(data).length > 0 ? data : undefined];
                }
            });
        });
    };
    /**
     * Create Mtr bet.
     * @template TGameData Response game data.
     * @template TEventResponse Response event response
     * @param betRequest
     */
    PlatformGDK.prototype.createMtrBet = function (betRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var demoMode, serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isMultiBet()) {
                            return [2 /*return*/, new Promise(function (resolve) { })];
                        }
                        demoMode = betRequest.demo === undefined ? false : betRequest.demo;
                        return [4 /*yield*/, this.bridge.updateGameMode(demoMode ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 1:
                        _a.sent();
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.post("/mtr/".concat(serviceName, "/bet?demoMode=").concat(demoMode), betRequest.parameters.betId !== undefined
                                ? betRequest.parameters
                                : {
                                    stake: betRequest.stake,
                                    data: betRequest.parameters,
                                })];
                    case 2:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Update Mtr bet.
     * @template TGameData Response game data.
     * @template TEventRespponse Response event response
     * @param eventRequest
     */
    PlatformGDK.prototype.updateMtrBet = function (eventRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var demoMode, serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        demoMode = eventRequest.demo === undefined ? false : eventRequest.demo;
                        return [4 /*yield*/, this.bridge.updateGameMode(demoMode ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 1:
                        _a.sent();
                        serviceName = eventRequest.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.put("/mtr/".concat(serviceName, "/bet?demoMode=").concat(demoMode), eventRequest.parameters)];
                    case 2:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //     PRESTO
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformGDK.prototype.getPrsTicketInfos = function () {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceName = this.bridge.channel.name;
                        return [4 /*yield*/, this._request.request({
                                method: "get",
                                url: "/mtr/".concat(serviceName, "/ticket"),
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //     GAMIF
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformGDK.prototype.getGamifContext = function (service) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceName = service.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.get("/gamif/getcontext/".concat(serviceName))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //   MULTIPASS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformGDK.prototype.getMtpModel = function (service, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceName = service.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.get("/mtp/games/".concat(serviceName, "/params?demoMode=").concat(Boolean(demo)))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformGDK.prototype.getMtpRoom = function (service, roomId, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceName = service.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.get("/mtp/games/".concat(serviceName, "/rooms/").concat(roomId, "?demoMode=").concat(Boolean(demo)))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformGDK.prototype.getMtpRooms = function (service, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceName = service.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.get("/mtp/games/".concat(serviceName, "/rooms?demoMode=").concat(Boolean(demo)))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformGDK.prototype.getMtpSession = function (service, roomId, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceName = service.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.get("/mtp/games/".concat(serviceName, "/rooms/").concat(roomId, "/session?demoMode=").concat(Boolean(demo)))];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformGDK.prototype.enterMtpRoom = function (enterRoomRequest, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceName = enterRoomRequest.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.put("/mtp/games/".concat(serviceName, "/rooms?demoMode=").concat(Boolean(demo)), {
                                betLevelId: enterRoomRequest.betLevelId,
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformGDK.prototype.enterMtpRoomAndBet = function (enterAndBetRequest, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceName = enterAndBetRequest.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._request.post("/mtp/games/".concat(serviceName, "/rooms/bet?demoMode=").concat(Boolean(demo)), {
                                betLevelId: enterAndBetRequest.betLevelId,
                                amount: enterAndBetRequest.stake,
                                data: enterAndBetRequest.parameters || {},
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformGDK.prototype.createMtpBet = function (betRequest, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var applicationId, serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isMultiBet()) {
                            return [2 /*return*/, new Promise(function (resolve) { })];
                        }
                        return [4 /*yield*/, this.bridge.updateGameMode(demo ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 1:
                        _a.sent();
                        applicationId = betRequest.applicationId || this.bridge.channel.type;
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._requestWithToken.post("/mtp/games/".concat(serviceName, "/rooms/").concat(betRequest.roomId, "/bet?demoMode=").concat(Boolean(demo)), {
                                amount: betRequest.stake,
                                data: betRequest.parameters || {},
                            })];
                    case 2:
                        data = (_a.sent()).data;
                        this.bridge.emitEvent("HAS_BET", data);
                        this.bridge.emitEvent("HAS_CLAIMED", {
                            applicationId: applicationId,
                            serviceName: serviceName,
                            wonAmount: data.wonAmount,
                            demo: Boolean(betRequest.demo),
                        });
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformGDK.prototype.updateMtpBet = function (betRequest, demo) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceName, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 1:
                        _a.sent();
                        serviceName = betRequest.serviceName || this.bridge.channel.name;
                        return [4 /*yield*/, this._requestWithToken.put("/mtp/games/".concat(serviceName, "/rooms/").concat(betRequest.roomId, "/bet?demoMode=").concat(Boolean(demo)), {
                                eventName: betRequest.parameters.eventName,
                                playerGameSessionId: betRequest.playerGameSessionId,
                                data: betRequest.parameters || {},
                            })];
                    case 2:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformGDK.prototype.createNotificationsChannel = function (settings) {
        return __awaiter(this, void 0, void 0, function () {
            var pushConfig, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pushConfig = this.bridge.configuration.paths.push[this.bridge.channel.hostKey] ||
                            this.bridge.configuration.paths.push[""];
                        settings.hostName = settings.hostName || window.location.hostname;
                        settings.port = settings.port || parseInt(window.location.port);
                        settings.secure = settings.secure || pushConfig.secure;
                        return [4 /*yield*/, (0, tools_1.loadScript)(pushConfig.libPath)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, window["pushClient"].initializePush()];
                    case 2:
                        p = _a.sent();
                        return [2 /*return*/, p.createChannel(settings)];
                }
            });
        });
    };
    /**
     * Retrieve bet mode
     */
    PlatformGDK.prototype.itgBetMediaType = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var config;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bridge.getCurrentGameConfiguration()];
                    case 1:
                        config = _b.sent();
                        return [2 /*return*/, (_a = config.betMode) !== null && _a !== void 0 ? _a : config.selectedBetMode];
                }
            });
        });
    };
    /**
     * Handle errors on reponse in error
     * @param error the error object that comes from the request
     */
    PlatformGDK.prototype._handleResponseErrors = function (error) {
        return __awaiter(this, void 0, void 0, function () {
            var genericError, userNotLogged;
            return __generator(this, function (_a) {
                genericError = { code: "default" };
                userNotLogged = { code: "unauthorized" };
                // no response ?
                if (!error.response) {
                    throw genericError;
                }
                // not logged
                if (error.response.status === 401) {
                    // TODO: Retry on 401
                    throw userNotLogged;
                }
                // no headers in response
                if (!error.response.headers) {
                    throw genericError;
                }
                // no data in error response
                if (!error.response.data) {
                    throw genericError;
                }
                throw error.response.data;
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //   MOCKS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformGDK.prototype.mockAddMTR = function (applicationId, serviceName, mockValues) {
        return __awaiter(this, void 0, void 0, function () {
            var mockData, model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mockValues.unshift(null);
                        mockData = mockValues.join("&elements=");
                        return [4 /*yield*/, this.getMtrModel({ applicationId: applicationId, serviceName: serviceName })];
                    case 1:
                        model = _a.sent();
                        return [4 /*yield*/, this._request.post("/mtr/admin/mock?gameModelId=".concat(model.data.gmid).concat(mockData))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PlatformGDK.prototype.mockResetMTR = function (applicationId, serviceName) {
        return __awaiter(this, void 0, void 0, function () {
            var model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMtrModel({ applicationId: applicationId, serviceName: serviceName })];
                    case 1:
                        model = _a.sent();
                        return [4 /*yield*/, this._request.delete("/mtr/admin/mock?gameModelId=".concat(model.data.gmid))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PlatformGDK.prototype.mockAddITG = function (applicationId, mockValues) {
        return __awaiter(this, void 0, void 0, function () {
            var parsedData, _i, _a, draw;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        parsedData = [];
                        for (_i = 0, _a = mockValues.draws; _i < _a.length; _i++) {
                            draw = _a[_i];
                            parsedData.push({
                                rank: draw.rankIndex,
                                symbol: draw.symbol,
                            });
                        }
                        return [4 /*yield*/, this._request.post("".concat(this.bridge.mocksConfiguration.path, "/").concat(mockValues.lotteryGameCode), parsedData)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PlatformGDK.prototype.mockGetITG = function (applicationId, serviceName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.get("".concat(this.bridge.mocksConfiguration.path, "/").concat(serviceName))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PlatformGDK.prototype.mockResetITG = function (applicationId, serviceName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.delete("".concat(this.bridge.mocksConfiguration.path, "/").concat(serviceName))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PlatformGDK.prototype.mockResetAllITG = function (applicationId, serviceName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.delete("".concat(this.bridge.mocksConfiguration.path, "/").concat(serviceName))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Very poor way to protect the player from a multiple bet bug coming from a game.
     */
    PlatformGDK.prototype._isMultiBet = function () {
        var now = new Date();
        if (this._lastBetDate) {
            var delta = now.getTime() - this._lastBetDate.getTime();
            if (delta <
                (this._configuration.multiBetDelay
                    ? this._configuration.multiBetDelay
                    : DEFAULT_MULTIBET_DELAY)) {
                this.bridge.emitEvent("TAG", { eventType: "error", event: "multibet-occurence" });
                return true;
            }
        }
        this._lastBetDate = now;
        return false;
    };
    return PlatformGDK;
}());
exports.default = PlatformGDK;
//# sourceMappingURL=platform-gdk.js.map