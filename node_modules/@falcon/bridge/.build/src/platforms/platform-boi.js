"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var platform_itf_1 = require("./platform-itf");
var falcon_game_bridge_1 = require("../falcon-game-bridge");
var ITF_ADMIN = "/itf-backend/rest";
var ITG_ADMIN = "/itg-backend/rest";
var MTR_ADMIN = "/motors-backend/rest/mtr";
var PlatformBoi = /** @class */ (function (_super) {
    __extends(PlatformBoi, _super);
    function PlatformBoi(bridge) {
        var _this = _super.call(this, bridge) || this;
        _this.bridge = bridge;
        // Request without token instance
        _this._requestBoi = axios_1.default.create();
        _this._requestBoi.interceptors.response.use(function (a) { return a; }, function (e) { return _this._handleResponseErrors(e); });
        return _this;
    }
    /**
     * Retrieve games compatibility for a lottery
     */
    PlatformBoi.prototype.getCompatibility = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, []];
            });
        });
    };
    /**
     * Retrive games catalog for a lottery
     * @param lotteryCode
     */
    PlatformBoi.prototype.getGames = function (lotteryCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, []];
            });
        });
    };
    /**
     * retrieve a specific ticket
     * @param ticketId
     * @returns a ticket or null if no ticket was found
     */
    PlatformBoi.prototype.getItgTicket = function (ticketId, demo) {
        var _a, _b;
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            var data, ticket;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.bridge.updateGameMode(demo ? falcon_game_bridge_1.EGameMode.demo : falcon_game_bridge_1.EGameMode.normal)];
                    case 1:
                        _d.sent();
                        return [4 /*yield*/, this._requestBoi.get("".concat(ITG_ADMIN, "/itg/tickets-admin/lotteries/games/tickets/search?page=0&size=10&filter=id+eq+").concat(ticketId), {
                                headers: (_c = {},
                                    _c[platform_itf_1.EHeader.ACCEPT] = "application/vnd.fgs.itg.admin.ticket.page-1+json",
                                    _c[platform_itf_1.EHeader.CONTENTTYPE] = "application/vnd.lotsys.falcon.query-1+json",
                                    _c),
                            })];
                    case 2:
                        data = (_d.sent()).data;
                        if (((_b = (_a = data === null || data === void 0 ? void 0 : data.content) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {
                            ticket = data.content[0];
                            ticket.symbol = ticket.symbols;
                            ticket.wonAmount = ticket.winAmount;
                            ticket.serviceName = ticket.lotteryGameCode;
                            // ensure we got a ticket for the game loaded
                            if (ticket.serviceName !== this.bridge.channel.name) {
                                throw { code: "mismatch-game-code" };
                            }
                            return [2 /*return*/, ticket];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Retrieve all non claimed ticket for a game (and current player)
     * @param serviceName
     * @param demo
     */
    PlatformBoi.prototype.getItgTickets = function (serviceName, demo) {
        if (demo === void 0) { demo = false; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, []];
            });
        });
    };
    /**
     * Retrive game configuration, try to get the config from getGameConfigurationService, fallback to loadJSON on error
     * @param lotteryCode the code of the current lottery. @example "fdj" or "fake-lottery".
     * @param service the service object containing the applicationId and service name.
     */
    PlatformBoi.prototype.getCurrentGameConfig = function (lotteryCode, service) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!lotteryCode) {
                            lotteryCode = this.bridge.channel.lotteryCode;
                        }
                        if (!service) {
                            service = { applicationId: this.bridge.channel.type, serviceName: this.bridge.channel.name };
                        }
                        return [4 /*yield*/, this._requestBoi.get("".concat(ITF_ADMIN, "/itf/catalog-admin/game/config/").concat(lotteryCode, "/").concat(service.serviceName), {
                                headers: (_a = {},
                                    _a[platform_itf_1.EHeader.ACCEPT] = "application/vnd.fgs.itf.catalog.game.admin.config.map-1+json",
                                    _a),
                            })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Place a bet on an ITG game.
     * @param betRequest the bet request object containing the needed bet request informations.
     */
    PlatformBoi.prototype.createITGBet = function (betRequest) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                alert("Betting not allowed from back-office");
                return [2 /*return*/, Promise.reject({ code: "BetError.BOI" })];
            });
        });
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //    MOTORS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PlatformBoi.prototype.getMtrModel = function () {
        return __awaiter(this, void 0, void 0, function () {
            var sessionId, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        sessionId = this.bridge.getTicketIdToReplay();
                        if (!sessionId) {
                            alert("SessionId expected when getting mtr session in back-office.");
                            return [2 /*return*/, Promise.reject({ code: "BetError.BOI" })];
                        }
                        return [4 /*yield*/, this._request.get("".concat(MTR_ADMIN, "/gamesession-admin/").concat(sessionId, "/model"), {
                                baseURL: "",
                                headers: (_a = {},
                                    _a[platform_itf_1.EHeader.ACCEPT] = "application/vnd.lotsys.mtr.gamesession.admin.game.model-1+json",
                                    _a),
                            })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    PlatformBoi.prototype.getMtrSession = function (_service, _demoMode, sessionId) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!sessionId) {
                            alert("SessionId expected when getting mtr session in back-office.");
                            return [2 /*return*/, Promise.reject({ code: "BetError.BOI" })];
                        }
                        return [4 /*yield*/, this._request.get("".concat(MTR_ADMIN, "/gamesession-admin/").concat(sessionId, "/events"), {
                                baseURL: "",
                                headers: (_a = {},
                                    _a[platform_itf_1.EHeader.ACCEPT] = "application/vnd.lotsys.mtr.gamesession.admin.gamesession-2+json",
                                    _a),
                            })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, {
                                id: "".concat(data.id),
                                betAmount: data.betAmount,
                                wonAmount: data.wonAmount,
                                data: {
                                    state: data.state,
                                    gmid: data.gameId,
                                    steps: data.steps,
                                },
                            }];
                }
            });
        });
    };
    PlatformBoi.prototype.createMtrBet = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                alert("Betting not allowed from back-office");
                return [2 /*return*/, Promise.reject({ code: "BetError.BOI" })];
            });
        });
    };
    PlatformBoi.prototype.updateMtrBet = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                alert("Betting not allowed from back-office");
                return [2 /*return*/, Promise.reject({ code: "BetError.BOI" })];
            });
        });
    };
    /**
     * Retrieve state information from IF in order to authenticate
     * @param lotteryCode
     */
    PlatformBoi.prototype.getState = function (lotteryCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        state: "",
                        redirectUrl: "",
                    }];
            });
        });
    };
    return PlatformBoi;
}(platform_itf_1.default));
exports.default = PlatformBoi;
//# sourceMappingURL=platform-boi.js.map