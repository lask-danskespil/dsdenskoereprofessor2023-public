"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jackpot = void 0;
var Jackpot = /** @class */ (function () {
    /**
     * Constructor
     * @param bridge the bridge instance used to access channel etc.
     */
    function Jackpot(bridge) {
        this.bridge = bridge;
        /**
         * The iFrame reference used to display the jackpot applet.
         */
        this.iframe = null;
        /**
         * The saved promise reference that will be resolved when jackpot applet asks to quit.
         */
        this.promise = null;
        this._jackpotResult = null;
        this._resolveFn = null;
        // Empty.
    }
    /**
     * Displays the jackpot reveleation by creating a new iframe.
     * @param jackpotResult the jackpot result object from the bet response.
     */
    Jackpot.prototype.displayJackpotRevelation = function (jackpotResult) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                // Misc.
                this._jackpotResult = jackpotResult;
                // Create iframe
                this._createIFrame();
                // Return promise
                return [2 /*return*/, (this.promise = new Promise(function (resolve, reject) {
                        _this._resolveFn = resolve;
                    }))];
            });
        });
    };
    /**
     * Handles the given message that comes from the superjackpot applet.
     * @comes from Channel.onMessage.
     */
    Jackpot.prototype.handleMessage = function (message) {
        var _this = this;
        var data = message.data;
        // Init
        if (data.functionName === "__init__") {
            this._sendGuestResult(data, message.origin, {
                type: this._jackpotResult.applicationId,
                name: this._jackpotResult.serviceName,
                jackpotResult: this._jackpotResult,
            });
        }
        // Action
        else {
            var result = this[data.functionName] && this[data.functionName].apply(this, data.parameters);
            if (!result) {
                return;
            }
            if (this._isPromise(result)) {
                result
                    .then(function (r) { return _this._sendGuestResult(data, message.origin, r); })
                    .catch(function (e) { return _this._sendGuestResult(data, message.origin, e, true); });
            }
            else {
                this._sendGuestResult(data, message.origin, result);
            }
        }
    };
    /**
     * Returns the current game information.
     * @param type the game type (application Id)
     * @param name the name of the game (service name)
     */
    Jackpot.prototype.getGameInformation = function (type, name) {
        return Promise.resolve({
            type: type,
            name: name,
            label: "Jackpot",
        });
    };
    /**
     * Returns the current user information.
     * @param forceAuthenticated If true, require the user to be signed in before resolving the promise.
     * @param sessionTokenType If provided, require a session token to be exchanged.
     */
    Jackpot.prototype.getUserInformation = function (forceAuthenticated, sessionTokenType) {
        return this.bridge.channel.getUserInformation({
            forceAuthenticate: forceAuthenticated,
            platformSessionType: sessionTokenType,
        });
    };
    /**
     * Returns the current purse information.
     */
    Jackpot.prototype.getPurseInformation = function () {
        return this.bridge.channel.getPurseInformation();
    };
    /**
     * Returns the current locale informations.
     * @legacy
     */
    Jackpot.prototype.getLocaleInformation = function () {
        return this.bridge.channel.getLocaleInformation();
    };
    /**
     * Returns the current game configuration.
     * @param type the application type (applicationId)
     * @param name the service name
     * @legacy
     */
    Jackpot.prototype.getGameConfiguration = function (type, name) {
        return this.bridge.channel.getGameConfiguration(type, name);
    };
    /**
     * Executes the given action whith the given parameters.
     * @param actionId the action id to execute (CLOSE_GAME, etc.).
     * @param parameters the parameters to send to the action being called.
     */
    Jackpot.prototype.executeAction = function (actionId, parameters) {
        if (actionId === "CLOSE_GAME") {
            document.body.removeChild(this.iframe);
            this.iframe = null;
            this._resolveFn();
            return;
        }
        else {
            return this.bridge.channel.executeAction(actionId, parameters);
        }
    };
    // Sends the given result to the jackpot iframe
    Jackpot.prototype._sendGuestResult = function (request, allowedHost, result, error) {
        var proxyResponse = {
            channelId: "__jackpot__",
            result: result,
            id: request.id,
            error: error,
        };
        this.iframe.contentWindow.postMessage(proxyResponse, allowedHost);
    };
    // Creates the jackpot game iframe
    Jackpot.prototype._createIFrame = function () {
        this.iframe = document.createElement("iframe");
        this.iframe.src = "../bridge/loader.html?channel=" + "__jackpot__";
        this.iframe.frameBorder = "no";
        this.iframe.scrolling = "no";
        this.iframe.width = "100%";
        this.iframe.height = "100%";
        this.iframe.style.position = "fixed";
        this.iframe.style.left = "0px";
        this.iframe.style.right = "0px";
        this.iframe.style.top = "0px";
        this.iframe.style.bottom = "0px";
        this.iframe.style.zIndex = "9999";
        document.body.appendChild(this.iframe);
    };
    // Returns if the given object is a promise
    Jackpot.prototype._isPromise = function (object) {
        return typeof object.then === "function" && typeof object.catch === "function";
    };
    return Jackpot;
}());
exports.Jackpot = Jackpot;
//# sourceMappingURL=jackpot.js.map