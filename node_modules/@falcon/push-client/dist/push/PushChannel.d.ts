import { PushEventMap } from './event';
/**
 * Push channel interface
 */
interface PushChannel {
    /**
     * Start listening for push messages
     * @return Promise that resolves once the channel is ready
     */
    start(): Promise<void>;
    /**
     * Stop listening for push messages
     * @return Promise that resolves once the channel is stopped
     */
    stop(): Promise<void>;
    /**
     * Mute the push mechanism
     * <p>While muted, messages are still received but are buffered and not sent to the listener.</p>
     * <p>Once unmuted, all buffered messages are sent.</p>
     * @param discardMessages While muted, discard all received messages
     */
    mute(discardMessages?: boolean): void;
    /**
     * Unmute the push mechansm
     * <p>Resumes sending messages to the event listeners, after sending all messages that may have ended up in the buffer.</p>
     */
    unmute(): void;
    /**
     * Add an event listener
     * @param type     Event type
     * @param listener Event listener
     * @param options  Options
     */
    addEventListener<K extends keyof PushEventMap>(type: K, listener?: ((this: PushChannel, ev: PushEventMap[K]) => any) | EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    /**
     * Remove an event listener
     * @param type     Event type
     * @param listener Listener
     * @param options  Options
     */
    removeEventListener<K extends keyof PushEventMap>(type: K, listener?: ((this: PushChannel, ev: PushEventMap[K]) => any) | EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    /**
     * Ping the channel
     */
    ping(): void;
}
export { PushChannel };
